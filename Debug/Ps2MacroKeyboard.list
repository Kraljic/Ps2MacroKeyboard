
Ps2MacroKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a384  0800a384  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  0800a384  0800a384  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a384  0800a384  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a384  0800a384  0001a384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800a38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  20000238  0800a5c4  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  0800a5c4  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b60  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bfd  00000000  00000000  00034dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  000399c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  0003aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eea6  00000000  00000000  0003b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017af8  00000000  00000000  0005a77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2bd  00000000  00000000  00072276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101533  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a4  00000000  00000000  00101584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000238 	.word	0x20000238
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a1b4 	.word	0x0800a1b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000023c 	.word	0x2000023c
 8000148:	0800a1b4 	.word	0x0800a1b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
extern USBD_HandleTypeDef hUsbDeviceFS;

uint8_t ps2ScanCodeBuffer = 0;
char outBuffer[128] = {0};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *husart) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	MacroKeyboard::receivePs2Data(ps2ScanCodeBuffer);
 8000164:	4b04      	ldr	r3, [pc, #16]	; (8000178 <HAL_UART_RxCpltCallback+0x1c>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a04      	ldr	r2, [pc, #16]	; (800017c <HAL_UART_RxCpltCallback+0x20>)
 800016a:	7812      	ldrb	r2, [r2, #0]
 800016c:	4610      	mov	r0, r2
 800016e:	4798      	blx	r3
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	200003b0 	.word	0x200003b0
 800017c:	20000254 	.word	0x20000254

08000180 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE>:

void send_report_to_usb(keyboard_api::KeyboardReport *kr) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	static keyboard_api::KeyboardReport krStatic = {0};
	krStatic = *kr;
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x40>)
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	6810      	ldr	r0, [r2, #0]
 800018e:	6851      	ldr	r1, [r2, #4]
 8000190:	c303      	stmia	r3!, {r0, r1}

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &krStatic, 8);
 8000192:	2208      	movs	r2, #8
 8000194:	490a      	ldr	r1, [pc, #40]	; (80001c0 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x40>)
 8000196:	480b      	ldr	r0, [pc, #44]	; (80001c4 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x44>)
 8000198:	f007 fc96 	bl	8007ac8 <USBD_HID_SendReport>

	hid_keyboard::dumpHidKeyboardReport(&krStatic, outBuffer);
 800019c:	490a      	ldr	r1, [pc, #40]	; (80001c8 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x48>)
 800019e:	4808      	ldr	r0, [pc, #32]	; (80001c0 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x40>)
 80001a0:	f006 fb8c 	bl	80068bc <_ZN12hid_keyboard21dumpHidKeyboardReportEPN12keyboard_api14KeyboardReportEPc>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)outBuffer, strlen(outBuffer));
 80001a4:	4808      	ldr	r0, [pc, #32]	; (80001c8 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x48>)
 80001a6:	f7ff ffd1 	bl	800014c <strlen>
 80001aa:	4603      	mov	r3, r0
 80001ac:	b29b      	uxth	r3, r3
 80001ae:	461a      	mov	r2, r3
 80001b0:	4905      	ldr	r1, [pc, #20]	; (80001c8 <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x48>)
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <_Z18send_report_to_usbPN12keyboard_api14KeyboardReportE+0x4c>)
 80001b4:	f003 f957 	bl	8003466 <HAL_UART_Transmit_IT>
}
 80001b8:	bf00      	nop
 80001ba:	3708      	adds	r7, #8
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200002d8 	.word	0x200002d8
 80001c4:	200005e8 	.word	0x200005e8
 80001c8:	20000258 	.word	0x20000258
 80001cc:	20000320 	.word	0x20000320

080001d0 <setup>:

void setup() {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
	// Setup ps2 receiver
	HAL_UART_Receive_DMA(&huart1, &ps2ScanCodeBuffer, 1);
 80001d6:	2201      	movs	r2, #1
 80001d8:	490c      	ldr	r1, [pc, #48]	; (800020c <setup+0x3c>)
 80001da:	480d      	ldr	r0, [pc, #52]	; (8000210 <setup+0x40>)
 80001dc:	f003 f988 	bl	80034f0 <HAL_UART_Receive_DMA>

	// Create macro keyboard config
	MacroKeyboardConfig config = { 0 };
 80001e0:	463b      	mov	r3, r7
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
	config.delayMethod = &HAL_Delay;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <setup+0x44>)
 80001ee:	60bb      	str	r3, [r7, #8]
	config.sendReportMethod = &send_report_to_usb;
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <setup+0x48>)
 80001f2:	60fb      	str	r3, [r7, #12]
	config.macroDataAddress = MACRO_DATA_ADR;
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <setup+0x4c>)
 80001f6:	607b      	str	r3, [r7, #4]
	config.reportId = REPORT_ID;
 80001f8:	2301      	movs	r3, #1
 80001fa:	703b      	strb	r3, [r7, #0]

	// Initialize macro keyboard
	MacroKeyboard::init(&config);
 80001fc:	463b      	mov	r3, r7
 80001fe:	4618      	mov	r0, r3
 8000200:	f006 fe74 	bl	8006eec <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE>
//	kr.keys[0] = 0x04;
//	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &kr, 8);
//	HAL_Delay(1000);
//	kr.keys[0] = 0x00;
//	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &kr, 8);
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	20000254 	.word	0x20000254
 8000210:	200002e0 	.word	0x200002e0
 8000214:	080008d9 	.word	0x080008d9
 8000218:	08000181 	.word	0x08000181
 800021c:	08010000 	.word	0x08010000

08000220 <loop>:

void loop() {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	MacroKeyboard::run();
 8000224:	f006 fef8 	bl	8007018 <_ZN14macro_keyboard13MacroKeyboard3runEv>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000230:	f000 faf0 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000234:	f000 f81e 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000238:	f000 f8e8 	bl	800040c <MX_GPIO_Init>
  MX_DMA_Init();
 800023c:	f000 f8c8 	bl	80003d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000240:	f000 f872 	bl	8000328 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000244:	f008 fd30 	bl	8008ca8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f898 	bl	800037c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800024c:	f7ff ffc0 	bl	80001d0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000256:	4806      	ldr	r0, [pc, #24]	; (8000270 <main+0x44>)
 8000258:	f001 f858 	bl	800130c <HAL_GPIO_WritePin>
	loop();
 800025c:	f7ff ffe0 	bl	8000220 <loop>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	4802      	ldr	r0, [pc, #8]	; (8000270 <main+0x44>)
 8000268:	f001 f850 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800026c:	e7f0      	b.n	8000250 <main+0x24>
 800026e:	bf00      	nop
 8000270:	40011000 	.word	0x40011000

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b094      	sub	sp, #80	; 0x50
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f009 f93a 	bl	80094fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a4:	2301      	movs	r3, #1
 80002a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fbae 	bl	8002a2c <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002d6:	f000 f8e5 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f0:	f107 0314 	add.w	r3, r7, #20
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 fe1a 	bl	8002f30 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000302:	f000 f8cf 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000306:	2310      	movs	r3, #16
 8000308:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f002 ffa5 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800031c:	f000 f8c2 	bl	80004a4 <Error_Handler>
  }
}
 8000320:	bf00      	nop
 8000322:	3750      	adds	r7, #80	; 0x50
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_USART1_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 13000;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000334:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800033c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000340:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000350:	2204      	movs	r2, #4
 8000352:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000362:	f003 f833 	bl	80033cc <HAL_UART_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800036c:	f000 f89a 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200002e0 	.word	0x200002e0
 8000378:	40013800 	.word	0x40013800

0800037c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000382:	4a12      	ldr	r2, [pc, #72]	; (80003cc <MX_USART2_UART_Init+0x50>)
 8000384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800038c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_USART2_UART_Init+0x4c>)
 80003b4:	f003 f80a 	bl	80033cc <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003be:	f000 f871 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000320 	.word	0x20000320
 80003cc:	40004400 	.word	0x40004400

080003d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_DMA_Init+0x38>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <MX_DMA_Init+0x38>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_DMA_Init+0x38>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	200f      	movs	r0, #15
 80003f4:	f000 fb6b 	bl	8000ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003f8:	200f      	movs	r0, #15
 80003fa:	f000 fb84 	bl	8000b06 <HAL_NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <MX_GPIO_Init+0x90>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1d      	ldr	r2, [pc, #116]	; (800049c <MX_GPIO_Init+0x90>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <MX_GPIO_Init+0x90>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_GPIO_Init+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a17      	ldr	r2, [pc, #92]	; (800049c <MX_GPIO_Init+0x90>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <MX_GPIO_Init+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_GPIO_Init+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a11      	ldr	r2, [pc, #68]	; (800049c <MX_GPIO_Init+0x90>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	480c      	ldr	r0, [pc, #48]	; (80004a0 <MX_GPIO_Init+0x94>)
 8000470:	f000 ff4c 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <MX_GPIO_Init+0x94>)
 800048e:	f000 fdb9 	bl	8001004 <HAL_GPIO_Init>

}
 8000492:	bf00      	nop
 8000494:	3720      	adds	r7, #32
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40011000 	.word	0x40011000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a4e      	ldr	r2, [pc, #312]	; (8000668 <HAL_UART_MspInit+0x154>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d158      	bne.n	80005e6 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000534:	4b4d      	ldr	r3, [pc, #308]	; (800066c <HAL_UART_MspInit+0x158>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a4c      	ldr	r2, [pc, #304]	; (800066c <HAL_UART_MspInit+0x158>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b4a      	ldr	r3, [pc, #296]	; (800066c <HAL_UART_MspInit+0x158>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b47      	ldr	r3, [pc, #284]	; (800066c <HAL_UART_MspInit+0x158>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a46      	ldr	r2, [pc, #280]	; (800066c <HAL_UART_MspInit+0x158>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b44      	ldr	r3, [pc, #272]	; (800066c <HAL_UART_MspInit+0x158>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	2302      	movs	r3, #2
 800056c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056e:	2303      	movs	r3, #3
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	4619      	mov	r1, r3
 8000578:	483d      	ldr	r0, [pc, #244]	; (8000670 <HAL_UART_MspInit+0x15c>)
 800057a:	f000 fd43 	bl	8001004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800057e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	4619      	mov	r1, r3
 8000592:	4837      	ldr	r0, [pc, #220]	; (8000670 <HAL_UART_MspInit+0x15c>)
 8000594:	f000 fd36 	bl	8001004 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000598:	4b36      	ldr	r3, [pc, #216]	; (8000674 <HAL_UART_MspInit+0x160>)
 800059a:	4a37      	ldr	r2, [pc, #220]	; (8000678 <HAL_UART_MspInit+0x164>)
 800059c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800059e:	4b35      	ldr	r3, [pc, #212]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a4:	4b33      	ldr	r3, [pc, #204]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_DISABLE;
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005b0:	4b30      	ldr	r3, [pc, #192]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005be:	2220      	movs	r2, #32
 80005c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005c8:	482a      	ldr	r0, [pc, #168]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005ca:	f000 fab7 	bl	8000b3c <HAL_DMA_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80005d4:	f7ff ff66 	bl	80004a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a26      	ldr	r2, [pc, #152]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
 80005de:	4a25      	ldr	r2, [pc, #148]	; (8000674 <HAL_UART_MspInit+0x160>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e4:	e03c      	b.n	8000660 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a24      	ldr	r2, [pc, #144]	; (800067c <HAL_UART_MspInit+0x168>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d137      	bne.n	8000660 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <HAL_UART_MspInit+0x158>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a1d      	ldr	r2, [pc, #116]	; (800066c <HAL_UART_MspInit+0x158>)
 80005f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <HAL_UART_MspInit+0x158>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <HAL_UART_MspInit+0x158>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a17      	ldr	r2, [pc, #92]	; (800066c <HAL_UART_MspInit+0x158>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_UART_MspInit+0x158>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000620:	2304      	movs	r3, #4
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0318 	add.w	r3, r7, #24
 8000630:	4619      	mov	r1, r3
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <HAL_UART_MspInit+0x15c>)
 8000634:	f000 fce6 	bl	8001004 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000638:	2308      	movs	r3, #8
 800063a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	4619      	mov	r1, r3
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <HAL_UART_MspInit+0x15c>)
 800064c:	f000 fcda 	bl	8001004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2026      	movs	r0, #38	; 0x26
 8000656:	f000 fa3a 	bl	8000ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800065a:	2026      	movs	r0, #38	; 0x26
 800065c:	f000 fa53 	bl	8000b06 <HAL_NVIC_EnableIRQ>
}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40013800 	.word	0x40013800
 800066c:	40021000 	.word	0x40021000
 8000670:	40010800 	.word	0x40010800
 8000674:	20000360 	.word	0x20000360
 8000678:	40020058 	.word	0x40020058
 800067c:	40004400 	.word	0x40004400

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c6:	f000 f8eb 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <DMA1_Channel5_IRQHandler+0x10>)
 80006d6:	f000 fb61 	bl	8000d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000360 	.word	0x20000360

080006e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006ea:	f000 ff58 	bl	800159e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000aac 	.word	0x20000aac

080006f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <USART2_IRQHandler+0x10>)
 80006fe:	f002 ff77 	bl	80035f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000320 	.word	0x20000320

0800070c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	return 1;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <_kill>:

int _kill(int pid, int sig)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
 8000722:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000724:	f008 feaa 	bl	800947c <__errno>
 8000728:	4603      	mov	r3, r0
 800072a:	2216      	movs	r2, #22
 800072c:	601a      	str	r2, [r3, #0]
	return -1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <_exit>:

void _exit (int status)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000742:	f04f 31ff 	mov.w	r1, #4294967295
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffe7 	bl	800071a <_kill>
	while (1) {}		/* Make sure we hang here */
 800074c:	e7fe      	b.n	800074c <_exit+0x12>
	...

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f008 fe7c 	bl	800947c <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <_sbrk+0x64>)
 80007a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20005000 	.word	0x20005000
 80007b0:	00000400 	.word	0x00000400
 80007b4:	200003a4 	.word	0x200003a4
 80007b8:	20000dc0 	.word	0x20000dc0

080007bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d4:	480a      	ldr	r0, [pc, #40]	; (8000800 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007e4:	f842 3b04 	str.w	r3, [r2], #4

080007e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff ffe5 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f008 fe49 	bl	8009488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fd19 	bl	800022c <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r3, =_sidata
 80007fc:	0800a38c 	.word	0x0800a38c
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000804:	20000238 	.word	0x20000238
  ldr r2, =_sbss
 8000808:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 800080c:	20000dc0 	.word	0x20000dc0

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f947 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fe3e 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f95f 	bl	8000b22 <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f927 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000008 	.word	0x20000008
 80008c0:	200003a8 	.word	0x200003a8

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	200003a8 	.word	0x200003a8

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff fff0 	bl	80008c4 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffe0 	bl	80008c4 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db0b      	blt.n	80009ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	4906      	ldr	r1, [pc, #24]	; (80009b8 <__NVIC_EnableIRQ+0x34>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff90 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff2d 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff42 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff90 	bl	8000a10 <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5f 	bl	80009bc <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff35 	bl	8000984 <__NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffa2 	bl	8000a74 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e043      	b.n	8000bda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <HAL_DMA_Init+0xa8>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_DMA_Init+0xac>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	091b      	lsrs	r3, r3, #4
 8000b64:	009a      	lsls	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_DMA_Init+0xb0>)
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2202      	movs	r2, #2
 8000b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	bffdfff8 	.word	0xbffdfff8
 8000be8:	cccccccd 	.word	0xcccccccd
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d101      	bne.n	8000c10 <HAL_DMA_Start_IT+0x20>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e04a      	b.n	8000ca6 <HAL_DMA_Start_IT+0xb6>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2201      	movs	r2, #1
 8000c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d13a      	bne.n	8000c98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2202      	movs	r2, #2
 8000c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0201 	bic.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f000 f9ae 	bl	8000fa8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d008      	beq.n	8000c66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 020e 	orr.w	r2, r2, #14
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e00f      	b.n	8000c86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f022 0204 	bic.w	r2, r2, #4
 8000c74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 020a 	orr.w	r2, r2, #10
 8000c84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f042 0201 	orr.w	r2, r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e005      	b.n	8000ca4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d005      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2204      	movs	r2, #4
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e051      	b.n	8000d76 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 020e 	bic.w	r2, r2, #14
 8000ce0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0201 	bic.w	r2, r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <HAL_DMA_Abort_IT+0xd0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d029      	beq.n	8000d50 <HAL_DMA_Abort_IT+0xa0>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <HAL_DMA_Abort_IT+0xd4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d022      	beq.n	8000d4c <HAL_DMA_Abort_IT+0x9c>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_DMA_Abort_IT+0xd8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d01a      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x96>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <HAL_DMA_Abort_IT+0xdc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d012      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x90>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <HAL_DMA_Abort_IT+0xe0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d00a      	beq.n	8000d3a <HAL_DMA_Abort_IT+0x8a>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <HAL_DMA_Abort_IT+0xe4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d102      	bne.n	8000d34 <HAL_DMA_Abort_IT+0x84>
 8000d2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d32:	e00e      	b.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d38:	e00b      	b.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	e008      	b.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	e005      	b.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4a:	e002      	b.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	e000      	b.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000d50:	2301      	movs	r3, #1
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <HAL_DMA_Abort_IT+0xe8>)
 8000d54:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	4798      	blx	r3
    } 
  }
  return status;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40020008 	.word	0x40020008
 8000d84:	4002001c 	.word	0x4002001c
 8000d88:	40020030 	.word	0x40020030
 8000d8c:	40020044 	.word	0x40020044
 8000d90:	40020058 	.word	0x40020058
 8000d94:	4002006c 	.word	0x4002006c
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	2204      	movs	r2, #4
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d04f      	beq.n	8000e64 <HAL_DMA_IRQHandler+0xc8>
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d04a      	beq.n	8000e64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d107      	bne.n	8000dec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0204 	bic.w	r2, r2, #4
 8000dea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a66      	ldr	r2, [pc, #408]	; (8000f8c <HAL_DMA_IRQHandler+0x1f0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d029      	beq.n	8000e4a <HAL_DMA_IRQHandler+0xae>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a65      	ldr	r2, [pc, #404]	; (8000f90 <HAL_DMA_IRQHandler+0x1f4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d022      	beq.n	8000e46 <HAL_DMA_IRQHandler+0xaa>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a63      	ldr	r2, [pc, #396]	; (8000f94 <HAL_DMA_IRQHandler+0x1f8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d01a      	beq.n	8000e40 <HAL_DMA_IRQHandler+0xa4>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a62      	ldr	r2, [pc, #392]	; (8000f98 <HAL_DMA_IRQHandler+0x1fc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d012      	beq.n	8000e3a <HAL_DMA_IRQHandler+0x9e>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a60      	ldr	r2, [pc, #384]	; (8000f9c <HAL_DMA_IRQHandler+0x200>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00a      	beq.n	8000e34 <HAL_DMA_IRQHandler+0x98>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a5f      	ldr	r2, [pc, #380]	; (8000fa0 <HAL_DMA_IRQHandler+0x204>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d102      	bne.n	8000e2e <HAL_DMA_IRQHandler+0x92>
 8000e28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e2c:	e00e      	b.n	8000e4c <HAL_DMA_IRQHandler+0xb0>
 8000e2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e32:	e00b      	b.n	8000e4c <HAL_DMA_IRQHandler+0xb0>
 8000e34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e38:	e008      	b.n	8000e4c <HAL_DMA_IRQHandler+0xb0>
 8000e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e3e:	e005      	b.n	8000e4c <HAL_DMA_IRQHandler+0xb0>
 8000e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e44:	e002      	b.n	8000e4c <HAL_DMA_IRQHandler+0xb0>
 8000e46:	2340      	movs	r3, #64	; 0x40
 8000e48:	e000      	b.n	8000e4c <HAL_DMA_IRQHandler+0xb0>
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	4a55      	ldr	r2, [pc, #340]	; (8000fa4 <HAL_DMA_IRQHandler+0x208>)
 8000e4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8094 	beq.w	8000f82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e62:	e08e      	b.n	8000f82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	2202      	movs	r2, #2
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d056      	beq.n	8000f22 <HAL_DMA_IRQHandler+0x186>
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d051      	beq.n	8000f22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0320 	and.w	r3, r3, #32
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10b      	bne.n	8000ea4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 020a 	bic.w	r2, r2, #10
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a38      	ldr	r2, [pc, #224]	; (8000f8c <HAL_DMA_IRQHandler+0x1f0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d029      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x166>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <HAL_DMA_IRQHandler+0x1f4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d022      	beq.n	8000efe <HAL_DMA_IRQHandler+0x162>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a35      	ldr	r2, [pc, #212]	; (8000f94 <HAL_DMA_IRQHandler+0x1f8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d01a      	beq.n	8000ef8 <HAL_DMA_IRQHandler+0x15c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a34      	ldr	r2, [pc, #208]	; (8000f98 <HAL_DMA_IRQHandler+0x1fc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d012      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0x156>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_DMA_IRQHandler+0x200>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00a      	beq.n	8000eec <HAL_DMA_IRQHandler+0x150>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_DMA_IRQHandler+0x204>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d102      	bne.n	8000ee6 <HAL_DMA_IRQHandler+0x14a>
 8000ee0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ee4:	e00e      	b.n	8000f04 <HAL_DMA_IRQHandler+0x168>
 8000ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eea:	e00b      	b.n	8000f04 <HAL_DMA_IRQHandler+0x168>
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	e008      	b.n	8000f04 <HAL_DMA_IRQHandler+0x168>
 8000ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef6:	e005      	b.n	8000f04 <HAL_DMA_IRQHandler+0x168>
 8000ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efc:	e002      	b.n	8000f04 <HAL_DMA_IRQHandler+0x168>
 8000efe:	2320      	movs	r3, #32
 8000f00:	e000      	b.n	8000f04 <HAL_DMA_IRQHandler+0x168>
 8000f02:	2302      	movs	r3, #2
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <HAL_DMA_IRQHandler+0x208>)
 8000f06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d034      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f20:	e02f      	b.n	8000f82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2208      	movs	r2, #8
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d028      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x1e8>
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d023      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 020e 	bic.w	r2, r2, #14
 8000f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
    }
  }
  return;
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
}
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020008 	.word	0x40020008
 8000f90:	4002001c 	.word	0x4002001c
 8000f94:	40020030 	.word	0x40020030
 8000f98:	40020044 	.word	0x40020044
 8000f9c:	40020058 	.word	0x40020058
 8000fa0:	4002006c 	.word	0x4002006c
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	d108      	bne.n	8000fe8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fe6:	e007      	b.n	8000ff8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	e169      	b.n	80012ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001018:	2201      	movs	r2, #1
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 8158 	bne.w	80012e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	4a9a      	ldr	r2, [pc, #616]	; (80012a4 <HAL_GPIO_Init+0x2a0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d05e      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001040:	4a98      	ldr	r2, [pc, #608]	; (80012a4 <HAL_GPIO_Init+0x2a0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d875      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001046:	4a98      	ldr	r2, [pc, #608]	; (80012a8 <HAL_GPIO_Init+0x2a4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d058      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 800104c:	4a96      	ldr	r2, [pc, #600]	; (80012a8 <HAL_GPIO_Init+0x2a4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d86f      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001052:	4a96      	ldr	r2, [pc, #600]	; (80012ac <HAL_GPIO_Init+0x2a8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d052      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001058:	4a94      	ldr	r2, [pc, #592]	; (80012ac <HAL_GPIO_Init+0x2a8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d869      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800105e:	4a94      	ldr	r2, [pc, #592]	; (80012b0 <HAL_GPIO_Init+0x2ac>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d04c      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001064:	4a92      	ldr	r2, [pc, #584]	; (80012b0 <HAL_GPIO_Init+0x2ac>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d863      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800106a:	4a92      	ldr	r2, [pc, #584]	; (80012b4 <HAL_GPIO_Init+0x2b0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d046      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
 8001070:	4a90      	ldr	r2, [pc, #576]	; (80012b4 <HAL_GPIO_Init+0x2b0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d85d      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 8001076:	2b12      	cmp	r3, #18
 8001078:	d82a      	bhi.n	80010d0 <HAL_GPIO_Init+0xcc>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d859      	bhi.n	8001132 <HAL_GPIO_Init+0x12e>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <HAL_GPIO_Init+0x80>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010ff 	.word	0x080010ff
 8001088:	080010d9 	.word	0x080010d9
 800108c:	080010eb 	.word	0x080010eb
 8001090:	0800112d 	.word	0x0800112d
 8001094:	08001133 	.word	0x08001133
 8001098:	08001133 	.word	0x08001133
 800109c:	08001133 	.word	0x08001133
 80010a0:	08001133 	.word	0x08001133
 80010a4:	08001133 	.word	0x08001133
 80010a8:	08001133 	.word	0x08001133
 80010ac:	08001133 	.word	0x08001133
 80010b0:	08001133 	.word	0x08001133
 80010b4:	08001133 	.word	0x08001133
 80010b8:	08001133 	.word	0x08001133
 80010bc:	08001133 	.word	0x08001133
 80010c0:	08001133 	.word	0x08001133
 80010c4:	08001133 	.word	0x08001133
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010f5 	.word	0x080010f5
 80010d0:	4a79      	ldr	r2, [pc, #484]	; (80012b8 <HAL_GPIO_Init+0x2b4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010d6:	e02c      	b.n	8001132 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e029      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	3304      	adds	r3, #4
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e024      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	3308      	adds	r3, #8
 80010f0:	623b      	str	r3, [r7, #32]
          break;
 80010f2:	e01f      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	330c      	adds	r3, #12
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e01a      	b.n	8001134 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001106:	2304      	movs	r3, #4
 8001108:	623b      	str	r3, [r7, #32]
          break;
 800110a:	e013      	b.n	8001134 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d105      	bne.n	8001120 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	611a      	str	r2, [r3, #16]
          break;
 800111e:	e009      	b.n	8001134 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2308      	movs	r3, #8
 8001122:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	615a      	str	r2, [r3, #20]
          break;
 800112a:	e003      	b.n	8001134 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x130>
          break;
 8001132:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2bff      	cmp	r3, #255	; 0xff
 8001138:	d801      	bhi.n	800113e <HAL_GPIO_Init+0x13a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	e001      	b.n	8001142 <HAL_GPIO_Init+0x13e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2bff      	cmp	r3, #255	; 0xff
 8001148:	d802      	bhi.n	8001150 <HAL_GPIO_Init+0x14c>
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x152>
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3b08      	subs	r3, #8
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	210f      	movs	r1, #15
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	6a39      	ldr	r1, [r7, #32]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80b1 	beq.w	80012e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_GPIO_Init+0x2b8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800119c:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <HAL_GPIO_Init+0x2c0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d013      	beq.n	80011f0 <HAL_GPIO_Init+0x1ec>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <HAL_GPIO_Init+0x2c4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1e8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3e      	ldr	r2, [pc, #248]	; (80012cc <HAL_GPIO_Init+0x2c8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1e4>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <HAL_GPIO_Init+0x2cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1e0>
 80011e0:	2303      	movs	r3, #3
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011e4:	2304      	movs	r3, #4
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x1ee>
 80011f0:	2300      	movs	r3, #0
 80011f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001202:	492f      	ldr	r1, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x2bc>)
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	492c      	ldr	r1, [pc, #176]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	4928      	ldr	r1, [pc, #160]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001234:	4013      	ands	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4922      	ldr	r1, [pc, #136]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	491e      	ldr	r1, [pc, #120]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800125c:	4013      	ands	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	4918      	ldr	r1, [pc, #96]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	4914      	ldr	r1, [pc, #80]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d021      	beq.n	80012d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
 80012a0:	e021      	b.n	80012e6 <HAL_GPIO_Init+0x2e2>
 80012a2:	bf00      	nop
 80012a4:	10320000 	.word	0x10320000
 80012a8:	10310000 	.word	0x10310000
 80012ac:	10220000 	.word	0x10220000
 80012b0:	10210000 	.word	0x10210000
 80012b4:	10120000 	.word	0x10120000
 80012b8:	10110000 	.word	0x10110000
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	40011000 	.word	0x40011000
 80012d0:	40011400 	.word	0x40011400
 80012d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	43db      	mvns	r3, r3
 80012e0:	4909      	ldr	r1, [pc, #36]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	3301      	adds	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f47f ae8e 	bne.w	8001018 <HAL_GPIO_Init+0x14>
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	372c      	adds	r7, #44	; 0x2c
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	611a      	str	r2, [r3, #16]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	b08b      	sub	sp, #44	; 0x2c
 8001340:	af06      	add	r7, sp, #24
 8001342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0fd      	b.n	800154a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f007 fdd4 	bl	8008f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fcc3 	bl	8003d00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	687e      	ldr	r6, [r7, #4]
 8001382:	466d      	mov	r5, sp
 8001384:	f106 0410 	add.w	r4, r6, #16
 8001388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	602b      	str	r3, [r5, #0]
 8001390:	1d33      	adds	r3, r6, #4
 8001392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f002 fc8d 	bl	8003cb4 <USB_CoreInit>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0ce      	b.n	800154a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fcbe 	bl	8003d34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e04c      	b.n	8001458 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3301      	adds	r3, #1
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	b298      	uxth	r0, r3
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3336      	adds	r3, #54	; 0x36
 80013fc:	4602      	mov	r2, r0
 80013fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3303      	adds	r3, #3
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	3338      	adds	r3, #56	; 0x38
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	333c      	adds	r3, #60	; 0x3c
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	3340      	adds	r3, #64	; 0x40
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3301      	adds	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3ad      	bcc.n	80013be <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e044      	b.n	80014f2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	f203 1369 	addw	r3, r3, #361	; 0x169
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	3301      	adds	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d3b5      	bcc.n	8001468 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	687e      	ldr	r6, [r7, #4]
 8001504:	466d      	mov	r5, sp
 8001506:	f106 0410 	add.w	r4, r6, #16
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	1d33      	adds	r3, r6, #4
 8001514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001516:	6838      	ldr	r0, [r7, #0]
 8001518:	f002 fc18 	bl	8003d4c <USB_DevInit>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00d      	b.n	800154a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fe39 	bl	80061ba <USB_DevDisconnect>

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001552 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_PCD_Start+0x16>
 8001564:	2302      	movs	r3, #2
 8001566:	e016      	b.n	8001596 <HAL_PCD_Start+0x44>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f002 fbad 	bl	8003cd4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800157a:	2101      	movs	r1, #1
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f007 ff16 	bl	80093ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fe0d 	bl	80061a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b088      	sub	sp, #32
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 fe0f 	bl	80061ce <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ba:	d102      	bne.n	80015c2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fb48 	bl	8001c52 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fe01 	bl	80061ce <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d6:	d112      	bne.n	80015fe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f007 fd08 	bl	8009006 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015f6:	2100      	movs	r1, #0
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f923 	bl	8001844 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fde3 	bl	80061ce <USB_ReadInterrupts>
 8001608:	4603      	mov	r3, r0
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001612:	d10b      	bne.n	800162c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001626:	b292      	uxth	r2, r2
 8001628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f004 fdcc 	bl	80061ce <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001640:	d10b      	bne.n	800165a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fdb5 	bl	80061ce <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800166e:	d126      	bne.n	80016be <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001678:	b29a      	uxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	b292      	uxth	r2, r2
 8001684:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001690:	b29a      	uxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0208 	bic.w	r2, r2, #8
 800169a:	b292      	uxth	r2, r2
 800169c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f007 fce9 	bl	8009078 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016b8:	b292      	uxth	r2, r2
 80016ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fd83 	bl	80061ce <USB_ReadInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016d2:	f040 8082 	bne.w	80017da <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	e010      	b.n	80016fe <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	441a      	add	r2, r3
 80016e8:	7ffb      	ldrb	r3, [r7, #31]
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	b292      	uxth	r2, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	3320      	adds	r3, #32
 80016f2:	443b      	add	r3, r7
 80016f4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80016f8:	7ffb      	ldrb	r3, [r7, #31]
 80016fa:	3301      	adds	r3, #1
 80016fc:	77fb      	strb	r3, [r7, #31]
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b07      	cmp	r3, #7
 8001702:	d9eb      	bls.n	80016dc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	b292      	uxth	r2, r2
 8001718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	b292      	uxth	r2, r2
 8001730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001734:	bf00      	nop
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800173e:	b29b      	uxth	r3, r3
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f6      	beq.n	8001736 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	b292      	uxth	r2, r2
 800175c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	77fb      	strb	r3, [r7, #31]
 8001764:	e00f      	b.n	8001786 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4611      	mov	r1, r2
 800176e:	7ffa      	ldrb	r2, [r7, #31]
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	440a      	add	r2, r1
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	3320      	adds	r3, #32
 8001778:	443b      	add	r3, r7
 800177a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800177e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	3301      	adds	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b07      	cmp	r3, #7
 800178a:	d9ec      	bls.n	8001766 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0208 	orr.w	r2, r2, #8
 800179e:	b292      	uxth	r2, r2
 80017a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b6:	b292      	uxth	r2, r2
 80017b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0204 	orr.w	r2, r2, #4
 80017ce:	b292      	uxth	r2, r2
 80017d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f007 fc35 	bl	8009044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fcf5 	bl	80061ce <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ee:	d10e      	bne.n	800180e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001802:	b292      	uxth	r2, r2
 8001804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f007 fbee 	bl	8008fea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fcdb 	bl	80061ce <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001822:	d10b      	bne.n	800183c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001836:	b292      	uxth	r2, r2
 8001838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800183c:	bf00      	nop
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_PCD_SetAddress+0x1a>
 800185a:	2302      	movs	r3, #2
 800185c:	e013      	b.n	8001886 <HAL_PCD_SetAddress+0x42>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f004 fc82 	bl	8006180 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	4608      	mov	r0, r1
 8001898:	4611      	mov	r1, r2
 800189a:	461a      	mov	r2, r3
 800189c:	4603      	mov	r3, r0
 800189e:	70fb      	strb	r3, [r7, #3]
 80018a0:	460b      	mov	r3, r1
 80018a2:	803b      	strh	r3, [r7, #0]
 80018a4:	4613      	mov	r3, r2
 80018a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da0e      	bge.n	80018d2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2201      	movs	r2, #1
 80018ce:	705a      	strb	r2, [r3, #1]
 80018d0:	e00e      	b.n	80018f0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	f003 0207 	and.w	r2, r3, #7
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018fc:	883a      	ldrh	r2, [r7, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	78ba      	ldrb	r2, [r7, #2]
 8001906:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800191a:	78bb      	ldrb	r3, [r7, #2]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d102      	bne.n	8001926 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_PCD_EP_Open+0xa6>
 8001930:	2302      	movs	r3, #2
 8001932:	e00e      	b.n	8001952 <HAL_PCD_EP_Open+0xc4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fa22 	bl	8003d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001950:	7afb      	ldrb	r3, [r7, #11]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	da0e      	bge.n	800198c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	e00e      	b.n	80019aa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 0207 	and.w	r2, r3, #7
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_PCD_EP_Close+0x6a>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e00e      	b.n	80019e2 <HAL_PCD_EP_Close+0x88>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fd44 	bl	8004460 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	460b      	mov	r3, r1
 80019f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	f003 0207 	and.w	r2, r3, #7
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2200      	movs	r2, #0
 8001a28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a36:	7afb      	ldrb	r3, [r7, #11]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d106      	bne.n	8001a4e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6979      	ldr	r1, [r7, #20]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fef6 	bl	8004838 <USB_EPStartXfer>
 8001a4c:	e005      	b.n	8001a5a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6979      	ldr	r1, [r7, #20]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 feef 	bl	8004838 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	460b      	mov	r3, r1
 8001a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2201      	movs	r2, #1
 8001aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6979      	ldr	r1, [r7, #20]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 feb3 	bl	8004838 <USB_EPStartXfer>
 8001ad2:	e005      	b.n	8001ae0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 feac 	bl	8004838 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0207 	and.w	r2, r3, #7
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d901      	bls.n	8001b08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e04c      	b.n	8001ba2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da0e      	bge.n	8001b2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	705a      	strb	r2, [r3, #1]
 8001b2c:	e00c      	b.n	8001b48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_PCD_EP_SetStall+0x7e>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e01c      	b.n	8001ba2 <HAL_PCD_EP_SetStall+0xb8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fa05 	bl	8005f86 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f004 fb2a 	bl	80061ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 020f 	and.w	r2, r3, #15
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d901      	bls.n	8001bc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e040      	b.n	8001c4a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da0e      	bge.n	8001bee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	705a      	strb	r2, [r3, #1]
 8001bec:	e00e      	b.n	8001c0c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 0207 	and.w	r2, r3, #7
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_EP_ClrStall+0x82>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e00e      	b.n	8001c4a <HAL_PCD_EP_ClrStall+0xa0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68f9      	ldr	r1, [r7, #12]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f9f3 	bl	8006026 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b08e      	sub	sp, #56	; 0x38
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c5a:	e2df      	b.n	800221c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c64:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 8158 	bne.w	8001f2c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d152      	bne.n	8001d2c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c96:	81fb      	strh	r3, [r7, #14]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3328      	adds	r3, #40	; 0x28
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	441a      	add	r2, r3
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cea:	2100      	movs	r1, #0
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f007 f962 	bl	8008fb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 828e 	beq.w	800221c <PCD_EP_ISR_Handler+0x5ca>
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 8289 	bne.w	800221c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d2a:	e277      	b.n	800221c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d034      	beq.n	8001db0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	3306      	adds	r3, #6
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	f004 fa81 	bl	800628c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d96:	4013      	ands	r3, r2
 8001d98:	823b      	strh	r3, [r7, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	8a3a      	ldrh	r2, [r7, #16]
 8001da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da4:	b292      	uxth	r2, r2
 8001da6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f007 f8d7 	bl	8008f5c <HAL_PCD_SetupStageCallback>
 8001dae:	e235      	b.n	800221c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001db0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f280 8231 	bge.w	800221c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	83bb      	strh	r3, [r7, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	8bba      	ldrh	r2, [r7, #28]
 8001dd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	3306      	adds	r3, #6
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d019      	beq.n	8001e40 <PCD_EP_ISR_Handler+0x1ee>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d015      	beq.n	8001e40 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	6959      	ldr	r1, [r3, #20]
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f004 fa31 	bl	800628c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	695a      	ldr	r2, [r3, #20]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	441a      	add	r2, r3
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f007 f8a0 	bl	8008f80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4413      	add	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d112      	bne.n	8001e8e <PCD_EP_ISR_Handler+0x23c>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	801a      	strh	r2, [r3, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	801a      	strh	r2, [r3, #0]
 8001e8c:	e02f      	b.n	8001eee <PCD_EP_ISR_Handler+0x29c>
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b3e      	cmp	r3, #62	; 0x3e
 8001e94:	d813      	bhi.n	8001ebe <PCD_EP_ISR_Handler+0x26c>
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <PCD_EP_ISR_Handler+0x25e>
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eac:	3301      	adds	r3, #1
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	801a      	strh	r2, [r3, #0]
 8001ebc:	e017      	b.n	8001eee <PCD_EP_ISR_Handler+0x29c>
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <PCD_EP_ISR_Handler+0x286>
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	827b      	strh	r3, [r7, #18]
 8001f00:	8a7b      	ldrh	r3, [r7, #18]
 8001f02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f06:	827b      	strh	r3, [r7, #18]
 8001f08:	8a7b      	ldrh	r3, [r7, #18]
 8001f0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f0e:	827b      	strh	r3, [r7, #18]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	8a7b      	ldrh	r3, [r7, #18]
 8001f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	8013      	strh	r3, [r2, #0]
 8001f2a:	e177      	b.n	800221c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f3e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f280 80ea 	bge.w	800211c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f5e:	4013      	ands	r3, r2
 8001f60:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f76:	b292      	uxth	r2, r2
 8001f78:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f7a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d122      	bne.n	8001fde <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	3306      	adds	r3, #6
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8087 	beq.w	80020d8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	6959      	ldr	r1, [r3, #20]
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	88da      	ldrh	r2, [r3, #6]
 8001fd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fd8:	f004 f958 	bl	800628c <USB_ReadPMA>
 8001fdc:	e07c      	b.n	80020d8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	78db      	ldrb	r3, [r3, #3]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d108      	bne.n	8001ff8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f923 	bl	8002238 <HAL_PCD_EP_DB_Receive>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ff6:	e06f      	b.n	80020d8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800200e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002012:	847b      	strh	r3, [r7, #34]	; 0x22
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	441a      	add	r2, r3
 8002022:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800202c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002034:	b29b      	uxth	r3, r3
 8002036:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d021      	beq.n	8002096 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	3302      	adds	r3, #2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800207c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800207e:	2b00      	cmp	r3, #0
 8002080:	d02a      	beq.n	80020d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	6959      	ldr	r1, [r3, #20]
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	891a      	ldrh	r2, [r3, #8]
 800208e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002090:	f004 f8fc 	bl	800628c <USB_ReadPMA>
 8002094:	e020      	b.n	80020d8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	3306      	adds	r3, #6
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	6959      	ldr	r1, [r3, #20]
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	895a      	ldrh	r2, [r3, #10]
 80020d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020d4:	f004 f8da 	bl	800628c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020de:	441a      	add	r2, r3
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ea:	441a      	add	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <PCD_EP_ISR_Handler+0x4b0>
 80020f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d206      	bcs.n	8002110 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f006 ff39 	bl	8008f80 <HAL_PCD_DataOutStageCallback>
 800210e:	e005      	b.n	800211c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fb8e 	bl	8004838 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800211c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	2b00      	cmp	r3, #0
 8002124:	d07a      	beq.n	800221c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002126:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002154:	843b      	strh	r3, [r7, #32]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	8c3b      	ldrh	r3, [r7, #32]
 8002166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800216a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800216e:	b29b      	uxth	r3, r3
 8002170:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	78db      	ldrb	r3, [r3, #3]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d108      	bne.n	800218c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800217e:	2b02      	cmp	r3, #2
 8002180:	d146      	bne.n	8002210 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002182:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d141      	bne.n	8002210 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002194:	b29b      	uxth	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	3302      	adds	r3, #2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	8bfb      	ldrh	r3, [r7, #30]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d906      	bls.n	80021ce <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	8bfb      	ldrh	r3, [r7, #30]
 80021c6:	1ad2      	subs	r2, r2, r3
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	619a      	str	r2, [r3, #24]
 80021cc:	e002      	b.n	80021d4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d106      	bne.n	80021ea <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f006 fee7 	bl	8008fb6 <HAL_PCD_DataInStageCallback>
 80021e8:	e018      	b.n	800221c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	8bfb      	ldrh	r3, [r7, #30]
 80021f0:	441a      	add	r2, r3
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	8bfb      	ldrh	r3, [r7, #30]
 80021fc:	441a      	add	r2, r3
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002208:	4618      	mov	r0, r3
 800220a:	f002 fb15 	bl	8004838 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800220e:	e005      	b.n	800221c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002212:	461a      	mov	r2, r3
 8002214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f91b 	bl	8002452 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002224:	b29b      	uxth	r3, r3
 8002226:	b21b      	sxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	f6ff ad17 	blt.w	8001c5c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3738      	adds	r7, #56	; 0x38
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d07e      	beq.n	800234e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002258:	b29b      	uxth	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	3302      	adds	r3, #2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002278:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	8b7b      	ldrh	r3, [r7, #26]
 8002280:	429a      	cmp	r2, r3
 8002282:	d306      	bcc.n	8002292 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	8b7b      	ldrh	r3, [r7, #26]
 800228a:	1ad2      	subs	r2, r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	619a      	str	r2, [r3, #24]
 8002290:	e002      	b.n	8002298 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d123      	bne.n	80022e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ba:	833b      	strh	r3, [r7, #24]
 80022bc:	8b3b      	ldrh	r3, [r7, #24]
 80022be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022c2:	833b      	strh	r3, [r7, #24]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	8b3b      	ldrh	r3, [r7, #24]
 80022d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01f      	beq.n	8002332 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230c:	82fb      	strh	r3, [r7, #22]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	441a      	add	r2, r3
 800231c:	8afb      	ldrh	r3, [r7, #22]
 800231e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800232e:	b29b      	uxth	r3, r3
 8002330:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002332:	8b7b      	ldrh	r3, [r7, #26]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8087 	beq.w	8002448 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	6959      	ldr	r1, [r3, #20]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	891a      	ldrh	r2, [r3, #8]
 8002346:	8b7b      	ldrh	r3, [r7, #26]
 8002348:	f003 ffa0 	bl	800628c <USB_ReadPMA>
 800234c:	e07c      	b.n	8002448 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002356:	b29b      	uxth	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	3306      	adds	r3, #6
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002376:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	8b7b      	ldrh	r3, [r7, #26]
 800237e:	429a      	cmp	r2, r3
 8002380:	d306      	bcc.n	8002390 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	1ad2      	subs	r2, r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	619a      	str	r2, [r3, #24]
 800238e:	e002      	b.n	8002396 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d123      	bne.n	80023e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	83fb      	strh	r3, [r7, #30]
 80023ba:	8bfb      	ldrh	r3, [r7, #30]
 80023bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023c0:	83fb      	strh	r3, [r7, #30]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	441a      	add	r2, r3
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11f      	bne.n	8002430 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	83bb      	strh	r3, [r7, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	8bbb      	ldrh	r3, [r7, #28]
 800241c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002428:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800242c:	b29b      	uxth	r3, r3
 800242e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002430:	8b7b      	ldrh	r3, [r7, #26]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	6959      	ldr	r1, [r3, #20]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	895a      	ldrh	r2, [r3, #10]
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	f003 ff22 	bl	800628c <USB_ReadPMA>
    }
  }

  return count;
 8002448:	8b7b      	ldrh	r3, [r7, #26]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b094      	sub	sp, #80	; 0x50
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	4613      	mov	r3, r2
 800245e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8138 	beq.w	80026dc <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	3302      	adds	r3, #2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002494:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d907      	bls.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024ac:	1ad2      	subs	r2, r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	e002      	b.n	80024ba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d12c      	bne.n	800251c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f006 fd74 	bl	8008fb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 823a 	beq.w	800294e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f4:	82fb      	strh	r3, [r7, #22]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	441a      	add	r2, r3
 8002504:	8afb      	ldrh	r3, [r7, #22]
 8002506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800250a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002516:	b29b      	uxth	r3, r3
 8002518:	8013      	strh	r3, [r2, #0]
 800251a:	e218      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01f      	beq.n	8002566 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002540:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	2b01      	cmp	r3, #1
 800256e:	f040 81ee 	bne.w	800294e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800257a:	441a      	add	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002588:	441a      	add	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6a1a      	ldr	r2, [r3, #32]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d309      	bcc.n	80025ae <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a6:	1ad2      	subs	r2, r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	621a      	str	r2, [r3, #32]
 80025ac:	e015      	b.n	80025da <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80025b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025c4:	e009      	b.n	80025da <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d155      	bne.n	800268e <HAL_PCD_EP_DB_Transmit+0x23c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	011a      	lsls	r2, r3, #4
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4413      	add	r3, r2
 8002604:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	2b00      	cmp	r3, #0
 800260e:	d112      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800261a:	b29a      	uxth	r2, r3
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262e:	b29a      	uxth	r2, r3
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	e047      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x274>
 8002636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002638:	2b3e      	cmp	r3, #62	; 0x3e
 800263a:	d811      	bhi.n	8002660 <HAL_PCD_EP_DB_Transmit+0x20e>
 800263c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263e:	085b      	lsrs	r3, r3, #1
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_PCD_EP_DB_Transmit+0x200>
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	3301      	adds	r3, #1
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	b29b      	uxth	r3, r3
 8002656:	029b      	lsls	r3, r3, #10
 8002658:	b29a      	uxth	r2, r3
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	e032      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x274>
 8002660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <HAL_PCD_EP_DB_Transmit+0x224>
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	3b01      	subs	r3, #1
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	b29b      	uxth	r3, r3
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	b29b      	uxth	r3, r3
 800267e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002686:	b29a      	uxth	r2, r3
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	801a      	strh	r2, [r3, #0]
 800268c:	e01b      	b.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x274>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	785b      	ldrb	r3, [r3, #1]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d117      	bne.n	80026c6 <HAL_PCD_EP_DB_Transmit+0x274>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	4413      	add	r3, r2
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	011a      	lsls	r2, r3, #4
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	4413      	add	r3, r2
 80026b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	6959      	ldr	r1, [r3, #20]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	891a      	ldrh	r2, [r3, #8]
 80026d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f003 fd94 	bl	8006202 <USB_WritePMA>
 80026da:	e138      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	3306      	adds	r3, #6
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002704:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002710:	429a      	cmp	r2, r3
 8002712:	d307      	bcc.n	8002724 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	619a      	str	r2, [r3, #24]
 8002722:	e002      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12e      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f006 fc3c 	bl	8008fb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 8102 	bne.w	800294e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800277a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278a:	b29b      	uxth	r3, r3
 800278c:	8013      	strh	r3, [r2, #0]
 800278e:	e0de      	b.n	800294e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11f      	bne.n	80027da <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b4:	867b      	strh	r3, [r7, #50]	; 0x32
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80027c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	f040 80b4 	bne.w	800294e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027ee:	441a      	add	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027fc:	441a      	add	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	6a1a      	ldr	r2, [r3, #32]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	d309      	bcc.n	8002822 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281a:	1ad2      	subs	r2, r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	621a      	str	r2, [r3, #32]
 8002820:	e015      	b.n	800284e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800282a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002838:	e009      	b.n	800284e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	785b      	ldrb	r3, [r3, #1]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d155      	bne.n	8002908 <HAL_PCD_EP_DB_Transmit+0x4b6>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	63bb      	str	r3, [r7, #56]	; 0x38
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286a:	b29b      	uxth	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	4413      	add	r3, r2
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	011a      	lsls	r2, r3, #4
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	4413      	add	r3, r2
 800287e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
 8002884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002886:	2b00      	cmp	r3, #0
 8002888:	d112      	bne.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x45e>
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002894:	b29a      	uxth	r2, r3
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	e044      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80028b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b2:	2b3e      	cmp	r3, #62	; 0x3e
 80028b4:	d811      	bhi.n	80028da <HAL_PCD_EP_DB_Transmit+0x488>
 80028b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_PCD_EP_DB_Transmit+0x47a>
 80028c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c8:	3301      	adds	r3, #1
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	e02f      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80028da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_PCD_EP_DB_Transmit+0x49e>
 80028ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ec:	3b01      	subs	r3, #1
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	029b      	lsls	r3, r3, #10
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002900:	b29a      	uxth	r2, r3
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	e018      	b.n	800293a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d114      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002918:	b29b      	uxth	r3, r3
 800291a:	461a      	mov	r2, r3
 800291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291e:	4413      	add	r3, r2
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	011a      	lsls	r2, r3, #4
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	4413      	add	r3, r2
 800292c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002934:	b29a      	uxth	r2, r3
 8002936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002938:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	6959      	ldr	r1, [r3, #20]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	895a      	ldrh	r2, [r3, #10]
 8002946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002948:	b29b      	uxth	r3, r3
 800294a:	f003 fc5a 	bl	8006202 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002968:	82bb      	strh	r3, [r7, #20]
 800296a:	8abb      	ldrh	r3, [r7, #20]
 800296c:	f083 0310 	eor.w	r3, r3, #16
 8002970:	82bb      	strh	r3, [r7, #20]
 8002972:	8abb      	ldrh	r3, [r7, #20]
 8002974:	f083 0320 	eor.w	r3, r3, #32
 8002978:	82bb      	strh	r3, [r7, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	441a      	add	r2, r3
 8002988:	8abb      	ldrh	r3, [r7, #20]
 800298a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299a:	b29b      	uxth	r3, r3
 800299c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3750      	adds	r7, #80	; 0x50
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	817b      	strh	r3, [r7, #10]
 80029b6:	4613      	mov	r3, r2
 80029b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	897b      	ldrh	r3, [r7, #10]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e009      	b.n	80029f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029de:	897a      	ldrh	r2, [r7, #10]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2200      	movs	r2, #0
 80029fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	80da      	strh	r2, [r3, #6]
 8002a06:	e00b      	b.n	8002a20 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e272      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8087 	beq.w	8002b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a58:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d112      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
 8002a64:	4b8c      	ldr	r3, [pc, #560]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x12c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d168      	bne.n	8002b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e24c      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x76>
 8002a94:	4b80      	ldr	r3, [pc, #512]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a7f      	ldr	r2, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e02e      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7a      	ldr	r2, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b78      	ldr	r3, [pc, #480]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xbc>
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a67      	ldr	r2, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fd fedc 	bl	80008c4 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fd fed8 	bl	80008c4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e200      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe4>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fd fec8 	bl	80008c4 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fd fec4 	bl	80008c4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1ec      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x10c>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
 8002b7e:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c0      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4939      	ldr	r1, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fd fe7d 	bl	80008c4 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fd fe79 	bl	80008c4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a1      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4927      	ldr	r1, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fd fe5c 	bl	80008c4 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fd fe58 	bl	80008c4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e180      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03a      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fd fe3c 	bl	80008c4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fd fe38 	bl	80008c4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e160      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f000 fad8 	bl	8003224 <RCC_Delay>
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fd fe22 	bl	80008c4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fd fe1e 	bl	80008c4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d908      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e146      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	42420000 	.word	0x42420000
 8002ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e9      	bne.n	8002c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80a6 	beq.w	8002e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a87      	ldr	r2, [pc, #540]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b82      	ldr	r3, [pc, #520]	; (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	; (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7e      	ldr	r2, [pc, #504]	; (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fddf 	bl	80008c4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fd fddb 	bl	80008c4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	; 0x64
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e103      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b75      	ldr	r3, [pc, #468]	; (8002ef4 <HAL_RCC_OscConfig+0x4c8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x312>
 8002d30:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a66      	ldr	r2, [pc, #408]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x356>
 8002d68:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a60      	ldr	r2, [pc, #384]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a5d      	ldr	r2, [pc, #372]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a5a      	ldr	r2, [pc, #360]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fd fd8f 	bl	80008c4 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fd fd8b 	bl	80008c4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0b1      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b4b      	ldr	r3, [pc, #300]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCC_OscConfig+0x37e>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fd fd79 	bl	80008c4 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fd75 	bl	80008c4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e09b      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8087 	beq.w	8002f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e14:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d061      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d146      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fd fd49 	bl	80008c4 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fd fd45 	bl	80008c4 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e06d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4921      	ldr	r1, [pc, #132]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e70:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a19      	ldr	r1, [r3, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	430b      	orrs	r3, r1
 8002e82:	491b      	ldr	r1, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fd fd19 	bl	80008c4 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fd fd15 	bl	80008c4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e03d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46a>
 8002eb4:	e035      	b.n	8002f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fd02 	bl	80008c4 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fd fcfe 	bl	80008c4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e026      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x498>
 8002ee2:	e01e      	b.n	8002f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e019      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_OscConfig+0x500>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d0      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d910      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	4965      	ldr	r1, [pc, #404]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b8      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb0:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	494d      	ldr	r1, [pc, #308]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d040      	beq.n	8003050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d115      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e073      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06b      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4936      	ldr	r1, [pc, #216]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003020:	f7fd fc50 	bl	80008c4 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7fd fc4c 	bl	80008c4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e053      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d210      	bcs.n	8003080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	4922      	ldr	r1, [pc, #136]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e032      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4916      	ldr	r1, [pc, #88]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030be:	f000 f821 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	490a      	ldr	r1, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	5ccb      	ldrb	r3, [r1, r3]
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1cc>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1d0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fbae 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
 80030f8:	0800a238 	.word	0x0800a238
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004

08003104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b490      	push	{r4, r7}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800310c:	1d3c      	adds	r4, r7, #4
 800310e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003114:	f240 2301 	movw	r3, #513	; 0x201
 8003118:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x40>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x46>
 8003142:	e02b      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003146:	623b      	str	r3, [r7, #32]
      break;
 8003148:	e02b      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3328      	adds	r3, #40	; 0x28
 8003154:	443b      	add	r3, r7
 8003156:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800315a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d012      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0c5b      	lsrs	r3, r3, #17
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	3328      	adds	r3, #40	; 0x28
 8003172:	443b      	add	r3, r7
 8003174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003178:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800317e:	fb03 f202 	mul.w	r2, r3, r2
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
 800318a:	e004      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	623b      	str	r3, [r7, #32]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800319e:	623b      	str	r3, [r7, #32]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc90      	pop	{r4, r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	0800a1cc 	.word	0x0800a1cc
 80031b4:	40021000 	.word	0x40021000
 80031b8:	007a1200 	.word	0x007a1200
 80031bc:	003d0900 	.word	0x003d0900

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	20000000 	.word	0x20000000

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d8:	f7ff fff2 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	0800a248 	.word	0x0800a248

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003200:	f7ff ffde 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	0adb      	lsrs	r3, r3, #11
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	0800a248 	.word	0x0800a248

08003224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <RCC_Delay+0x34>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <RCC_Delay+0x38>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0a5b      	lsrs	r3, r3, #9
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003240:	bf00      	nop
  }
  while (Delay --);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	60fa      	str	r2, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f9      	bne.n	8003240 <RCC_Delay+0x1c>
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	20000000 	.word	0x20000000
 800325c:	10624dd3 	.word	0x10624dd3

08003260 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d07d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003296:	61d3      	str	r3, [r2, #28]
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d118      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b4:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a42      	ldr	r2, [pc, #264]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c0:	f7fd fb00 	bl	80008c4 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	e008      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fafc 	bl	80008c4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e06d      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02e      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d027      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800331a:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d014      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fd facb 	bl	80008c4 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	e00a      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fd fac7 	bl	80008c4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e036      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ee      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4917      	ldr	r1, [pc, #92]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	4313      	orrs	r3, r2
 8003364:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	490b      	ldr	r1, [pc, #44]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42420440 	.word	0x42420440

080033cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e03f      	b.n	800345e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd f88e 	bl	8000514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2224      	movs	r2, #36	; 0x24
 80033fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fbc1 	bl	8003b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b20      	cmp	r3, #32
 800347e:	d130      	bne.n	80034e2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Transmit_IT+0x26>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e029      	b.n	80034e4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_UART_Transmit_IT+0x38>
 800349a:	2302      	movs	r3, #2
 800349c:	e022      	b.n	80034e4 <HAL_UART_Transmit_IT+0x7e>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2221      	movs	r2, #33	; 0x21
 80034c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	d166      	bne.n	80035d8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_UART_Receive_DMA+0x26>
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e05f      	b.n	80035da <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_UART_Receive_DMA+0x38>
 8003524:	2302      	movs	r3, #2
 8003526:	e058      	b.n	80035da <HAL_UART_Receive_DMA+0xea>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2222      	movs	r2, #34	; 0x22
 8003546:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <HAL_UART_Receive_DMA+0xf4>)
 8003550:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	4a24      	ldr	r2, [pc, #144]	; (80035e8 <HAL_UART_Receive_DMA+0xf8>)
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	4a23      	ldr	r2, [pc, #140]	; (80035ec <HAL_UART_Receive_DMA+0xfc>)
 8003560:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	2200      	movs	r2, #0
 8003568:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800356a:	f107 0308 	add.w	r3, r7, #8
 800356e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3304      	adds	r3, #4
 800357a:	4619      	mov	r1, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	f7fd fb35 	bl	8000bf0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035d2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e000      	b.n	80035da <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	08003827 	.word	0x08003827
 80035e8:	0800388f 	.word	0x0800388f
 80035ec:	080038ab 	.word	0x080038ab

080035f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa2c 	bl	8003a98 <UART_Receive_IT>
      return;
 8003640:	e0d0      	b.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80b0 	beq.w	80037aa <HAL_UART_IRQHandler+0x1ba>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_UART_IRQHandler+0x70>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80a5 	beq.w	80037aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	f043 0202 	orr.w	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00f      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_UART_IRQHandler+0xee>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d077      	beq.n	80037e2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <HAL_UART_IRQHandler+0x11c>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f9c6 	bl	8003a98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_UART_IRQHandler+0x144>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d031      	beq.n	8003798 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f917 	bl	8003968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d023      	beq.n	8003790 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003756:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_UART_IRQHandler+0x1fc>)
 8003766:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fa9f 	bl	8000cb0 <HAL_DMA_Abort_IT>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003782:	4610      	mov	r0, r2
 8003784:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003786:	e00e      	b.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f843 	bl	8003814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378e:	e00a      	b.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f83f 	bl	8003814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003796:	e006      	b.n	80037a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f83b 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037a4:	e01d      	b.n	80037e2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a6:	bf00      	nop
    return;
 80037a8:	e01b      	b.n	80037e2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_UART_IRQHandler+0x1d6>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f903 	bl	80039ca <UART_Transmit_IT>
    return;
 80037c4:	e00e      	b.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d009      	beq.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f944 	bl	8003a68 <UART_EndTransmit_IT>
    return;
 80037e0:	e000      	b.n	80037e4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80037e2:	bf00      	nop
  }
}
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	080039a3 	.word	0x080039a3

080037f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11e      	bne.n	8003880 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003856:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003876:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7fc fc6b 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff ffb0 	bl	8003802 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b21      	cmp	r3, #33	; 0x21
 80038dc:	d108      	bne.n	80038f0 <UART_DMAError+0x46>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2200      	movs	r2, #0
 80038e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80038ea:	68b8      	ldr	r0, [r7, #8]
 80038ec:	f000 f827 	bl	800393e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf14      	ite	ne
 80038fe:	2301      	movne	r3, #1
 8003900:	2300      	moveq	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b22      	cmp	r3, #34	; 0x22
 8003910:	d108      	bne.n	8003924 <UART_DMAError+0x7a>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800391e:	68b8      	ldr	r0, [r7, #8]
 8003920:	f000 f822 	bl	8003968 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	f043 0210 	orr.w	r2, r3, #16
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003930:	68b8      	ldr	r0, [r7, #8]
 8003932:	f7ff ff6f 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003954:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800397e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff ff29 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b21      	cmp	r3, #33	; 0x21
 80039dc:	d13e      	bne.n	8003a5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e6:	d114      	bne.n	8003a12 <UART_Transmit_IT+0x48>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d110      	bne.n	8003a12 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	1c9a      	adds	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	621a      	str	r2, [r3, #32]
 8003a10:	e008      	b.n	8003a24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6211      	str	r1, [r2, #32]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4619      	mov	r1, r3
 8003a32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10f      	bne.n	8003a58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff feb1 	bl	80037f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b22      	cmp	r3, #34	; 0x22
 8003aaa:	d170      	bne.n	8003b8e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab4:	d117      	bne.n	8003ae6 <UART_Receive_IT+0x4e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	1c9a      	adds	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae4:	e026      	b.n	8003b34 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d007      	beq.n	8003b0a <UART_Receive_IT+0x72>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <UART_Receive_IT+0x80>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	701a      	strb	r2, [r3, #0]
 8003b16:	e008      	b.n	8003b2a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4619      	mov	r1, r3
 8003b42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d120      	bne.n	8003b8a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0220 	bic.w	r2, r2, #32
 8003b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fc faeb 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e002      	b.n	8003b90 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bd2:	f023 030c 	bic.w	r3, r3, #12
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <UART_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c00:	f7ff fafc 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	e002      	b.n	8003c0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7ff fae4 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	0119      	lsls	r1, r3, #4
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c46:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2064      	movs	r0, #100	; 0x64
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	3332      	adds	r3, #50	; 0x32
 8003c58:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	4419      	add	r1, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009a      	lsls	r2, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2064      	movs	r0, #100	; 0x64
 8003c86:	fb00 f303 	mul.w	r3, r0, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	3332      	adds	r3, #50	; 0x32
 8003c90:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	51eb851f 	.word	0x51eb851f

08003cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	f107 0014 	add.w	r0, r7, #20
 8003cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	b004      	add	sp, #16
 8003cd2:	4770      	bx	lr

08003cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ce4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ce8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	f107 0014 	add.w	r0, r7, #20
 8003d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	b004      	add	sp, #16
 8003d8a:	4770      	bx	lr

08003d8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b09b      	sub	sp, #108	; 0x6c
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	78db      	ldrb	r3, [r3, #3]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d81f      	bhi.n	8003dfe <USB_ActivateEndpoint+0x72>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <USB_ActivateEndpoint+0x38>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003df1 	.word	0x08003df1
 8003dcc:	08003e07 	.word	0x08003e07
 8003dd0:	08003de3 	.word	0x08003de3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003dd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ddc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003de0:	e012      	b.n	8003e08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003de2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003de6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003dea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dee:	e00b      	b.n	8003e08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003df0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003df4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dfc:	e004      	b.n	8003e08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003e04:	e000      	b.n	8003e08 <USB_ActivateEndpoint+0x7c>
      break;
 8003e06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	441a      	add	r2, r3
 8003e12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	7b1b      	ldrb	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f040 8149 	bne.w	800410c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8084 	beq.w	8003f8c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4413      	add	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	011a      	lsls	r2, r3, #4
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	88db      	ldrh	r3, [r3, #6]
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	81fb      	strh	r3, [r7, #14]
 8003ec6:	89fb      	ldrh	r3, [r7, #14]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01b      	beq.n	8003f08 <USB_ActivateEndpoint+0x17c>
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	81bb      	strh	r3, [r7, #12]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	89bb      	ldrh	r3, [r7, #12]
 8003ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	78db      	ldrb	r3, [r3, #3]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d020      	beq.n	8003f52 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f26:	813b      	strh	r3, [r7, #8]
 8003f28:	893b      	ldrh	r3, [r7, #8]
 8003f2a:	f083 0320 	eor.w	r3, r3, #32
 8003f2e:	813b      	strh	r3, [r7, #8]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	893b      	ldrh	r3, [r7, #8]
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
 8003f50:	e27f      	b.n	8004452 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f68:	817b      	strh	r3, [r7, #10]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	897b      	ldrh	r3, [r7, #10]
 8003f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]
 8003f8a:	e262      	b.n	8004452 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	4413      	add	r3, r2
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	011a      	lsls	r2, r3, #4
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	88db      	ldrh	r3, [r3, #6]
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	4413      	add	r3, r2
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	4413      	add	r3, r2
 8003fde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d112      	bne.n	8004012 <USB_ActivateEndpoint+0x286>
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	801a      	strh	r2, [r3, #0]
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800400a:	b29a      	uxth	r2, r3
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	e02f      	b.n	8004072 <USB_ActivateEndpoint+0x2e6>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b3e      	cmp	r3, #62	; 0x3e
 8004018:	d813      	bhi.n	8004042 <USB_ActivateEndpoint+0x2b6>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	663b      	str	r3, [r7, #96]	; 0x60
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <USB_ActivateEndpoint+0x2a8>
 800402e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004030:	3301      	adds	r3, #1
 8004032:	663b      	str	r3, [r7, #96]	; 0x60
 8004034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004036:	b29b      	uxth	r3, r3
 8004038:	029b      	lsls	r3, r3, #10
 800403a:	b29a      	uxth	r2, r3
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e017      	b.n	8004072 <USB_ActivateEndpoint+0x2e6>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	663b      	str	r3, [r7, #96]	; 0x60
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <USB_ActivateEndpoint+0x2d0>
 8004056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004058:	3b01      	subs	r3, #1
 800405a:	663b      	str	r3, [r7, #96]	; 0x60
 800405c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405e:	b29b      	uxth	r3, r3
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	b29b      	uxth	r3, r3
 8004064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406c:	b29a      	uxth	r2, r3
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	83fb      	strh	r3, [r7, #30]
 8004080:	8bfb      	ldrh	r3, [r7, #30]
 8004082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01b      	beq.n	80040c2 <USB_ActivateEndpoint+0x336>
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	83bb      	strh	r3, [r7, #28]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	441a      	add	r2, r3
 80040ac:	8bbb      	ldrh	r3, [r7, #28]
 80040ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040be:	b29b      	uxth	r3, r3
 80040c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d8:	837b      	strh	r3, [r7, #26]
 80040da:	8b7b      	ldrh	r3, [r7, #26]
 80040dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040e0:	837b      	strh	r3, [r7, #26]
 80040e2:	8b7b      	ldrh	r3, [r7, #26]
 80040e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040e8:	837b      	strh	r3, [r7, #26]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	8b7b      	ldrh	r3, [r7, #26]
 80040f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004106:	b29b      	uxth	r3, r3
 8004108:	8013      	strh	r3, [r2, #0]
 800410a:	e1a2      	b.n	8004452 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	65bb      	str	r3, [r7, #88]	; 0x58
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004158:	4413      	add	r3, r2
 800415a:	65bb      	str	r3, [r7, #88]	; 0x58
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	011a      	lsls	r2, r3, #4
 8004162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004164:	4413      	add	r3, r2
 8004166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800416a:	657b      	str	r3, [r7, #84]	; 0x54
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	891b      	ldrh	r3, [r3, #8]
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	b29b      	uxth	r3, r3
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	653b      	str	r3, [r7, #80]	; 0x50
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418c:	4413      	add	r3, r2
 800418e:	653b      	str	r3, [r7, #80]	; 0x50
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	011a      	lsls	r2, r3, #4
 8004196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004198:	4413      	add	r3, r2
 800419a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800419e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	895b      	ldrh	r3, [r3, #10]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 8091 	bne.w	80042dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80041c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80041ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01b      	beq.n	800420a <USB_ActivateEndpoint+0x47e>
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	441a      	add	r2, r3
 80041f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	873b      	strh	r3, [r7, #56]	; 0x38
 8004218:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01b      	beq.n	800425a <USB_ActivateEndpoint+0x4ce>
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	86fb      	strh	r3, [r7, #54]	; 0x36
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004252:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004256:	b29b      	uxth	r3, r3
 8004258:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004270:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004272:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004274:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004278:	86bb      	strh	r3, [r7, #52]	; 0x34
 800427a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800427c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004280:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800428e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]
 80042da:	e0ba      	b.n	8004452 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01d      	beq.n	8004334 <USB_ActivateEndpoint+0x5a8>
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	441a      	add	r2, r3
 800431c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800432c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004330:	b29b      	uxth	r3, r3
 8004332:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004344:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01d      	beq.n	800438c <USB_ActivateEndpoint+0x600>
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004388:	b29b      	uxth	r3, r3
 800438a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	78db      	ldrb	r3, [r3, #3]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d024      	beq.n	80043de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043b2:	f083 0320 	eor.w	r3, r3, #32
 80043b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d8:	b29b      	uxth	r3, r3
 80043da:	8013      	strh	r3, [r2, #0]
 80043dc:	e01d      	b.n	800441a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004416:	b29b      	uxth	r3, r3
 8004418:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004452:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004456:	4618      	mov	r0, r3
 8004458:	376c      	adds	r7, #108	; 0x6c
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004460:	b480      	push	{r7}
 8004462:	b08d      	sub	sp, #52	; 0x34
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	7b1b      	ldrb	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 808e 	bne.w	8004590 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d044      	beq.n	8004506 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	81bb      	strh	r3, [r7, #12]
 800448a:	89bb      	ldrh	r3, [r7, #12]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01b      	beq.n	80044cc <USB_DeactivateEndpoint+0x6c>
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	817b      	strh	r3, [r7, #10]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e2:	813b      	strh	r3, [r7, #8]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	893b      	ldrh	r3, [r7, #8]
 80044f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]
 8004504:	e192      	b.n	800482c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	827b      	strh	r3, [r7, #18]
 8004514:	8a7b      	ldrh	r3, [r7, #18]
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01b      	beq.n	8004556 <USB_DeactivateEndpoint+0xf6>
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	823b      	strh	r3, [r7, #16]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	8a3b      	ldrh	r3, [r7, #16]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	81fb      	strh	r3, [r7, #14]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	441a      	add	r2, r3
 8004578:	89fb      	ldrh	r3, [r7, #14]
 800457a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	b29b      	uxth	r3, r3
 800458c:	8013      	strh	r3, [r2, #0]
 800458e:	e14d      	b.n	800482c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 80a5 	bne.w	80046e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	843b      	strh	r3, [r7, #32]
 80045a8:	8c3b      	ldrh	r3, [r7, #32]
 80045aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01b      	beq.n	80045ea <USB_DeactivateEndpoint+0x18a>
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c8:	83fb      	strh	r3, [r7, #30]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	8bfb      	ldrh	r3, [r7, #30]
 80045d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	83bb      	strh	r3, [r7, #28]
 80045f8:	8bbb      	ldrh	r3, [r7, #28]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01b      	beq.n	800463a <USB_DeactivateEndpoint+0x1da>
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004618:	837b      	strh	r3, [r7, #26]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	441a      	add	r2, r3
 8004624:	8b7b      	ldrh	r3, [r7, #26]
 8004626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004632:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004636:	b29b      	uxth	r3, r3
 8004638:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	833b      	strh	r3, [r7, #24]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	8b3b      	ldrh	r3, [r7, #24]
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	82fb      	strh	r3, [r7, #22]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	8afb      	ldrh	r3, [r7, #22]
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c0:	82bb      	strh	r3, [r7, #20]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	8abb      	ldrh	r3, [r7, #20]
 80046ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8013      	strh	r3, [r2, #0]
 80046e2:	e0a3      	b.n	800482c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <USB_DeactivateEndpoint+0x2d4>
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004742:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01b      	beq.n	8004784 <USB_DeactivateEndpoint+0x324>
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	853b      	strh	r3, [r7, #40]	; 0x28
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	847b      	strh	r3, [r7, #34]	; 0x22
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004828:	b29b      	uxth	r3, r3
 800482a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3734      	adds	r7, #52	; 0x34
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b0c4      	sub	sp, #272	; 0x110
 800483c:	af00      	add	r7, sp, #0
 800483e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004842:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004846:	6018      	str	r0, [r3, #0]
 8004848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800484c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004850:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004856:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	2b01      	cmp	r3, #1
 8004860:	f040 86ec 	bne.w	800563c <USB_EPStartXfer+0xe04>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004868:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004874:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	429a      	cmp	r2, r3
 800487e:	d908      	bls.n	8004892 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004884:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004890:	e007      	b.n	80048a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004896:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80048a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	7b1b      	ldrb	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d142      	bne.n	8004938 <USB_EPStartXfer+0x100>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80048b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6959      	ldr	r1, [r3, #20]
 80048be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	88da      	ldrh	r2, [r3, #6]
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80048d4:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80048d8:	6800      	ldr	r0, [r0, #0]
 80048da:	f001 fc92 	bl	8006202 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4413      	add	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004906:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	011a      	lsls	r2, r3, #4
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800491c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004926:	b29a      	uxth	r2, r3
 8004928:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800492c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	f000 be34 	b.w	80055a0 <USB_EPStartXfer+0xd68>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800493c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	78db      	ldrb	r3, [r3, #3]
 8004944:	2b02      	cmp	r3, #2
 8004946:	f040 843b 	bne.w	80051c0 <USB_EPStartXfer+0x988>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800494a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800494e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6a1a      	ldr	r2, [r3, #32]
 8004956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800495a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	f240 83b8 	bls.w	80050d8 <USB_EPStartXfer+0x8a0>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800496c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004976:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004996:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80049b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80049c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d4:	1ad2      	subs	r2, r2, r3
 80049d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049da:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 81b4 	beq.w	8004d72 <USB_EPStartXfer+0x53a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
 8004a16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d16d      	bne.n	8004b02 <USB_EPStartXfer+0x2ca>
 8004a26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	4413      	add	r3, r2
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	011a      	lsls	r2, r3, #4
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d112      	bne.n	8004a90 <USB_EPStartXfer+0x258>
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	e05d      	b.n	8004b4c <USB_EPStartXfer+0x314>
 8004a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a94:	2b3e      	cmp	r3, #62	; 0x3e
 8004a96:	d817      	bhi.n	8004ac8 <USB_EPStartXfer+0x290>
 8004a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <USB_EPStartXfer+0x280>
 8004aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	029b      	lsls	r3, r3, #10
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	e041      	b.n	8004b4c <USB_EPStartXfer+0x314>
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <USB_EPStartXfer+0x2b0>
 8004ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	029b      	lsls	r3, r3, #10
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	e024      	b.n	8004b4c <USB_EPStartXfer+0x314>
 8004b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d11c      	bne.n	8004b4c <USB_EPStartXfer+0x314>
 8004b12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	4413      	add	r3, r2
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	011a      	lsls	r2, r3, #4
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30
 8004b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	895b      	ldrh	r3, [r3, #10]
 8004b58:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6959      	ldr	r1, [r3, #20]
 8004b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b72:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004b76:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	f001 fb41 	bl	8006202 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b90:	441a      	add	r2, r3
 8004b92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ba2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d90f      	bls.n	8004bda <USB_EPStartXfer+0x3a2>
            {
              ep->xfer_len_db -= len;
 8004bba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bbe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bca:	1ad2      	subs	r2, r2, r3
 8004bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	621a      	str	r2, [r3, #32]
 8004bd8:	e00e      	b.n	8004bf8 <USB_EPStartXfer+0x3c0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004bea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d16d      	bne.n	8004ce4 <USB_EPStartXfer+0x4ac>
 8004c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	011a      	lsls	r2, r3, #4
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d112      	bne.n	8004c72 <USB_EPStartXfer+0x43a>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e063      	b.n	8004d3a <USB_EPStartXfer+0x502>
 8004c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c76:	2b3e      	cmp	r3, #62	; 0x3e
 8004c78:	d817      	bhi.n	8004caa <USB_EPStartXfer+0x472>
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <USB_EPStartXfer+0x462>
 8004c90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c94:	3301      	adds	r3, #1
 8004c96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	e047      	b.n	8004d3a <USB_EPStartXfer+0x502>
 8004caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <USB_EPStartXfer+0x492>
 8004cc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	e02a      	b.n	8004d3a <USB_EPStartXfer+0x502>
 8004ce4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ce8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d122      	bne.n	8004d3a <USB_EPStartXfer+0x502>
 8004cf4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cf8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004d00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	4413      	add	r3, r2
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	011a      	lsls	r2, r3, #4
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	4413      	add	r3, r2
 8004d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	891b      	ldrh	r3, [r3, #8]
 8004d46:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6959      	ldr	r1, [r3, #20]
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d60:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004d64:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8004d68:	6800      	ldr	r0, [r0, #0]
 8004d6a:	f001 fa4a 	bl	8006202 <USB_WritePMA>
 8004d6e:	f000 bc17 	b.w	80055a0 <USB_EPStartXfer+0xd68>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d76:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d16d      	bne.n	8004e5e <USB_EPStartXfer+0x626>
 8004d82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	4413      	add	r3, r2
 8004da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004daa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	011a      	lsls	r2, r3, #4
 8004db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db6:	4413      	add	r3, r2
 8004db8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d112      	bne.n	8004dec <USB_EPStartXfer+0x5b4>
 8004dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de8:	801a      	strh	r2, [r3, #0]
 8004dea:	e063      	b.n	8004eb4 <USB_EPStartXfer+0x67c>
 8004dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df0:	2b3e      	cmp	r3, #62	; 0x3e
 8004df2:	d817      	bhi.n	8004e24 <USB_EPStartXfer+0x5ec>
 8004df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d004      	beq.n	8004e14 <USB_EPStartXfer+0x5dc>
 8004e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	029b      	lsls	r3, r3, #10
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	e047      	b.n	8004eb4 <USB_EPStartXfer+0x67c>
 8004e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <USB_EPStartXfer+0x60c>
 8004e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	029b      	lsls	r3, r3, #10
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	e02a      	b.n	8004eb4 <USB_EPStartXfer+0x67c>
 8004e5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d122      	bne.n	8004eb4 <USB_EPStartXfer+0x67c>
 8004e6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	657b      	str	r3, [r7, #84]	; 0x54
 8004e7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8e:	4413      	add	r3, r2
 8004e90:	657b      	str	r3, [r7, #84]	; 0x54
 8004e92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	011a      	lsls	r2, r3, #4
 8004ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8004eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004eb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	891b      	ldrh	r3, [r3, #8]
 8004ec0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ec8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6959      	ldr	r1, [r3, #20]
 8004ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004eda:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004ede:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8004ee2:	6800      	ldr	r0, [r0, #0]
 8004ee4:	f001 f98d 	bl	8006202 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ee8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004eec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef8:	441a      	add	r2, r3
 8004efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004efe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a1a      	ldr	r2, [r3, #32]
 8004f12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d90f      	bls.n	8004f42 <USB_EPStartXfer+0x70a>
            {
              ep->xfer_len_db -= len;
 8004f22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f32:	1ad2      	subs	r2, r2, r3
 8004f34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	621a      	str	r2, [r3, #32]
 8004f40:	e00e      	b.n	8004f60 <USB_EPStartXfer+0x728>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d16d      	bne.n	8005058 <USB_EPStartXfer+0x820>
 8004f7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9c:	4413      	add	r3, r2
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	011a      	lsls	r2, r3, #4
 8004fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d112      	bne.n	8004fe6 <USB_EPStartXfer+0x7ae>
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e05d      	b.n	80050a2 <USB_EPStartXfer+0x86a>
 8004fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fea:	2b3e      	cmp	r3, #62	; 0x3e
 8004fec:	d817      	bhi.n	800501e <USB_EPStartXfer+0x7e6>
 8004fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <USB_EPStartXfer+0x7d6>
 8005004:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005008:	3301      	adds	r3, #1
 800500a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800500e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005012:	b29b      	uxth	r3, r3
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	b29a      	uxth	r2, r3
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e041      	b.n	80050a2 <USB_EPStartXfer+0x86a>
 800501e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <USB_EPStartXfer+0x806>
 8005034:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005038:	3b01      	subs	r3, #1
 800503a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800503e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005042:	b29b      	uxth	r3, r3
 8005044:	029b      	lsls	r3, r3, #10
 8005046:	b29b      	uxth	r3, r3
 8005048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005050:	b29a      	uxth	r2, r3
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	e024      	b.n	80050a2 <USB_EPStartXfer+0x86a>
 8005058:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800505c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d11c      	bne.n	80050a2 <USB_EPStartXfer+0x86a>
 8005068:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800506c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005076:	b29b      	uxth	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800507c:	4413      	add	r3, r2
 800507e:	647b      	str	r3, [r7, #68]	; 0x44
 8005080:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005084:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	011a      	lsls	r2, r3, #4
 800508e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005090:	4413      	add	r3, r2
 8005092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005096:	643b      	str	r3, [r7, #64]	; 0x40
 8005098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800509c:	b29a      	uxth	r2, r3
 800509e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	895b      	ldrh	r3, [r3, #10]
 80050ae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6959      	ldr	r1, [r3, #20]
 80050be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050c8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80050cc:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80050d0:	6800      	ldr	r0, [r0, #0]
 80050d2:	f001 f896 	bl	8006202 <USB_WritePMA>
 80050d6:	e263      	b.n	80055a0 <USB_EPStartXfer+0xd68>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80050d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80050e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050f6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005116:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005120:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005144:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005148:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	663b      	str	r3, [r7, #96]	; 0x60
 8005150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005154:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005164:	4413      	add	r3, r2
 8005166:	663b      	str	r3, [r7, #96]	; 0x60
 8005168:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800516c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011a      	lsls	r2, r3, #4
 8005176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005178:	4413      	add	r3, r2
 800517a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800517e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005184:	b29a      	uxth	r2, r3
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800518a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800518e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	891b      	ldrh	r3, [r3, #8]
 8005196:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800519e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6959      	ldr	r1, [r3, #20]
 80051a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051b0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80051b4:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80051b8:	6800      	ldr	r0, [r0, #0]
 80051ba:	f001 f822 	bl	8006202 <USB_WritePMA>
 80051be:	e1ef      	b.n	80055a0 <USB_EPStartXfer+0xd68>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80aa 	beq.w	800533c <USB_EPStartXfer+0xb04>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d16d      	bne.n	80052e0 <USB_EPStartXfer+0xaa8>
 8005204:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005208:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	673b      	str	r3, [r7, #112]	; 0x70
 8005210:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005214:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800521e:	b29b      	uxth	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005224:	4413      	add	r3, r2
 8005226:	673b      	str	r3, [r7, #112]	; 0x70
 8005228:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800522c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	011a      	lsls	r2, r3, #4
 8005236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005238:	4413      	add	r3, r2
 800523a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800523e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d112      	bne.n	800526e <USB_EPStartXfer+0xa36>
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005252:	b29a      	uxth	r2, r3
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005266:	b29a      	uxth	r2, r3
 8005268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	e05d      	b.n	800532a <USB_EPStartXfer+0xaf2>
 800526e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005272:	2b3e      	cmp	r3, #62	; 0x3e
 8005274:	d817      	bhi.n	80052a6 <USB_EPStartXfer+0xa6e>
 8005276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <USB_EPStartXfer+0xa5e>
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	3301      	adds	r3, #1
 8005292:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	b29b      	uxth	r3, r3
 800529c:	029b      	lsls	r3, r3, #10
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e041      	b.n	800532a <USB_EPStartXfer+0xaf2>
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <USB_EPStartXfer+0xa8e>
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	3b01      	subs	r3, #1
 80052c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	029b      	lsls	r3, r3, #10
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e024      	b.n	800532a <USB_EPStartXfer+0xaf2>
 80052e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d11c      	bne.n	800532a <USB_EPStartXfer+0xaf2>
 80052f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fe:	b29b      	uxth	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005304:	4413      	add	r3, r2
 8005306:	67bb      	str	r3, [r7, #120]	; 0x78
 8005308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800530c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	011a      	lsls	r2, r3, #4
 8005316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005318:	4413      	add	r3, r2
 800531a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800531e:	677b      	str	r3, [r7, #116]	; 0x74
 8005320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005324:	b29a      	uxth	r2, r3
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800532a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800532e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	895b      	ldrh	r3, [r3, #10]
 8005336:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800533a:	e0b2      	b.n	80054a2 <USB_EPStartXfer+0xc6a>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800533c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005340:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d171      	bne.n	8005430 <USB_EPStartXfer+0xbf8>
 800534c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005350:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800535a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800535e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005370:	4413      	add	r3, r2
 8005372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005376:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800537a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	011a      	lsls	r2, r3, #4
 8005384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005388:	4413      	add	r3, r2
 800538a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800538e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d112      	bne.n	80053be <USB_EPStartXfer+0xb86>
 8005398:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e069      	b.n	8005492 <USB_EPStartXfer+0xc5a>
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c2:	2b3e      	cmp	r3, #62	; 0x3e
 80053c4:	d817      	bhi.n	80053f6 <USB_EPStartXfer+0xbbe>
 80053c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <USB_EPStartXfer+0xbae>
 80053dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053e0:	3301      	adds	r3, #1
 80053e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e04d      	b.n	8005492 <USB_EPStartXfer+0xc5a>
 80053f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <USB_EPStartXfer+0xbde>
 800540c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005410:	3b01      	subs	r3, #1
 8005412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005416:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800541a:	b29b      	uxth	r3, r3
 800541c:	029b      	lsls	r3, r3, #10
 800541e:	b29b      	uxth	r3, r3
 8005420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005428:	b29a      	uxth	r2, r3
 800542a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e030      	b.n	8005492 <USB_EPStartXfer+0xc5a>
 8005430:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005434:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d128      	bne.n	8005492 <USB_EPStartXfer+0xc5a>
 8005440:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005444:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800544e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005452:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545c:	b29b      	uxth	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005464:	4413      	add	r3, r2
 8005466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800546a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800546e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	011a      	lsls	r2, r3, #4
 8005478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800547c:	4413      	add	r3, r2
 800547e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548a:	b29a      	uxth	r2, r3
 800548c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005490:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005496:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	891b      	ldrh	r3, [r3, #8]
 800549e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6959      	ldr	r1, [r3, #20]
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80054b8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80054bc:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80054c0:	6800      	ldr	r0, [r0, #0]
 80054c2:	f000 fe9e 	bl	8006202 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80054c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d12e      	bne.n	8005534 <USB_EPStartXfer+0xcfc>
 80054d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005500:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800550e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800551e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800552e:	b29b      	uxth	r3, r3
 8005530:	8013      	strh	r3, [r2, #0]
 8005532:	e035      	b.n	80055a0 <USB_EPStartXfer+0xd68>
 8005534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005538:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d12d      	bne.n	80055a0 <USB_EPStartXfer+0xd68>
 8005544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005548:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005552:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800556e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005572:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800557c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	441a      	add	r2, r3
 8005588:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800558c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559c:	b29b      	uxth	r3, r3
 800559e:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80055c2:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ce:	8013      	strh	r3, [r2, #0]
 80055d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055d4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80055d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80055dc:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	f082 0210 	eor.w	r2, r2, #16
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055ec:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80055f0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80055f4:	f5a2 7281 	sub.w	r2, r2, #258	; 0x102
 80055f8:	8812      	ldrh	r2, [r2, #0]
 80055fa:	f082 0220 	eor.w	r2, r2, #32
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005604:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800560e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800561e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005634:	b29b      	uxth	r3, r3
 8005636:	8013      	strh	r3, [r2, #0]
 8005638:	f000 bc9f 	b.w	8005f7a <USB_EPStartXfer+0x1742>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800563c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005640:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	7b1b      	ldrb	r3, [r3, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 80ae 	bne.w	80057aa <USB_EPStartXfer+0xf72>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800564e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005652:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800565e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d917      	bls.n	800569a <USB_EPStartXfer+0xe62>
      {
        len = ep->maxpacket;
 800566a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800566e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800567a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800567e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005690:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	619a      	str	r2, [r3, #24]
 8005698:	e00e      	b.n	80056b8 <USB_EPStartXfer+0xe80>
      }
      else
      {
        len = ep->xfer_len;
 800569a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800569e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80056aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2200      	movs	r2, #0
 80056b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056dc:	4413      	add	r3, r2
 80056de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	011a      	lsls	r2, r3, #4
 80056f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80056f4:	4413      	add	r3, r2
 80056f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d116      	bne.n	8005734 <USB_EPStartXfer+0xefc>
 8005706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005712:	b29a      	uxth	r2, r3
 8005714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572a:	b29a      	uxth	r2, r3
 800572c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e3e8      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
 8005734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005738:	2b3e      	cmp	r3, #62	; 0x3e
 800573a:	d818      	bhi.n	800576e <USB_EPStartXfer+0xf36>
 800573c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <USB_EPStartXfer+0xf24>
 8005752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005756:	3301      	adds	r3, #1
 8005758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800575c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29a      	uxth	r2, r3
 8005766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e3cb      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
 800576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <USB_EPStartXfer+0xf56>
 8005784:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005788:	3b01      	subs	r3, #1
 800578a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800578e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005792:	b29b      	uxth	r3, r3
 8005794:	029b      	lsls	r3, r3, #10
 8005796:	b29b      	uxth	r3, r3
 8005798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e3ad      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	78db      	ldrb	r3, [r3, #3]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	f040 8200 	bne.w	8005bbc <USB_EPStartXfer+0x1384>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f040 8091 	bne.w	80058f0 <USB_EPStartXfer+0x10b8>
 80057ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057f2:	4413      	add	r3, r2
 80057f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800580a:	4413      	add	r3, r2
 800580c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005818:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d116      	bne.n	8005852 <USB_EPStartXfer+0x101a>
 8005824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005830:	b29a      	uxth	r2, r3
 8005832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005848:	b29a      	uxth	r2, r3
 800584a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	e083      	b.n	800595a <USB_EPStartXfer+0x1122>
 8005852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005856:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b3e      	cmp	r3, #62	; 0x3e
 8005860:	d820      	bhi.n	80058a4 <USB_EPStartXfer+0x106c>
 8005862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005866:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005878:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <USB_EPStartXfer+0x105a>
 8005888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800588c:	3301      	adds	r3, #1
 800588e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005896:	b29b      	uxth	r3, r3
 8005898:	029b      	lsls	r3, r3, #10
 800589a:	b29a      	uxth	r2, r3
 800589c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	e05a      	b.n	800595a <USB_EPStartXfer+0x1122>
 80058a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <USB_EPStartXfer+0x109c>
 80058ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058ce:	3b01      	subs	r3, #1
 80058d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058d8:	b29b      	uxth	r3, r3
 80058da:	029b      	lsls	r3, r3, #10
 80058dc:	b29b      	uxth	r3, r3
 80058de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	e034      	b.n	800595a <USB_EPStartXfer+0x1122>
 80058f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d12c      	bne.n	800595a <USB_EPStartXfer+0x1122>
 8005900:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800590e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005912:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005924:	4413      	add	r3, r2
 8005926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800592a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800592e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	011a      	lsls	r2, r3, #4
 8005938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800593c:	4413      	add	r3, r2
 800593e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800594a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	b29a      	uxth	r2, r3
 8005954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800595e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800596c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	785b      	ldrb	r3, [r3, #1]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f040 8091 	bne.w	8005a9c <USB_EPStartXfer+0x1264>
 800597a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800597e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800598c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800599e:	4413      	add	r3, r2
 80059a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	011a      	lsls	r2, r3, #4
 80059b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059b6:	4413      	add	r3, r2
 80059b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d116      	bne.n	80059fe <USB_EPStartXfer+0x11c6>
 80059d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059dc:	b29a      	uxth	r2, r3
 80059de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e07c      	b.n	8005af8 <USB_EPStartXfer+0x12c0>
 80059fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a02:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a0c:	d820      	bhi.n	8005a50 <USB_EPStartXfer+0x1218>
 8005a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <USB_EPStartXfer+0x1206>
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e053      	b.n	8005af8 <USB_EPStartXfer+0x12c0>
 8005a50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <USB_EPStartXfer+0x1248>
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	029b      	lsls	r3, r3, #10
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e02d      	b.n	8005af8 <USB_EPStartXfer+0x12c0>
 8005a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005aa0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d125      	bne.n	8005af8 <USB_EPStartXfer+0x12c0>
 8005aac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ab0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ac8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005acc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ada:	4413      	add	r3, r2
 8005adc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005ae4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ae8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005af6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005af8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005afc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 81fe 	beq.w	8005f06 <USB_EPStartXfer+0x16ce>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <USB_EPStartXfer+0x130a>
 8005b36:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10d      	bne.n	8005b5e <USB_EPStartXfer+0x1326>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b42:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f040 81db 	bne.w	8005f06 <USB_EPStartXfer+0x16ce>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b50:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 81d4 	bne.w	8005f06 <USB_EPStartXfer+0x16ce>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005b88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	441a      	add	r2, r3
 8005ba2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	e1a4      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	78db      	ldrb	r3, [r3, #3]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	f040 819a 	bne.w	8005f02 <USB_EPStartXfer+0x16ca>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d917      	bls.n	8005c1a <USB_EPStartXfer+0x13e2>
        {
          len = ep->maxpacket;
 8005bea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c0a:	1ad2      	subs	r2, r2, r3
 8005c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	619a      	str	r2, [r3, #24]
 8005c18:	e00e      	b.n	8005c38 <USB_EPStartXfer+0x1400>
        }
        else
        {
          len = ep->xfer_len;
 8005c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2200      	movs	r2, #0
 8005c36:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d178      	bne.n	8005d3a <USB_EPStartXfer+0x1502>
 8005c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c76:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	011a      	lsls	r2, r3, #4
 8005c80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c84:	4413      	add	r3, r2
 8005c86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d116      	bne.n	8005cc4 <USB_EPStartXfer+0x148c>
 8005c96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e06b      	b.n	8005d9c <USB_EPStartXfer+0x1564>
 8005cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cca:	d818      	bhi.n	8005cfe <USB_EPStartXfer+0x14c6>
 8005ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd0:	085b      	lsrs	r3, r3, #1
 8005cd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <USB_EPStartXfer+0x14b4>
 8005ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	029b      	lsls	r3, r3, #10
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e04e      	b.n	8005d9c <USB_EPStartXfer+0x1564>
 8005cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <USB_EPStartXfer+0x14e6>
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	e030      	b.n	8005d9c <USB_EPStartXfer+0x1564>
 8005d3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d128      	bne.n	8005d9c <USB_EPStartXfer+0x1564>
 8005d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d6e:	4413      	add	r3, r2
 8005d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d86:	4413      	add	r3, r2
 8005d88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005da0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d178      	bne.n	8005eac <USB_EPStartXfer+0x1674>
 8005dba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dde:	4413      	add	r3, r2
 8005de0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005de8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	011a      	lsls	r2, r3, #4
 8005df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d116      	bne.n	8005e36 <USB_EPStartXfer+0x15fe>
 8005e08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	e067      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
 8005e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e3c:	d818      	bhi.n	8005e70 <USB_EPStartXfer+0x1638>
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <USB_EPStartXfer+0x1626>
 8005e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e58:	3301      	adds	r3, #1
 8005e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e04a      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
 8005e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <USB_EPStartXfer+0x1658>
 8005e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	029b      	lsls	r3, r3, #10
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e02c      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
 8005eac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d124      	bne.n	8005f06 <USB_EPStartXfer+0x16ce>
 8005ebc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ec0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005edc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	011a      	lsls	r2, r3, #4
 8005ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eea:	4413      	add	r3, r2
 8005eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e001      	b.n	8005f06 <USB_EPStartXfer+0x16ce>
      }
      else
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e03a      	b.n	8005f7c <USB_EPStartXfer+0x1744>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f30:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f34:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f38:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f44:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005f48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d020      	beq.n	8005fda <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fae:	81bb      	strh	r3, [r7, #12]
 8005fb0:	89bb      	ldrh	r3, [r7, #12]
 8005fb2:	f083 0310 	eor.w	r3, r3, #16
 8005fb6:	81bb      	strh	r3, [r7, #12]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	89bb      	ldrh	r3, [r7, #12]
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]
 8005fd8:	e01f      	b.n	800601a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	81fb      	strh	r3, [r7, #14]
 8005ff2:	89fb      	ldrh	r3, [r7, #14]
 8005ff4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ff8:	81fb      	strh	r3, [r7, #14]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	89fb      	ldrh	r3, [r7, #14]
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006026:	b480      	push	{r7}
 8006028:	b087      	sub	sp, #28
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	7b1b      	ldrb	r3, [r3, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 809d 	bne.w	8006174 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04c      	beq.n	80060dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	823b      	strh	r3, [r7, #16]
 8006050:	8a3b      	ldrh	r3, [r7, #16]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <USB_EPClearStall+0x6c>
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	81fb      	strh	r3, [r7, #14]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	89fb      	ldrh	r3, [r7, #14]
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	78db      	ldrb	r3, [r3, #3]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d06c      	beq.n	8006174 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b0:	81bb      	strh	r3, [r7, #12]
 80060b2:	89bb      	ldrh	r3, [r7, #12]
 80060b4:	f083 0320 	eor.w	r3, r3, #32
 80060b8:	81bb      	strh	r3, [r7, #12]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	89bb      	ldrh	r3, [r7, #12]
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
 80060da:	e04b      	b.n	8006174 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	82fb      	strh	r3, [r7, #22]
 80060ea:	8afb      	ldrh	r3, [r7, #22]
 80060ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01b      	beq.n	800612c <USB_EPClearStall+0x106>
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	82bb      	strh	r3, [r7, #20]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	441a      	add	r2, r3
 8006116:	8abb      	ldrh	r3, [r7, #20]
 8006118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	b29b      	uxth	r3, r3
 800612a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	827b      	strh	r3, [r7, #18]
 8006144:	8a7b      	ldrh	r3, [r7, #18]
 8006146:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800614a:	827b      	strh	r3, [r7, #18]
 800614c:	8a7b      	ldrh	r3, [r7, #18]
 800614e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006152:	827b      	strh	r3, [r7, #18]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	441a      	add	r2, r3
 800615e:	8a7b      	ldrh	r3, [r7, #18]
 8006160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006170:	b29b      	uxth	r3, r3
 8006172:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2280      	movs	r2, #128	; 0x80
 8006196:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061dc:	b29b      	uxth	r3, r3
 80061de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061e0:	68fb      	ldr	r3, [r7, #12]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr

08006202 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006202:	b480      	push	{r7}
 8006204:	b08d      	sub	sp, #52	; 0x34
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	4611      	mov	r1, r2
 800620e:	461a      	mov	r2, r3
 8006210:	460b      	mov	r3, r1
 8006212:	80fb      	strh	r3, [r7, #6]
 8006214:	4613      	mov	r3, r2
 8006216:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006218:	88bb      	ldrh	r3, [r7, #4]
 800621a:	3301      	adds	r3, #1
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	005a      	lsls	r2, r3, #1
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623a:	e01e      	b.n	800627a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	3301      	adds	r3, #1
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	b29a      	uxth	r2, r3
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	3302      	adds	r3, #2
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	3302      	adds	r3, #2
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	3301      	adds	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	3b01      	subs	r3, #1
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1dd      	bne.n	800623c <USB_WritePMA+0x3a>
  }
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	3734      	adds	r7, #52	; 0x34
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr

0800628c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800628c:	b480      	push	{r7}
 800628e:	b08b      	sub	sp, #44	; 0x2c
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4611      	mov	r1, r2
 8006298:	461a      	mov	r2, r3
 800629a:	460b      	mov	r3, r1
 800629c:	80fb      	strh	r3, [r7, #6]
 800629e:	4613      	mov	r3, r2
 80062a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062a2:	88bb      	ldrh	r3, [r7, #4]
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	005a      	lsls	r2, r3, #1
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062be:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
 80062c4:	e01b      	b.n	80062fe <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	3302      	adds	r3, #2
 80062d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3301      	adds	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3301      	adds	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	3302      	adds	r3, #2
 80062f6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	3b01      	subs	r3, #1
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e0      	bne.n	80062c6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006304:	88bb      	ldrh	r3, [r7, #4]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	701a      	strb	r2, [r3, #0]
  }
}
 8006320:	bf00      	nop
 8006322:	372c      	adds	r7, #44	; 0x2c
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr
	...

0800632c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc>:
#include "../Inc/ascii_to_hid.h"

namespace transcoders
{
    uint16_t AsciiToHidTranscoder::asciiToHid(char c)
    {
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
        uint16_t shiftDown = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	81fb      	strh	r3, [r7, #14]

        if ((c >= 'A') && (c <= 'Z'))
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d90b      	bls.n	8006358 <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x2c>
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b5a      	cmp	r3, #90	; 0x5a
 8006344:	d808      	bhi.n	8006358 <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x2c>
        {
            c = tolower(c);
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	4618      	mov	r0, r3
 800634a:	f003 fbc9 	bl	8009ae0 <tolower>
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
            shiftDown = SHIFT;
 8006352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006356:	81fb      	strh	r3, [r7, #14]
        }
        if ((c >= 'a') && (c <= 'z'))
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	2b60      	cmp	r3, #96	; 0x60
 800635c:	d910      	bls.n	8006380 <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x54>
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	2b7a      	cmp	r3, #122	; 0x7a
 8006362:	d80d      	bhi.n	8006380 <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x54>
        {
            return (((c -= 'a') + HID_KEY_A) | shiftDown);
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	3b61      	subs	r3, #97	; 0x61
 8006368:	71fb      	strb	r3, [r7, #7]
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	b29b      	uxth	r3, r3
 800636e:	3304      	adds	r3, #4
 8006370:	b29b      	uxth	r3, r3
 8006372:	b21a      	sxth	r2, r3
 8006374:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006378:	4313      	orrs	r3, r2
 800637a:	b21b      	sxth	r3, r3
 800637c:	b29b      	uxth	r3, r3
 800637e:	e165      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        }
        if ((c >= '1') && (c <= '9'))
 8006380:	79fb      	ldrb	r3, [r7, #7]
 8006382:	2b30      	cmp	r3, #48	; 0x30
 8006384:	d90a      	bls.n	800639c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x70>
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	2b39      	cmp	r3, #57	; 0x39
 800638a:	d807      	bhi.n	800639c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x70>
        {
            return ((c -= '1') + HID_KEY_1);
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	3b31      	subs	r3, #49	; 0x31
 8006390:	71fb      	strb	r3, [r7, #7]
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	b29b      	uxth	r3, r3
 8006396:	331e      	adds	r3, #30
 8006398:	b29b      	uxth	r3, r3
 800639a:	e157      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        }

        switch (c)
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	3b08      	subs	r3, #8
 80063a0:	2b76      	cmp	r3, #118	; 0x76
 80063a2:	f200 8152 	bhi.w	800664a <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x31e>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x80>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080065d1 	.word	0x080065d1
 80063b0:	080065d5 	.word	0x080065d5
 80063b4:	080065c9 	.word	0x080065c9
 80063b8:	0800664b 	.word	0x0800664b
 80063bc:	0800664b 	.word	0x0800664b
 80063c0:	080065cd 	.word	0x080065cd
 80063c4:	0800664b 	.word	0x0800664b
 80063c8:	0800664b 	.word	0x0800664b
 80063cc:	0800664b 	.word	0x0800664b
 80063d0:	0800664b 	.word	0x0800664b
 80063d4:	0800664b 	.word	0x0800664b
 80063d8:	0800664b 	.word	0x0800664b
 80063dc:	0800664b 	.word	0x0800664b
 80063e0:	0800664b 	.word	0x0800664b
 80063e4:	0800664b 	.word	0x0800664b
 80063e8:	0800664b 	.word	0x0800664b
 80063ec:	0800664b 	.word	0x0800664b
 80063f0:	0800664b 	.word	0x0800664b
 80063f4:	0800664b 	.word	0x0800664b
 80063f8:	0800664b 	.word	0x0800664b
 80063fc:	0800664b 	.word	0x0800664b
 8006400:	0800664b 	.word	0x0800664b
 8006404:	0800664b 	.word	0x0800664b
 8006408:	0800664b 	.word	0x0800664b
 800640c:	080065d9 	.word	0x080065d9
 8006410:	08006589 	.word	0x08006589
 8006414:	08006619 	.word	0x08006619
 8006418:	08006595 	.word	0x08006595
 800641c:	0800659b 	.word	0x0800659b
 8006420:	080065a1 	.word	0x080065a1
 8006424:	080065ad 	.word	0x080065ad
 8006428:	0800661f 	.word	0x0800661f
 800642c:	080065b9 	.word	0x080065b9
 8006430:	080065bf 	.word	0x080065bf
 8006434:	080065b3 	.word	0x080065b3
 8006438:	080065e7 	.word	0x080065e7
 800643c:	08006633 	.word	0x08006633
 8006440:	080065e3 	.word	0x080065e3
 8006444:	0800663d 	.word	0x0800663d
 8006448:	08006647 	.word	0x08006647
 800644c:	080065c5 	.word	0x080065c5
 8006450:	0800664b 	.word	0x0800664b
 8006454:	0800664b 	.word	0x0800664b
 8006458:	0800664b 	.word	0x0800664b
 800645c:	0800664b 	.word	0x0800664b
 8006460:	0800664b 	.word	0x0800664b
 8006464:	0800664b 	.word	0x0800664b
 8006468:	0800664b 	.word	0x0800664b
 800646c:	0800664b 	.word	0x0800664b
 8006470:	0800664b 	.word	0x0800664b
 8006474:	0800660f 	.word	0x0800660f
 8006478:	08006615 	.word	0x08006615
 800647c:	0800662d 	.word	0x0800662d
 8006480:	080065ed 	.word	0x080065ed
 8006484:	08006637 	.word	0x08006637
 8006488:	08006641 	.word	0x08006641
 800648c:	0800658f 	.word	0x0800658f
 8006490:	0800664b 	.word	0x0800664b
 8006494:	0800664b 	.word	0x0800664b
 8006498:	0800664b 	.word	0x0800664b
 800649c:	0800664b 	.word	0x0800664b
 80064a0:	0800664b 	.word	0x0800664b
 80064a4:	0800664b 	.word	0x0800664b
 80064a8:	0800664b 	.word	0x0800664b
 80064ac:	0800664b 	.word	0x0800664b
 80064b0:	0800664b 	.word	0x0800664b
 80064b4:	0800664b 	.word	0x0800664b
 80064b8:	0800664b 	.word	0x0800664b
 80064bc:	0800664b 	.word	0x0800664b
 80064c0:	0800664b 	.word	0x0800664b
 80064c4:	0800664b 	.word	0x0800664b
 80064c8:	0800664b 	.word	0x0800664b
 80064cc:	0800664b 	.word	0x0800664b
 80064d0:	0800664b 	.word	0x0800664b
 80064d4:	0800664b 	.word	0x0800664b
 80064d8:	0800664b 	.word	0x0800664b
 80064dc:	0800664b 	.word	0x0800664b
 80064e0:	0800664b 	.word	0x0800664b
 80064e4:	0800664b 	.word	0x0800664b
 80064e8:	0800664b 	.word	0x0800664b
 80064ec:	0800664b 	.word	0x0800664b
 80064f0:	0800664b 	.word	0x0800664b
 80064f4:	0800664b 	.word	0x0800664b
 80064f8:	080065f7 	.word	0x080065f7
 80064fc:	0800660b 	.word	0x0800660b
 8006500:	08006601 	.word	0x08006601
 8006504:	080065a7 	.word	0x080065a7
 8006508:	080065dd 	.word	0x080065dd
 800650c:	08006629 	.word	0x08006629
 8006510:	0800664b 	.word	0x0800664b
 8006514:	0800664b 	.word	0x0800664b
 8006518:	0800664b 	.word	0x0800664b
 800651c:	0800664b 	.word	0x0800664b
 8006520:	0800664b 	.word	0x0800664b
 8006524:	0800664b 	.word	0x0800664b
 8006528:	0800664b 	.word	0x0800664b
 800652c:	0800664b 	.word	0x0800664b
 8006530:	0800664b 	.word	0x0800664b
 8006534:	0800664b 	.word	0x0800664b
 8006538:	0800664b 	.word	0x0800664b
 800653c:	0800664b 	.word	0x0800664b
 8006540:	0800664b 	.word	0x0800664b
 8006544:	0800664b 	.word	0x0800664b
 8006548:	0800664b 	.word	0x0800664b
 800654c:	0800664b 	.word	0x0800664b
 8006550:	0800664b 	.word	0x0800664b
 8006554:	0800664b 	.word	0x0800664b
 8006558:	0800664b 	.word	0x0800664b
 800655c:	0800664b 	.word	0x0800664b
 8006560:	0800664b 	.word	0x0800664b
 8006564:	0800664b 	.word	0x0800664b
 8006568:	0800664b 	.word	0x0800664b
 800656c:	0800664b 	.word	0x0800664b
 8006570:	0800664b 	.word	0x0800664b
 8006574:	0800664b 	.word	0x0800664b
 8006578:	080065f1 	.word	0x080065f1
 800657c:	08006605 	.word	0x08006605
 8006580:	080065fb 	.word	0x080065fb
 8006584:	08006623 	.word	0x08006623
        {
        case '!':
            return (HID_KEY_1 | SHIFT);
 8006588:	f240 231e 	movw	r3, #542	; 0x21e
 800658c:	e05e      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '@':
            return (HID_KEY_2 | SHIFT);
 800658e:	f240 231f 	movw	r3, #543	; 0x21f
 8006592:	e05b      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '#':
            return (HID_KEY_3 | SHIFT);
 8006594:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006598:	e058      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '$':
            return (HID_KEY_4 | SHIFT);
 800659a:	f240 2321 	movw	r3, #545	; 0x221
 800659e:	e055      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '%':
            return (HID_KEY_5 | SHIFT);
 80065a0:	f240 2322 	movw	r3, #546	; 0x222
 80065a4:	e052      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '^':
            return (HID_KEY_6 | SHIFT);
 80065a6:	f240 2323 	movw	r3, #547	; 0x223
 80065aa:	e04f      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '&':
            return (HID_KEY_7 | SHIFT);
 80065ac:	f44f 7309 	mov.w	r3, #548	; 0x224
 80065b0:	e04c      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '*':
            return (HID_KEY_8 | SHIFT);
 80065b2:	f240 2325 	movw	r3, #549	; 0x225
 80065b6:	e049      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '(':
            return (HID_KEY_9 | SHIFT);
 80065b8:	f240 2326 	movw	r3, #550	; 0x226
 80065bc:	e046      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case ')':
            return (HID_KEY_0 | SHIFT);
 80065be:	f240 2327 	movw	r3, #551	; 0x227
 80065c2:	e043      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '0':
            return (HID_KEY_0);
 80065c4:	2327      	movs	r3, #39	; 0x27
 80065c6:	e041      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '\n':
            return (HID_KEY_ENTER); //enter
 80065c8:	2328      	movs	r3, #40	; 0x28
 80065ca:	e03f      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '\r':
            return (HID_KEY_ENTER); //enter
 80065cc:	2328      	movs	r3, #40	; 0x28
 80065ce:	e03d      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '\b':
            return (HID_KEY_BACKSPACE); //backspace
 80065d0:	232a      	movs	r3, #42	; 0x2a
 80065d2:	e03b      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '\t':
            return (HID_KEY_TAB); //tab
 80065d4:	232b      	movs	r3, #43	; 0x2b
 80065d6:	e039      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case ' ':
            return (HID_KEY_SPACE); //space
 80065d8:	232c      	movs	r3, #44	; 0x2c
 80065da:	e037      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '_':
            return (HID_KEY_MINUS | SHIFT);
 80065dc:	f240 232d 	movw	r3, #557	; 0x22d
 80065e0:	e034      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '-':
            return (HID_KEY_MINUS);
 80065e2:	232d      	movs	r3, #45	; 0x2d
 80065e4:	e032      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '+':
            return (HID_KEY_EQUAL | SHIFT);
 80065e6:	f240 232e 	movw	r3, #558	; 0x22e
 80065ea:	e02f      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '=':
            return (HID_KEY_EQUAL);
 80065ec:	232e      	movs	r3, #46	; 0x2e
 80065ee:	e02d      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '{':
            return (HID_KEY_LEFTBRACE | SHIFT);
 80065f0:	f240 232f 	movw	r3, #559	; 0x22f
 80065f4:	e02a      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '[':
            return (HID_KEY_LEFTBRACE);
 80065f6:	232f      	movs	r3, #47	; 0x2f
 80065f8:	e028      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '}':
            return (HID_KEY_RIGHTBRACE | SHIFT);
 80065fa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80065fe:	e025      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case ']':
            return (HID_KEY_RIGHTBRACE);
 8006600:	2330      	movs	r3, #48	; 0x30
 8006602:	e023      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '|':
            return (HID_KEY_BACKSLASH | SHIFT);
 8006604:	f240 2331 	movw	r3, #561	; 0x231
 8006608:	e020      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '\\':
            return (HID_KEY_BACKSLASH);
 800660a:	2331      	movs	r3, #49	; 0x31
 800660c:	e01e      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case ':':
            return (HID_KEY_SEMICOLON | SHIFT);
 800660e:	f240 2333 	movw	r3, #563	; 0x233
 8006612:	e01b      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case ';':
            return (HID_KEY_SEMICOLON);
 8006614:	2333      	movs	r3, #51	; 0x33
 8006616:	e019      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '"':
            return (HID_KEY_APOSTROPHE | SHIFT);
 8006618:	f44f 730d 	mov.w	r3, #564	; 0x234
 800661c:	e016      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '\'':
            return (HID_KEY_APOSTROPHE);
 800661e:	2334      	movs	r3, #52	; 0x34
 8006620:	e014      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '~':
            return (HID_KEY_GRAVE | SHIFT);
 8006622:	f240 2335 	movw	r3, #565	; 0x235
 8006626:	e011      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '`':
            return (HID_KEY_GRAVE);
 8006628:	2335      	movs	r3, #53	; 0x35
 800662a:	e00f      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '<':
            return (HID_KEY_COMMA | SHIFT);
 800662c:	f240 2336 	movw	r3, #566	; 0x236
 8006630:	e00c      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case ',':
            return (HID_KEY_COMMA);
 8006632:	2336      	movs	r3, #54	; 0x36
 8006634:	e00a      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '>':
            return (HID_KEY_DOT | SHIFT);
 8006636:	f240 2337 	movw	r3, #567	; 0x237
 800663a:	e007      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '.':
            return (HID_KEY_DOT);
 800663c:	2337      	movs	r3, #55	; 0x37
 800663e:	e005      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '?':
            return (HID_KEY_SLASH | SHIFT);
 8006640:	f44f 730e 	mov.w	r3, #568	; 0x238
 8006644:	e002      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        case '/':
            return (HID_KEY_SLASH);
 8006646:	2338      	movs	r3, #56	; 0x38
 8006648:	e000      	b.n	800664c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc+0x320>
        }

        return 0;
 800664a:	2300      	movs	r3, #0
    }
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_ZN12hid_keyboard16HidKeyboardStateC1EhPFvPN12keyboard_api14KeyboardReportEE>:

#include "../Inc/hid_keyboard_state_util.h"

namespace hid_keyboard
{
    HidKeyboardState::HidKeyboardState(uint8_t reportId, void (*sendMethod)(keyboard_api::KeyboardReport *))
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	460b      	mov	r3, r1
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	72fb      	strb	r3, [r7, #11]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	461a      	mov	r2, r3
 8006666:	2300      	movs	r3, #0
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	6053      	str	r3, [r2, #4]
    {
    	// TODO: uncomment
        this->_internalKeyboardState.reportId = reportId;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	7afa      	ldrb	r2, [r7, #11]
 8006670:	701a      	strb	r2, [r3, #0]
        this->sendProto = sendMethod;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	609a      	str	r2, [r3, #8]
    }
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	4770      	bx	lr

08006684 <_ZN12hid_keyboard16HidKeyboardState7keyDownEhh>:

    uint8_t HidKeyboardState::keyDown(uint8_t hidCode, uint8_t modKey)
    {
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
 8006690:	4613      	mov	r3, r2
 8006692:	70bb      	strb	r3, [r7, #2]
        if (modKey)
 8006694:	78bb      	ldrb	r3, [r7, #2]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d006      	beq.n	80066a8 <_ZN12hid_keyboard16HidKeyboardState7keyDownEhh+0x24>
            return _modDown(hidCode);
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8e1 	bl	8006866 <_ZN12hid_keyboard16HidKeyboardState8_modDownEh>
 80066a4:	4603      	mov	r3, r0
 80066a6:	e006      	b.n	80066b6 <_ZN12hid_keyboard16HidKeyboardState7keyDownEhh+0x32>
        else
            return _keyDown(hidCode);
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f86e 	bl	800678e <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh>
 80066b2:	4603      	mov	r3, r0
 80066b4:	bf00      	nop
    }
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <_ZN12hid_keyboard16HidKeyboardState5keyUpEhh>:

    uint8_t HidKeyboardState::keyUp(uint8_t hidCode, uint8_t modKey)
    {
 80066be:	b580      	push	{r7, lr}
 80066c0:	b082      	sub	sp, #8
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
 80066ca:	4613      	mov	r3, r2
 80066cc:	70bb      	strb	r3, [r7, #2]
        if (modKey)
 80066ce:	78bb      	ldrb	r3, [r7, #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <_ZN12hid_keyboard16HidKeyboardState5keyUpEhh+0x24>
            return _modUp(hidCode);
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8d7 	bl	800688c <_ZN12hid_keyboard16HidKeyboardState6_modUpEh>
 80066de:	4603      	mov	r3, r0
 80066e0:	e006      	b.n	80066f0 <_ZN12hid_keyboard16HidKeyboardState5keyUpEhh+0x32>
        else
            return _keyUp(hidCode);
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f87c 	bl	80067e4 <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh>
 80066ec:	4603      	mov	r3, r0
 80066ee:	bf00      	nop
    }
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <_ZN12hid_keyboard16HidKeyboardState9handleKeyENS_6HidKeyE>:

    uint8_t HidKeyboardState::handleKey(HidKey hidKey)
    {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
        if (hidKey.error)
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <_ZN12hid_keyboard16HidKeyboardState9handleKeyENS_6HidKeyE+0x14>
            return hidKey.error;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	e012      	b.n	8006732 <_ZN12hid_keyboard16HidKeyboardState9handleKeyENS_6HidKeyE+0x3a>

        if (hidKey.released)
 800670c:	78bb      	ldrb	r3, [r7, #2]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <_ZN12hid_keyboard16HidKeyboardState9handleKeyENS_6HidKeyE+0x2a>
            return keyUp(hidKey.hidCode, hidKey.modKey);
 8006712:	783b      	ldrb	r3, [r7, #0]
 8006714:	787a      	ldrb	r2, [r7, #1]
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ffd0 	bl	80066be <_ZN12hid_keyboard16HidKeyboardState5keyUpEhh>
 800671e:	4603      	mov	r3, r0
 8006720:	e007      	b.n	8006732 <_ZN12hid_keyboard16HidKeyboardState9handleKeyENS_6HidKeyE+0x3a>
        else
            return keyDown(hidKey.hidCode, hidKey.modKey);
 8006722:	783b      	ldrb	r3, [r7, #0]
 8006724:	787a      	ldrb	r2, [r7, #1]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ffab 	bl	8006684 <_ZN12hid_keyboard16HidKeyboardState7keyDownEhh>
 800672e:	4603      	mov	r3, r0
 8006730:	bf00      	nop
    }
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <_ZN12hid_keyboard16HidKeyboardState10sendReportEv>:

    uint8_t HidKeyboardState::sendReport()
    {
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
        if (!this->sendProto)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <_ZN12hid_keyboard16HidKeyboardState10sendReportEv+0x14>
            return 1;
 800674a:	2301      	movs	r3, #1
 800674c:	e00c      	b.n	8006768 <_ZN12hid_keyboard16HidKeyboardState10sendReportEv+0x2e>

        keyboard_api::KeyboardReport kr = this->getKeyboardReport();
 800674e:	f107 0308 	add.w	r3, r7, #8
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f80b 	bl	8006770 <_ZN12hid_keyboard16HidKeyboardState17getKeyboardReportEv>
        this->sendProto(&kr);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f107 0208 	add.w	r2, r7, #8
 8006762:	4610      	mov	r0, r2
 8006764:	4798      	blx	r3

        return 0;
 8006766:	2300      	movs	r3, #0
    }
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <_ZN12hid_keyboard16HidKeyboardState17getKeyboardReportEv>:

    keyboard_api::KeyboardReport HidKeyboardState::getKeyboardReport()
    {
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
        return this->_internalKeyboardState;
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	cb03      	ldmia	r3!, {r0, r1}
 8006780:	6010      	str	r0, [r2, #0]
 8006782:	6051      	str	r1, [r2, #4]
    }
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr

0800678e <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh>:

    uint8_t HidKeyboardState::_keyDown(uint8_t hidCode)
    {
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	70fb      	strb	r3, [r7, #3]
        // check if key is already pressed, if not add it to end (check if buffer is full)
        uint8_t i;

        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM; i++)
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d819      	bhi.n	80067d8 <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh+0x4a>
        {
            if (_internalKeyboardState.keys[i] == hidCode)
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	78db      	ldrb	r3, [r3, #3]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d101      	bne.n	80067b6 <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh+0x28>
            {
                return 0; // OK, Key already pressed
 80067b2:	2300      	movs	r3, #0
 80067b4:	e011      	b.n	80067da <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh+0x4c>
            }
            else if (_internalKeyboardState.keys[i] == 0x00)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	78db      	ldrb	r3, [r3, #3]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh+0x42>
            {
                _internalKeyboardState.keys[i] = hidCode;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4413      	add	r3, r2
 80067c8:	78fa      	ldrb	r2, [r7, #3]
 80067ca:	70da      	strb	r2, [r3, #3]
                return 0; // OK
 80067cc:	2300      	movs	r3, #0
 80067ce:	e004      	b.n	80067da <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh+0x4c>
        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM; i++)
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	3301      	adds	r3, #1
 80067d4:	73fb      	strb	r3, [r7, #15]
 80067d6:	e7e2      	b.n	800679e <_ZN12hid_keyboard16HidKeyboardState8_keyDownEh+0x10>
            }
        }

        return 1; // Buffer full
 80067d8:	2301      	movs	r3, #1
    }
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh>:

    uint8_t HidKeyboardState::_keyUp(uint8_t hidCode)
    {
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
        // check if key is in buffer, remove it from buffer, shif everthing from right to left to fill the gap
        uint8_t i;

        // remove key
        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM; i++)
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d810      	bhi.n	800681c <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh+0x38>
        {
            if (_internalKeyboardState.keys[i] == hidCode)
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	4413      	add	r3, r2
 8006800:	78db      	ldrb	r3, [r3, #3]
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	429a      	cmp	r2, r3
 8006806:	d105      	bne.n	8006814 <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh+0x30>
            {
                _internalKeyboardState.keys[i] = 0;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	2200      	movs	r2, #0
 8006810:	70da      	strb	r2, [r3, #3]
                break;
 8006812:	e003      	b.n	800681c <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh+0x38>
        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM; i++)
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	3301      	adds	r3, #1
 8006818:	73fb      	strb	r3, [r7, #15]
 800681a:	e7eb      	b.n	80067f4 <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh+0x10>
            }
        }

        // shift remaining keys to left
        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM - 1; i++)
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	2b03      	cmp	r3, #3
 8006824:	d819      	bhi.n	800685a <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh+0x76>
        {
            if (_internalKeyboardState.keys[i] == 0)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4413      	add	r3, r2
 800682c:	78db      	ldrb	r3, [r3, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10f      	bne.n	8006852 <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh+0x6e>
            {
                _internalKeyboardState.keys[i] = _internalKeyboardState.keys[i + 1];
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	440a      	add	r2, r1
 800683c:	78d1      	ldrb	r1, [r2, #3]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	460a      	mov	r2, r1
 8006844:	70da      	strb	r2, [r3, #3]
                _internalKeyboardState.keys[i + 1] = 0;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	3301      	adds	r3, #1
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	2200      	movs	r2, #0
 8006850:	70da      	strb	r2, [r3, #3]
        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM - 1; i++)
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	3301      	adds	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	e7e2      	b.n	8006820 <_ZN12hid_keyboard16HidKeyboardState6_keyUpEh+0x3c>
            }
        }

        return 0;
 800685a:	2300      	movs	r3, #0
    }
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <_ZN12hid_keyboard16HidKeyboardState8_modDownEh>:

    uint8_t HidKeyboardState::_modDown(uint8_t hidCode)
    {
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	70fb      	strb	r3, [r7, #3]
        _internalKeyboardState.modKeys |= hidCode;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	785a      	ldrb	r2, [r3, #1]
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	4313      	orrs	r3, r2
 800687a:	b2da      	uxtb	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	705a      	strb	r2, [r3, #1]
        return 0;
 8006880:	2300      	movs	r3, #0
    }
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr

0800688c <_ZN12hid_keyboard16HidKeyboardState6_modUpEh>:

    uint8_t HidKeyboardState::_modUp(uint8_t hidCode)
    {
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
        _internalKeyboardState.modKeys &= ~hidCode;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	b25a      	sxtb	r2, r3
 800689e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068a2:	43db      	mvns	r3, r3
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	4013      	ands	r3, r2
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	705a      	strb	r2, [r3, #1]
        return 0;
 80068b0:	2300      	movs	r3, #0
    }
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bc80      	pop	{r7}
 80068ba:	4770      	bx	lr

080068bc <_ZN12hid_keyboard21dumpHidKeyboardReportEPN12keyboard_api14KeyboardReportEPc>:
        keyboard_api::KeyboardReport keyboardReport = hks->getKeyboardReport();
        dumpHidKeyboardReport(&keyboardReport, outBuffer);
    }

    void dumpHidKeyboardReport(keyboard_api::KeyboardReport *keyboardReport, char *outBuffer)
    {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
        uint8_t i;
        char numberText[10] = {0};
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	f107 0310 	add.w	r3, r7, #16
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	809a      	strh	r2, [r3, #4]

        outBuffer[0] = '\0'; // clear buffer
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]

        sprintf(numberText, "0x%02X\t", keyboardReport->modKeys);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	461a      	mov	r2, r3
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	4919      	ldr	r1, [pc, #100]	; (800694c <_ZN12hid_keyboard21dumpHidKeyboardReportEPN12keyboard_api14KeyboardReportEPc+0x90>)
 80068e6:	4618      	mov	r0, r3
 80068e8:	f003 f8ca 	bl	8009a80 <siprintf>
        strcat(outBuffer, numberText);
 80068ec:	f107 030c 	add.w	r3, r7, #12
 80068f0:	4619      	mov	r1, r3
 80068f2:	6838      	ldr	r0, [r7, #0]
 80068f4:	f003 f8e4 	bl	8009ac0 <strcat>

        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM; i++)
 80068f8:	2300      	movs	r3, #0
 80068fa:	75fb      	strb	r3, [r7, #23]
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d814      	bhi.n	800692c <_ZN12hid_keyboard21dumpHidKeyboardReportEPN12keyboard_api14KeyboardReportEPc+0x70>
        {
            sprintf(numberText, "0x%02X ", keyboardReport->keys[i]);
 8006902:	7dfb      	ldrb	r3, [r7, #23]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	4413      	add	r3, r2
 8006908:	78db      	ldrb	r3, [r3, #3]
 800690a:	461a      	mov	r2, r3
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	490f      	ldr	r1, [pc, #60]	; (8006950 <_ZN12hid_keyboard21dumpHidKeyboardReportEPN12keyboard_api14KeyboardReportEPc+0x94>)
 8006912:	4618      	mov	r0, r3
 8006914:	f003 f8b4 	bl	8009a80 <siprintf>
            strcat(outBuffer, numberText);
 8006918:	f107 030c 	add.w	r3, r7, #12
 800691c:	4619      	mov	r1, r3
 800691e:	6838      	ldr	r0, [r7, #0]
 8006920:	f003 f8ce 	bl	8009ac0 <strcat>
        for (i = 0; i < KEYBOARD_REPORT_KEY_NUM; i++)
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	3301      	adds	r3, #1
 8006928:	75fb      	strb	r3, [r7, #23]
 800692a:	e7e7      	b.n	80068fc <_ZN12hid_keyboard21dumpHidKeyboardReportEPN12keyboard_api14KeyboardReportEPc+0x40>
        }

        strcat(outBuffer, "\r\n");
 800692c:	6838      	ldr	r0, [r7, #0]
 800692e:	f7f9 fc0d 	bl	800014c <strlen>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	4413      	add	r3, r2
 800693a:	4a06      	ldr	r2, [pc, #24]	; (8006954 <_ZN12hid_keyboard21dumpHidKeyboardReportEPN12keyboard_api14KeyboardReportEPc+0x98>)
 800693c:	8811      	ldrh	r1, [r2, #0]
 800693e:	7892      	ldrb	r2, [r2, #2]
 8006940:	8019      	strh	r1, [r3, #0]
 8006942:	709a      	strb	r2, [r3, #2]
    }
 8006944:	bf00      	nop
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	0800a1dc 	.word	0x0800a1dc
 8006950:	0800a1e4 	.word	0x0800a1e4
 8006954:	0800a1ec 	.word	0x0800a1ec

08006958 <_ZN9macro_api19MacroCommandHandlerC1EPN12hid_keyboard16HidKeyboardStateE>:
using namespace delay_util;
using namespace hid_keyboard;

namespace macro_api
{
    MacroCommandHandler::MacroCommandHandler(HidKeyboardState *keyboardState)
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
    {
        this->keyboardState = keyboardState;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	601a      	str	r2, [r3, #0]
    }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr

08006974 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv>:

    void *MacroCommandHandler::handleCommand(void *data)
    {
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
        uint8_t cmd = getNextByte(&data);
 800697e:	463b      	mov	r3, r7
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fba9 	bl	80070d8 <_ZN13memory_access11getNextByteEPPv>
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]

        if (cmd == CMD_END)
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0x20>
        {
            // End command, return null pointer
            return 0;
 8006990:	2300      	movs	r3, #0
 8006992:	e052      	b.n	8006a3a <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc6>
        }

        if (cmd & CMD_EXTENDED)
 8006994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	da0b      	bge.n	80069b4 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0x40>
        {
            // Handle extended command
            switch (cmd)
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	2b81      	cmp	r3, #129	; 0x81
 80069a0:	d106      	bne.n	80069b0 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0x3c>
            {
            case CMD_KEY_STREAM:
                keyStream(&data, cmd);
 80069a2:	7bfa      	ldrb	r2, [r7, #15]
 80069a4:	463b      	mov	r3, r7
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f908 	bl	8006bbe <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh>
                break;
 80069ae:	e043      	b.n	8006a38 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc4>
            default:
                return 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e042      	b.n	8006a3a <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc6>
            }
        }
        else
        {
            // Handle normal command
            uint8_t shortCmd = cmd >> (8 - CMD_COMMAND_NUMBER_OF_BITS);
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	091b      	lsrs	r3, r3, #4
 80069b8:	73bb      	strb	r3, [r7, #14]

            switch (shortCmd)
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	3b01      	subs	r3, #1
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d838      	bhi.n	8006a34 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc0>
 80069c2:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0x54>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	080069ef 	.word	0x080069ef
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a0b 	.word	0x08006a0b
 80069d8:	08006a19 	.word	0x08006a19
 80069dc:	08006a27 	.word	0x08006a27
            {
            case CMD_KEY_DOWN:
                keyDown(&data, cmd);
 80069e0:	7bfa      	ldrb	r2, [r7, #15]
 80069e2:	463b      	mov	r3, r7
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f82c 	bl	8006a44 <_ZN9macro_api19MacroCommandHandler7keyDownEPPvh>
                break;
 80069ec:	e024      	b.n	8006a38 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc4>
            case CMD_KEY_UP:
                keyUp(&data, cmd);
 80069ee:	7bfa      	ldrb	r2, [r7, #15]
 80069f0:	463b      	mov	r3, r7
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f856 	bl	8006aa6 <_ZN9macro_api19MacroCommandHandler5keyUpEPPvh>
                break;
 80069fa:	e01d      	b.n	8006a38 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc4>
            case CMD_KEY_PRESS:
                keyPress(&data, cmd);
 80069fc:	7bfa      	ldrb	r2, [r7, #15]
 80069fe:	463b      	mov	r3, r7
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f880 	bl	8006b08 <_ZN9macro_api19MacroCommandHandler8keyPressEPPvh>
                break;
 8006a08:	e016      	b.n	8006a38 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc4>
            case CMD_DELAY_SHORT:
                delayShort(&data, cmd);
 8006a0a:	7bfa      	ldrb	r2, [r7, #15]
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f89a 	bl	8006b4a <_ZN9macro_api19MacroCommandHandler10delayShortEPPvh>
                break;
 8006a16:	e00f      	b.n	8006a38 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc4>
            case CMD_DELAY_LONG:
                delayLong(&data, cmd);
 8006a18:	7bfa      	ldrb	r2, [r7, #15]
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f8a7 	bl	8006b72 <_ZN9macro_api19MacroCommandHandler9delayLongEPPvh>
                break;
 8006a24:	e008      	b.n	8006a38 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc4>
            case CMD_DELAY_LONG_LONG:
                delayLongLong(&data, cmd);
 8006a26:	7bfa      	ldrb	r2, [r7, #15]
 8006a28:	463b      	mov	r3, r7
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8b4 	bl	8006b9a <_ZN9macro_api19MacroCommandHandler13delayLongLongEPPvh>
                break;
 8006a32:	e001      	b.n	8006a38 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc4>
            default:
                return 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e000      	b.n	8006a3a <_ZN9macro_api19MacroCommandHandler13handleCommandEPv+0xc6>
            }
        }

        return data;
 8006a38:	683b      	ldr	r3, [r7, #0]
    }
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop

08006a44 <_ZN9macro_api19MacroCommandHandler7keyDownEPPvh>:

    void MacroCommandHandler::keyDown(void **data, uint8_t cmd)
    {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
        uint8_t includesModKey = cmd & CMD_MOD_KEY_MASK;
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	75fb      	strb	r3, [r7, #23]
        uint8_t payloadSize = cmd & CMD_PAYLOAD_SIZE_MASK;
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	75bb      	strb	r3, [r7, #22]

        while (payloadSize-- > 0)
 8006a62:	7dbb      	ldrb	r3, [r7, #22]
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	75ba      	strb	r2, [r7, #22]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bf14      	ite	ne
 8006a6c:	2301      	movne	r3, #1
 8006a6e:	2300      	moveq	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00e      	beq.n	8006a94 <_ZN9macro_api19MacroCommandHandler7keyDownEPPvh+0x50>
        {
            uint8_t hidKey = getNextByte((void **)data);
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	f000 fb2e 	bl	80070d8 <_ZN13memory_access11getNextByteEPPv>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	757b      	strb	r3, [r7, #21]

            this->keyboardState->keyDown(hidKey, includesModKey);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	7dfa      	ldrb	r2, [r7, #23]
 8006a86:	7d79      	ldrb	r1, [r7, #21]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fdfb 	bl	8006684 <_ZN12hid_keyboard16HidKeyboardState7keyDownEhh>

            includesModKey = 0; // Only first key can be mod key
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]
        while (payloadSize-- > 0)
 8006a92:	e7e6      	b.n	8006a62 <_ZN9macro_api19MacroCommandHandler7keyDownEPPvh+0x1e>
        }

        this->keyboardState->sendReport();
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff fe4e 	bl	800673a <_ZN12hid_keyboard16HidKeyboardState10sendReportEv>
    }
 8006a9e:	bf00      	nop
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <_ZN9macro_api19MacroCommandHandler5keyUpEPPvh>:

    void MacroCommandHandler::keyUp(void **data, uint8_t cmd)
    {
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b086      	sub	sp, #24
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	71fb      	strb	r3, [r7, #7]
        uint8_t includesModKey = cmd & CMD_MOD_KEY_MASK;
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	75fb      	strb	r3, [r7, #23]
        uint8_t payloadSize = cmd & CMD_PAYLOAD_SIZE_MASK;
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	75bb      	strb	r3, [r7, #22]

        while (payloadSize-- > 0)
 8006ac4:	7dbb      	ldrb	r3, [r7, #22]
 8006ac6:	1e5a      	subs	r2, r3, #1
 8006ac8:	75ba      	strb	r2, [r7, #22]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bf14      	ite	ne
 8006ace:	2301      	movne	r3, #1
 8006ad0:	2300      	moveq	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <_ZN9macro_api19MacroCommandHandler5keyUpEPPvh+0x50>
        {
            uint8_t hidKey = getNextByte(data);
 8006ad8:	68b8      	ldr	r0, [r7, #8]
 8006ada:	f000 fafd 	bl	80070d8 <_ZN13memory_access11getNextByteEPPv>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	757b      	strb	r3, [r7, #21]

            this->keyboardState->keyUp(hidKey, includesModKey);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	7dfa      	ldrb	r2, [r7, #23]
 8006ae8:	7d79      	ldrb	r1, [r7, #21]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fde7 	bl	80066be <_ZN12hid_keyboard16HidKeyboardState5keyUpEhh>

            includesModKey = 0; // Only first key can be mod key
 8006af0:	2300      	movs	r3, #0
 8006af2:	75fb      	strb	r3, [r7, #23]
        while (payloadSize-- > 0)
 8006af4:	e7e6      	b.n	8006ac4 <_ZN9macro_api19MacroCommandHandler5keyUpEPPvh+0x1e>
        }

        this->keyboardState->sendReport();
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fe1d 	bl	800673a <_ZN12hid_keyboard16HidKeyboardState10sendReportEv>
    }
 8006b00:	bf00      	nop
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <_ZN9macro_api19MacroCommandHandler8keyPressEPPvh>:

    void MacroCommandHandler::keyPress(void **data, uint8_t cmd)
    {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	4613      	mov	r3, r2
 8006b14:	71fb      	strb	r3, [r7, #7]
        // Create tmp var so we can repeat same command
        void *dataTmp = *data;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	617b      	str	r3, [r7, #20]

        this->keyDown(&dataTmp, cmd);
 8006b1c:	79fa      	ldrb	r2, [r7, #7]
 8006b1e:	f107 0314 	add.w	r3, r7, #20
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff ff8d 	bl	8006a44 <_ZN9macro_api19MacroCommandHandler7keyDownEPPvh>
        Delay::delayShort(1);
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	f000 fe3e 	bl	80077ac <_ZN10delay_util5Delay10delayShortEh>
        this->keyUp(data, cmd);
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff ffb5 	bl	8006aa6 <_ZN9macro_api19MacroCommandHandler5keyUpEPPvh>
        Delay::delayShort(1);
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	f000 fe35 	bl	80077ac <_ZN10delay_util5Delay10delayShortEh>
    }
 8006b42:	bf00      	nop
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <_ZN9macro_api19MacroCommandHandler10delayShortEPPvh>:

    void MacroCommandHandler::delayShort(void **data, uint8_t cmd)
    {
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	4613      	mov	r3, r2
 8006b56:	71fb      	strb	r3, [r7, #7]
        uint8_t ticks = getNextByte(data);
 8006b58:	68b8      	ldr	r0, [r7, #8]
 8006b5a:	f000 fabd 	bl	80070d8 <_ZN13memory_access11getNextByteEPPv>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	75fb      	strb	r3, [r7, #23]
        Delay::delayShort(ticks);
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fe21 	bl	80077ac <_ZN10delay_util5Delay10delayShortEh>
    }
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <_ZN9macro_api19MacroCommandHandler9delayLongEPPvh>:

    void MacroCommandHandler::delayLong(void **data, uint8_t cmd)
    {
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	60b9      	str	r1, [r7, #8]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	71fb      	strb	r3, [r7, #7]
        uint8_t ticks = getNextByte(data);
 8006b80:	68b8      	ldr	r0, [r7, #8]
 8006b82:	f000 faa9 	bl	80070d8 <_ZN13memory_access11getNextByteEPPv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]
        Delay::delayLong(ticks);
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fe25 	bl	80077dc <_ZN10delay_util5Delay9delayLongEh>
    }
 8006b92:	bf00      	nop
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <_ZN9macro_api19MacroCommandHandler13delayLongLongEPPvh>:

    void MacroCommandHandler::delayLongLong(void **data, uint8_t cmd)
    {
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	71fb      	strb	r3, [r7, #7]
        uint32_t ticks = getNextInt(data);
 8006ba8:	68b8      	ldr	r0, [r7, #8]
 8006baa:	f000 fab9 	bl	8007120 <_ZN13memory_access10getNextIntEPPv>
 8006bae:	6178      	str	r0, [r7, #20]
        Delay::delayLongLong(ticks);
 8006bb0:	6978      	ldr	r0, [r7, #20]
 8006bb2:	f000 fe2b 	bl	800780c <_ZN10delay_util5Delay13delayLongLongEm>
    }
 8006bb6:	bf00      	nop
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh>:

    void MacroCommandHandler::keyStream(void **data, uint8_t cmd)
    {
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b088      	sub	sp, #32
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	71fb      	strb	r3, [r7, #7]
        uint8_t ticks = getNextByte(data);
 8006bcc:	68b8      	ldr	r0, [r7, #8]
 8006bce:	f000 fa83 	bl	80070d8 <_ZN13memory_access11getNextByteEPPv>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	76fb      	strb	r3, [r7, #27]
        uint16_t size = getNextShort(data);
 8006bd6:	68b8      	ldr	r0, [r7, #8]
 8006bd8:	f000 fa90 	bl	80070fc <_ZN13memory_access12getNextShortEPPv>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	833b      	strh	r3, [r7, #24]
        uint16_t hidKeys;
        uint8_t mod;
        uint8_t key;

        // For each key -> press, sleep, release, sleep
        for (int i = 0; i < size; i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	8b3b      	ldrh	r3, [r7, #24]
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	da4d      	bge.n	8006c88 <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh+0xca>
        {
            c = getNextByte(data);
 8006bec:	68b8      	ldr	r0, [r7, #8]
 8006bee:	f000 fa73 	bl	80070d8 <_ZN13memory_access11getNextByteEPPv>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	75fb      	strb	r3, [r7, #23]
            hidKeys = AsciiToHidTranscoder::asciiToHid(c);
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fb97 	bl	800632c <_ZN11transcoders20AsciiToHidTranscoder10asciiToHidEc>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	82bb      	strh	r3, [r7, #20]

            if (!hidKeys)
 8006c02:	8abb      	ldrh	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d03a      	beq.n	8006c7e <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh+0xc0>
                continue;

            // Decode mode and key
            mod = hidKeys >> 8;
 8006c08:	8abb      	ldrh	r3, [r7, #20]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	74fb      	strb	r3, [r7, #19]
            key = hidKeys & 0xFF;
 8006c10:	8abb      	ldrh	r3, [r7, #20]
 8006c12:	74bb      	strb	r3, [r7, #18]

            // Press mod key (if present) then actual key and send report
            if (mod)
 8006c14:	7cfb      	ldrb	r3, [r7, #19]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d006      	beq.n	8006c28 <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh+0x6a>
                this->keyboardState->keyDown(mod, 1);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	7cf9      	ldrb	r1, [r7, #19]
 8006c20:	2201      	movs	r2, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fd2e 	bl	8006684 <_ZN12hid_keyboard16HidKeyboardState7keyDownEhh>
            this->keyboardState->keyDown(key, 0);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	7cb9      	ldrb	r1, [r7, #18]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fd27 	bl	8006684 <_ZN12hid_keyboard16HidKeyboardState7keyDownEhh>
            this->keyboardState->sendReport();
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fd7d 	bl	800673a <_ZN12hid_keyboard16HidKeyboardState10sendReportEv>

            Delay::delayShort(ticks);
 8006c40:	7efb      	ldrb	r3, [r7, #27]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fdb2 	bl	80077ac <_ZN10delay_util5Delay10delayShortEh>

            // Release mod key (if present) then actual key and send report
            if (mod)
 8006c48:	7cfb      	ldrb	r3, [r7, #19]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d006      	beq.n	8006c5c <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh+0x9e>
                this->keyboardState->keyUp(mod, 1);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	7cf9      	ldrb	r1, [r7, #19]
 8006c54:	2201      	movs	r2, #1
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fd31 	bl	80066be <_ZN12hid_keyboard16HidKeyboardState5keyUpEhh>
            this->keyboardState->keyUp(key, 0);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	7cb9      	ldrb	r1, [r7, #18]
 8006c62:	2200      	movs	r2, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fd2a 	bl	80066be <_ZN12hid_keyboard16HidKeyboardState5keyUpEhh>
            this->keyboardState->sendReport();
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fd63 	bl	800673a <_ZN12hid_keyboard16HidKeyboardState10sendReportEv>

            Delay::delayShort(ticks);
 8006c74:	7efb      	ldrb	r3, [r7, #27]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fd98 	bl	80077ac <_ZN10delay_util5Delay10delayShortEh>
 8006c7c:	e000      	b.n	8006c80 <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh+0xc2>
                continue;
 8006c7e:	bf00      	nop
        for (int i = 0; i < size; i++)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61fb      	str	r3, [r7, #28]
 8006c86:	e7ad      	b.n	8006be4 <_ZN9macro_api19MacroCommandHandler9keyStreamEPPvh+0x26>
        }
    }
 8006c88:	bf00      	nop
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <_ZN9macro_api13MacroExecutorC1EPKvPNS_19MacroCommandHandlerE>:
#include "../Inc/macro_finder.h"
#include "../Inc/macro_command_handler.h"

namespace macro_api
{
    MacroExecutor::MacroExecutor(const void *baseAddress, MacroCommandHandler *commandHandler)
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
    {
        this->baseAddress = baseAddress;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	601a      	str	r2, [r3, #0]
        macroMeta = (MacroMetaInfo *)this->baseAddress;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	605a      	str	r2, [r3, #4]

        this->memoryAccess = new RelativeMemoryAccess(this->baseAddress, this->macroMeta->totalSize);
 8006caa:	2008      	movs	r0, #8
 8006cac:	f002 fbc5 	bl	800943a <_Znwj>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	461c      	mov	r4, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 fa4c 	bl	800715e <_ZN13memory_access20RelativeMemoryAccessC1EPKvj>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	609c      	str	r4, [r3, #8]

        this->headerAddress = this->memoryAccess->getAddress(this->macroMeta->macroHeadersRelativeStartAddress);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f000 fa53 	bl	8007182 <_ZN13memory_access20RelativeMemoryAccess10getAddressEm>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	611a      	str	r2, [r3, #16]
        this->dataAddress = this->memoryAccess->getAddress(this->macroMeta->macroDataRelativeStartAddress);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f000 fa47 	bl	8007182 <_ZN13memory_access20RelativeMemoryAccess10getAddressEm>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	615a      	str	r2, [r3, #20]

        this->commandHandler = commandHandler;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	60da      	str	r2, [r3, #12]
    }
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd90      	pop	{r4, r7, pc}

08006d0a <_ZN9macro_api13MacroExecutor7executeEm>:

    uint8_t MacroExecutor::execute(uint32_t macroCode)
    {
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
        // todo:: write simple test, other smaller units are tested.
        MacroHeader searchMacro = {macroCode};
 8006d14:	f107 0308 	add.w	r3, r7, #8
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	605a      	str	r2, [r3, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	60bb      	str	r3, [r7, #8]

        MacroHeader *foundMacro = search(this->headerAddress, this->macroMeta->numberOfMacros, &searchMacro);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6918      	ldr	r0, [r3, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	899b      	ldrh	r3, [r3, #12]
 8006d2c:	f107 0208 	add.w	r2, r7, #8
 8006d30:	4619      	mov	r1, r3
 8006d32:	f000 f825 	bl	8006d80 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE>
 8006d36:	6138      	str	r0, [r7, #16]

        if (foundMacro != 0)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01b      	beq.n	8006d76 <_ZN9macro_api13MacroExecutor7executeEm+0x6c>
        {
            void *macroAddress = this->memoryAccess->getAddress(foundMacro->macroBeginRelativeAddress);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f000 fa1a 	bl	8007182 <_ZN13memory_access20RelativeMemoryAccess10getAddressEm>
 8006d4e:	6178      	str	r0, [r7, #20]

            while ((macroAddress = this->commandHandler->handleCommand(macroAddress)) != 0)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	6979      	ldr	r1, [r7, #20]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fe0c 	bl	8006974 <_ZN9macro_api19MacroCommandHandler13handleCommandEPv>
 8006d5c:	6178      	str	r0, [r7, #20]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <_ZN9macro_api13MacroExecutor7executeEm+0x68>
                asm("NOP");
 8006d6e:	bf00      	nop
            while ((macroAddress = this->commandHandler->handleCommand(macroAddress)) != 0)
 8006d70:	e7ee      	b.n	8006d50 <_ZN9macro_api13MacroExecutor7executeEm+0x46>

            return MacroExecutor::EXECUTED;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e000      	b.n	8006d78 <_ZN9macro_api13MacroExecutor7executeEm+0x6e>
        }

        return MacroExecutor::NOT_EXECUTED;
 8006d76:	2301      	movs	r3, #1
    }
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE>:
namespace macro_api
{
    MacroHeader *getMiddle(MacroHeader *start, MacroHeader *end);

    MacroHeader *search(void *startAddress, uint16_t numberOfItems, MacroHeader *searchItem)
    {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	817b      	strh	r3, [r7, #10]
        if (numberOfItems == 0)
 8006d8e:	897b      	ldrh	r3, [r7, #10]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x18>
            return 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e04b      	b.n	8006e30 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0xb0>

        MacroHeader *start = (MacroHeader *)startAddress;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	61fb      	str	r3, [r7, #28]
        MacroHeader *end = ((MacroHeader *)startAddress) + (numberOfItems - 1);
 8006d9c:	897b      	ldrh	r3, [r7, #10]
 8006d9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006da2:	3b01      	subs	r3, #1
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]

        // Check if first item is larger than item that we search for
        if (start->macroTriggerCode > searchItem->macroTriggerCode)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d901      	bls.n	8006dbc <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x3c>
            return 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e039      	b.n	8006e30 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0xb0>
        // Check if last item is smaller than item that we search for
        if (end->macroTriggerCode < searchItem->macroTriggerCode)
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d201      	bcs.n	8006dcc <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x4c>
            return 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e031      	b.n	8006e30 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0xb0>

        MacroHeader *current = getMiddle(start, end);
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	69f8      	ldr	r0, [r7, #28]
 8006dd0:	f000 f832 	bl	8006e38 <_ZN9macro_api9getMiddleEPNS_11MacroHeaderES1_>
 8006dd4:	6178      	str	r0, [r7, #20]
        do
        {
            if (current->macroTriggerCode == searchItem->macroTriggerCode)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d101      	bne.n	8006de6 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x66>
                return current;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	e024      	b.n	8006e30 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0xb0>
            else if (current->macroTriggerCode < searchItem->macroTriggerCode)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d208      	bcs.n	8006e04 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x84>
                current = getMiddle(start = current + 1, end);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	3308      	adds	r3, #8
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	69b9      	ldr	r1, [r7, #24]
 8006dfa:	69f8      	ldr	r0, [r7, #28]
 8006dfc:	f000 f81c 	bl	8006e38 <_ZN9macro_api9getMiddleEPNS_11MacroHeaderES1_>
 8006e00:	6178      	str	r0, [r7, #20]
 8006e02:	e007      	b.n	8006e14 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x94>
            else
                current = getMiddle(start, end = current - 1);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	3b08      	subs	r3, #8
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	69b9      	ldr	r1, [r7, #24]
 8006e0c:	69f8      	ldr	r0, [r7, #28]
 8006e0e:	f000 f813 	bl	8006e38 <_ZN9macro_api9getMiddleEPNS_11MacroHeaderES1_>
 8006e12:	6178      	str	r0, [r7, #20]
        } while (start != end);
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d000      	beq.n	8006e1e <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x9e>
        do
 8006e1c:	e7db      	b.n	8006dd6 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0x56>

        if (current->macroTriggerCode == searchItem->macroTriggerCode)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d101      	bne.n	8006e2e <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0xae>
            return current;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	e000      	b.n	8006e30 <_ZN9macro_api6searchEPvtPNS_11MacroHeaderE+0xb0>

        return 0;
 8006e2e:	2300      	movs	r3, #0
    }
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <_ZN9macro_api9getMiddleEPNS_11MacroHeaderES1_>:

    MacroHeader *getMiddle(MacroHeader *start, MacroHeader *end)
    {
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
        if (start >= end)
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d301      	bcc.n	8006e4e <_ZN9macro_api9getMiddleEPNS_11MacroHeaderES1_+0x16>
            return start;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	e00f      	b.n	8006e6e <_ZN9macro_api9getMiddleEPNS_11MacroHeaderES1_+0x36>

        uint8_t size = sizeof(MacroHeader);
 8006e4e:	2308      	movs	r3, #8
 8006e50:	73fb      	strb	r3, [r7, #15]
        uint16_t items = (end - start) + 1;
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	10db      	asrs	r3, r3, #3
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	81bb      	strh	r3, [r7, #12]
        uint16_t half = items / 2;
 8006e60:	89bb      	ldrh	r3, [r7, #12]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	817b      	strh	r3, [r7, #10]

        return start + half;
 8006e66:	897b      	ldrh	r3, [r7, #10]
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
    }
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <_ZN9macro_api9MacroUtil8compDescEPKvS2_>:
namespace macro_api
{
    MacroUtil::MacroUtil() {}

    int MacroUtil::compDesc(const void *elem1, const void *elem2)
    {
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
        int a = *(uint8_t *)elem1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	60fb      	str	r3, [r7, #12]
        int b = *(uint8_t *)elem2;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	60bb      	str	r3, [r7, #8]
        return -(a - b);
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	1ad3      	subs	r3, r2, r3
    }
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr
	...

08006ea0 <_ZN9macro_api9MacroUtil19getMacroTriggerCodeEN12keyboard_api14KeyboardReportE>:

    uint32_t MacroUtil::getMacroTriggerCode(KeyboardReport keyboardReport)
    {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t triggerCode;
        uint8_t *hash = (uint8_t *)&triggerCode;
 8006eac:	f107 0308 	add.w	r3, r7, #8
 8006eb0:	60fb      	str	r3, [r7, #12]

        qsort(keyboardReport.keys, KEYBOARD_REPORT_KEY_NUM, sizeof(uint8_t), MacroUtil::compDesc);
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	1cd8      	adds	r0, r3, #3
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <_ZN9macro_api9MacroUtil19getMacroTriggerCodeEN12keyboard_api14KeyboardReportE+0x48>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2105      	movs	r1, #5
 8006ebc:	f002 fc3a 	bl	8009734 <qsort>

        hash[0] = keyboardReport.keys[0];
 8006ec0:	78fa      	ldrb	r2, [r7, #3]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	701a      	strb	r2, [r3, #0]
        hash[1] = keyboardReport.keys[1];
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	793a      	ldrb	r2, [r7, #4]
 8006ecc:	701a      	strb	r2, [r3, #0]
        hash[2] = keyboardReport.keys[2];
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3302      	adds	r3, #2
 8006ed2:	797a      	ldrb	r2, [r7, #5]
 8006ed4:	701a      	strb	r2, [r3, #0]
        hash[3] = keyboardReport.modKeys;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3303      	adds	r3, #3
 8006eda:	787a      	ldrb	r2, [r7, #1]
 8006edc:	701a      	strb	r2, [r3, #0]

        return triggerCode;
 8006ede:	68bb      	ldr	r3, [r7, #8]
    }
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	08006e79 	.word	0x08006e79

08006eec <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE>:
    MacroExecutor *MacroKeyboard::macroExecutor = 0;

    MacroKeyboard::MacroKeyboard() {}

    void MacroKeyboard::init(MacroKeyboardConfig *macroKeyboardConfig)
    {
 8006eec:	b590      	push	{r4, r7, lr}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
        // Save macro keyboard config
        MacroKeyboard::macroKeyboardConfig = macroKeyboardConfig;
 8006ef4:	4a3f      	ldr	r2, [pc, #252]	; (8006ff4 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x108>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6013      	str	r3, [r2, #0]

        // Init delay
        Delay::init(macroKeyboardConfig->delayMethod);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fc46 	bl	8007790 <_ZN10delay_util5Delay4initEPFvmE>
        Ps2HidMap::init();
 8006f04:	f000 fa22 	bl	800734c <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv>

        // Register receive callback
        MacroKeyboard::receivePs2Data = &Ps2KeyboardReader::receivePs2Date;
 8006f08:	4b3b      	ldr	r3, [pc, #236]	; (8006ff8 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x10c>)
 8006f0a:	4a3c      	ldr	r2, [pc, #240]	; (8006ffc <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x110>)
 8006f0c:	601a      	str	r2, [r3, #0]

        // Register Ps2InputKeyboard state
        MacroKeyboard::inputKeyboardState = new HidKeyboardState(255, 0);
 8006f0e:	200c      	movs	r0, #12
 8006f10:	f002 fa93 	bl	800943a <_Znwj>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461c      	mov	r4, r3
 8006f18:	2200      	movs	r2, #0
 8006f1a:	21ff      	movs	r1, #255	; 0xff
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff fb99 	bl	8006654 <_ZN12hid_keyboard16HidKeyboardStateC1EhPFvPN12keyboard_api14KeyboardReportEE>
 8006f22:	4b37      	ldr	r3, [pc, #220]	; (8007000 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x114>)
 8006f24:	601c      	str	r4, [r3, #0]

        // Create MacroExecutor for executing macros
        static HidKeyboardState *macroOutKeyboardState = new HidKeyboardState(macroKeyboardConfig->reportId, macroKeyboardConfig->sendReportMethod);
 8006f26:	4b37      	ldr	r3, [pc, #220]	; (8007004 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x118>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f3bf 8f5b 	dmb	ish
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	2301      	moveq	r3, #1
 8006f3a:	2300      	movne	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01c      	beq.n	8006f7c <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x90>
 8006f42:	4830      	ldr	r0, [pc, #192]	; (8007004 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x118>)
 8006f44:	f002 fa6a 	bl	800941c <__cxa_guard_acquire>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d011      	beq.n	8006f7c <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x90>
 8006f58:	200c      	movs	r0, #12
 8006f5a:	f002 fa6e 	bl	800943a <_Znwj>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	461c      	mov	r4, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7819      	ldrb	r1, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f7ff fb71 	bl	8006654 <_ZN12hid_keyboard16HidKeyboardStateC1EhPFvPN12keyboard_api14KeyboardReportEE>
 8006f72:	4b25      	ldr	r3, [pc, #148]	; (8007008 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x11c>)
 8006f74:	601c      	str	r4, [r3, #0]
 8006f76:	4823      	ldr	r0, [pc, #140]	; (8007004 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x118>)
 8006f78:	f002 fa5c 	bl	8009434 <__cxa_guard_release>
        static MacroCommandHandler *macroCommandHandler = new MacroCommandHandler(macroOutKeyboardState);
 8006f7c:	4b23      	ldr	r3, [pc, #140]	; (800700c <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x120>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f3bf 8f5b 	dmb	ish
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01a      	beq.n	8006fce <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0xe2>
 8006f98:	481c      	ldr	r0, [pc, #112]	; (800700c <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x120>)
 8006f9a:	f002 fa3f 	bl	800941c <__cxa_guard_acquire>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00f      	beq.n	8006fce <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0xe2>
 8006fae:	2004      	movs	r0, #4
 8006fb0:	f002 fa43 	bl	800943a <_Znwj>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	461c      	mov	r4, r3
 8006fb8:	4b13      	ldr	r3, [pc, #76]	; (8007008 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x11c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7ff fcca 	bl	8006958 <_ZN9macro_api19MacroCommandHandlerC1EPN12hid_keyboard16HidKeyboardStateE>
 8006fc4:	4b12      	ldr	r3, [pc, #72]	; (8007010 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x124>)
 8006fc6:	601c      	str	r4, [r3, #0]
 8006fc8:	4810      	ldr	r0, [pc, #64]	; (800700c <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x120>)
 8006fca:	f002 fa33 	bl	8009434 <__cxa_guard_release>
        MacroKeyboard::macroExecutor = new MacroExecutor(macroKeyboardConfig->macroDataAddress, macroCommandHandler);
 8006fce:	2018      	movs	r0, #24
 8006fd0:	f002 fa33 	bl	800943a <_Znwj>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461c      	mov	r4, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4a0c      	ldr	r2, [pc, #48]	; (8007010 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x124>)
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7ff fe54 	bl	8006c90 <_ZN9macro_api13MacroExecutorC1EPKvPNS_19MacroCommandHandlerE>
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <_ZN14macro_keyboard13MacroKeyboard4initEPNS_19MacroKeyboardConfigE+0x128>)
 8006fea:	601c      	str	r4, [r3, #0]
    }
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd90      	pop	{r4, r7, pc}
 8006ff4:	200003ac 	.word	0x200003ac
 8006ff8:	200003b0 	.word	0x200003b0
 8006ffc:	080071e1 	.word	0x080071e1
 8007000:	200003b8 	.word	0x200003b8
 8007004:	200003c4 	.word	0x200003c4
 8007008:	200003c0 	.word	0x200003c0
 800700c:	200003cc 	.word	0x200003cc
 8007010:	200003c8 	.word	0x200003c8
 8007014:	200003bc 	.word	0x200003bc

08007018 <_ZN14macro_keyboard13MacroKeyboard3runEv>:

    void MacroKeyboard::run()
    {
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	; 0x28
 800701c:	af00      	add	r7, sp, #0
        Ps2Key ps2Key;
        HidKey hidKey;
        uint32_t macroTriggerCode;
        uint8_t macroExecutinStatus;

        if (Ps2KeyboardReader::keyAvailable())
 800701e:	f000 f8f5 	bl	800720c <_ZN12ps2_keyboard17Ps2KeyboardReader12keyAvailableEv>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d04d      	beq.n	80070c4 <_ZN14macro_keyboard13MacroKeyboard3runEv+0xac>
        {
            // Read key from PS2 keyboard
            ps2Key = Ps2KeyboardReader::getNextKey();
 8007028:	463b      	mov	r3, r7
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f902 	bl	8007234 <_ZN12ps2_keyboard17Ps2KeyboardReader10getNextKeyEv>
 8007030:	f107 0310 	add.w	r3, r7, #16
 8007034:	463a      	mov	r2, r7
 8007036:	6810      	ldr	r0, [r2, #0]
 8007038:	6018      	str	r0, [r3, #0]
 800703a:	8892      	ldrh	r2, [r2, #4]
 800703c:	809a      	strh	r2, [r3, #4]
            if (ps2Key.error)
 800703e:	7d7b      	ldrb	r3, [r7, #21]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d13e      	bne.n	80070c2 <_ZN14macro_keyboard13MacroKeyboard3runEv+0xaa>
                return;

            // Translate ps2 key to hid key
            hidKey = Ps2ToHidTranscoder::transcode(ps2Key);
 8007044:	f107 0310 	add.w	r3, r7, #16
 8007048:	e893 0003 	ldmia.w	r3, {r0, r1}
 800704c:	f000 fb1c 	bl	8007688 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE>
 8007050:	4603      	mov	r3, r0
 8007052:	60fb      	str	r3, [r7, #12]

            // Check state of the new key, depends for how to handle macro
            if (hidKey.released && keyNotHandled)
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d026      	beq.n	80070a8 <_ZN14macro_keyboard13MacroKeyboard3runEv+0x90>
 800705a:	4b1c      	ldr	r3, [pc, #112]	; (80070cc <_ZN14macro_keyboard13MacroKeyboard3runEv+0xb4>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d022      	beq.n	80070a8 <_ZN14macro_keyboard13MacroKeyboard3runEv+0x90>
            {
                // Key up event, get trigger code from input keyboard and try find macro
                macroTriggerCode = MacroUtil::getMacroTriggerCode(MacroKeyboard::inputKeyboardState->getKeyboardReport());
 8007062:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <_ZN14macro_keyboard13MacroKeyboard3runEv+0xb8>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	f107 0318 	add.w	r3, r7, #24
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fb7f 	bl	8006770 <_ZN12hid_keyboard16HidKeyboardState17getKeyboardReportEv>
 8007072:	f107 0318 	add.w	r3, r7, #24
 8007076:	e893 0003 	ldmia.w	r3, {r0, r1}
 800707a:	f7ff ff11 	bl	8006ea0 <_ZN9macro_api9MacroUtil19getMacroTriggerCodeEN12keyboard_api14KeyboardReportE>
 800707e:	6278      	str	r0, [r7, #36]	; 0x24

                macroExecutinStatus = MacroKeyboard::macroExecutor->execute(macroTriggerCode);
 8007080:	4b14      	ldr	r3, [pc, #80]	; (80070d4 <_ZN14macro_keyboard13MacroKeyboard3runEv+0xbc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fe3f 	bl	8006d0a <_ZN9macro_api13MacroExecutor7executeEm>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                keyNotHandled = macroExecutinStatus != MacroExecutor::EXECUTED;
 8007092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007096:	2b00      	cmp	r3, #0
 8007098:	bf14      	ite	ne
 800709a:	2301      	movne	r3, #1
 800709c:	2300      	moveq	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <_ZN14macro_keyboard13MacroKeyboard3runEv+0xb4>)
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	e005      	b.n	80070b4 <_ZN14macro_keyboard13MacroKeyboard3runEv+0x9c>
            }
            else if (!hidKey.released)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <_ZN14macro_keyboard13MacroKeyboard3runEv+0x9c>
            {
                // Key down event, register that we gonna need to handle macro
                keyNotHandled = 1;
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <_ZN14macro_keyboard13MacroKeyboard3runEv+0xb4>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	701a      	strb	r2, [r3, #0]
            }

            // Register key
            MacroKeyboard::inputKeyboardState->handleKey(hidKey);
 80070b4:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <_ZN14macro_keyboard13MacroKeyboard3runEv+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fb1c 	bl	80066f8 <_ZN12hid_keyboard16HidKeyboardState9handleKeyENS_6HidKeyE>
 80070c0:	e000      	b.n	80070c4 <_ZN14macro_keyboard13MacroKeyboard3runEv+0xac>
                return;
 80070c2:	bf00      	nop
        }
    }
 80070c4:	3728      	adds	r7, #40	; 0x28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	200003b4 	.word	0x200003b4
 80070d0:	200003b8 	.word	0x200003b8
 80070d4:	200003bc 	.word	0x200003bc

080070d8 <_ZN13memory_access11getNextByteEPPv>:
#include "../Inc/memory_reader.h"

namespace memory_access
{
    uint8_t getNextByte(void **dataAddr)
    {
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
        uint8_t *addr = (uint8_t *)*dataAddr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]
        *dataAddr = addr + 1;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
        return *addr;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	781b      	ldrb	r3, [r3, #0]
    }
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr

080070fc <_ZN13memory_access12getNextShortEPPv>:

    uint16_t getNextShort(void **dataAddr)
    {
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
        uint16_t *addr = (uint16_t *)*dataAddr;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60fb      	str	r3, [r7, #12]
        *dataAddr = addr + 1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1c9a      	adds	r2, r3, #2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
        return *addr;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	881b      	ldrh	r3, [r3, #0]
    }
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <_ZN13memory_access10getNextIntEPPv>:

    uint32_t getNextInt(void **dataAddr)
    {
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
        uint32_t *addr = (uint32_t *)*dataAddr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
        *dataAddr = addr + 1;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	601a      	str	r2, [r3, #0]
        return *addr;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
    }
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <_ZN13memory_access14getNextAddressEPKvj>:

    void *getNextAddress(const void *dataAddr, size_t size)
    {
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
        return (uint8_t *)dataAddr + size;
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	4413      	add	r3, r2
    }
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <_ZN13memory_access20RelativeMemoryAccessC1EPKvj>:
#include "../Inc/relative_memory_access.h"
#include "../Inc/memory_reader.h"

namespace memory_access
{
    RelativeMemoryAccess::RelativeMemoryAccess(const void *baseAddress, size_t size)
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
    {
        this->baseAddress = baseAddress;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	601a      	str	r2, [r3, #0]
        this->size = size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]
    }
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr

08007182 <_ZN13memory_access20RelativeMemoryAccess10getAddressEm>:

    void *RelativeMemoryAccess::getAddress(uint32_t relativeAddress)
    {
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
        if (relativeAddress > this->size)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d901      	bls.n	800719a <_ZN13memory_access20RelativeMemoryAccess10getAddressEm+0x18>
            return 0;
 8007196:	2300      	movs	r3, #0
 8007198:	e007      	b.n	80071aa <_ZN13memory_access20RelativeMemoryAccess10getAddressEm+0x28>

        return memory_access::getNextAddress(this->baseAddress, relativeAddress);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ffcf 	bl	8007144 <_ZN13memory_access14getNextAddressEPKvj>
 80071a6:	4603      	mov	r3, r0
 80071a8:	bf00      	nop
    }
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <_ZN12ps2_keyboard23_incrementBufferPointerEPh>:
    uint8_t Ps2KeyboardReader::ps2InputBuffer[PS2_KEYBOARD_INPUT_BUFFER_SIZE] = {0};
    uint8_t Ps2KeyboardReader::ps2InputHead = 0;
    uint8_t Ps2KeyboardReader::ps2InputTail = 0;

    void _incrementBufferPointer(uint8_t *bufferPointer)
    {
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
        (*bufferPointer)++;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	701a      	strb	r2, [r3, #0]
        if (*bufferPointer >= PS2_KEYBOARD_INPUT_BUFFER_SIZE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b3f      	cmp	r3, #63	; 0x3f
 80071cc:	d902      	bls.n	80071d4 <_ZN12ps2_keyboard23_incrementBufferPointerEPh+0x22>
            *bufferPointer = 0;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	701a      	strb	r2, [r3, #0]
    }
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr
	...

080071e0 <_ZN12ps2_keyboard17Ps2KeyboardReader14receivePs2DateEh>:

    void Ps2KeyboardReader::receivePs2Date(uint8_t data)
    {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
        ps2InputBuffer[ps2InputHead] = data;
 80071ea:	4b06      	ldr	r3, [pc, #24]	; (8007204 <_ZN12ps2_keyboard17Ps2KeyboardReader14receivePs2DateEh+0x24>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4a05      	ldr	r2, [pc, #20]	; (8007208 <_ZN12ps2_keyboard17Ps2KeyboardReader14receivePs2DateEh+0x28>)
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	5453      	strb	r3, [r2, r1]

        _incrementBufferPointer(&ps2InputHead);
 80071f6:	4803      	ldr	r0, [pc, #12]	; (8007204 <_ZN12ps2_keyboard17Ps2KeyboardReader14receivePs2DateEh+0x24>)
 80071f8:	f7ff ffdb 	bl	80071b2 <_ZN12ps2_keyboard23_incrementBufferPointerEPh>
    }
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000410 	.word	0x20000410
 8007208:	200003d0 	.word	0x200003d0

0800720c <_ZN12ps2_keyboard17Ps2KeyboardReader12keyAvailableEv>:

    bool Ps2KeyboardReader::keyAvailable()
    {
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
        return ps2InputTail != ps2InputHead;
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <_ZN12ps2_keyboard17Ps2KeyboardReader12keyAvailableEv+0x20>)
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <_ZN12ps2_keyboard17Ps2KeyboardReader12keyAvailableEv+0x24>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
    }
 8007222:	4618      	mov	r0, r3
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000411 	.word	0x20000411
 8007230:	20000410 	.word	0x20000410

08007234 <_ZN12ps2_keyboard17Ps2KeyboardReader10getNextKeyEv>:

    Ps2Key Ps2KeyboardReader::getNextKey()
    {
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
        uint8_t nextByte;
        Ps2Key tempKey = {0};
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	461a      	mov	r2, r3
 8007240:	2300      	movs	r3, #0
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	8093      	strh	r3, [r2, #4]

        while (!tempKey.done)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	791b      	ldrb	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <_ZN12ps2_keyboard17Ps2KeyboardReader10getNextKeyEv+0x2e>
        {
            nextByte = _readNextByte();
 800724e:	f000 f80d 	bl	800726c <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv>
 8007252:	4603      	mov	r3, r0
 8007254:	73fb      	strb	r3, [r7, #15]
            _decodeByte(nextByte, &tempKey);
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f826 	bl	80072ac <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE>
        while (!tempKey.done)
 8007260:	e7f1      	b.n	8007246 <_ZN12ps2_keyboard17Ps2KeyboardReader10getNextKeyEv+0x12>
        }

        return tempKey;
 8007262:	bf00      	nop
    }
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv>:

    uint8_t Ps2KeyboardReader::_readNextByte()
    {
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
        uint8_t inputByte;

        while (ps2InputHead == ps2InputTail)
 8007272:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv+0x34>)
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv+0x38>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d101      	bne.n	8007282 <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv+0x16>
            asm("NOP");
 800727e:	bf00      	nop
        while (ps2InputHead == ps2InputTail)
 8007280:	e7f7      	b.n	8007272 <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv+0x6>

        inputByte = ps2InputBuffer[ps2InputTail];
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv+0x38>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv+0x3c>)
 800728a:	5c9b      	ldrb	r3, [r3, r2]
 800728c:	71fb      	strb	r3, [r7, #7]

        _incrementBufferPointer(&ps2InputTail);
 800728e:	4805      	ldr	r0, [pc, #20]	; (80072a4 <_ZN12ps2_keyboard17Ps2KeyboardReader13_readNextByteEv+0x38>)
 8007290:	f7ff ff8f 	bl	80071b2 <_ZN12ps2_keyboard23_incrementBufferPointerEPh>

        return inputByte;
 8007294:	79fb      	ldrb	r3, [r7, #7]
    }
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000410 	.word	0x20000410
 80072a4:	20000411 	.word	0x20000411
 80072a8:	200003d0 	.word	0x200003d0

080072ac <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE>:
    void Ps2KeyboardReader::_decodeByte(uint8_t byte, Ps2Key *key)
    {
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	6039      	str	r1, [r7, #0]
 80072b6:	71fb      	strb	r3, [r7, #7]
        switch (byte)
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	2bf0      	cmp	r3, #240	; 0xf0
 80072bc:	d00a      	beq.n	80072d4 <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x28>
 80072be:	2bf0      	cmp	r3, #240	; 0xf0
 80072c0:	dc10      	bgt.n	80072e4 <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x38>
 80072c2:	2be0      	cmp	r3, #224	; 0xe0
 80072c4:	d002      	beq.n	80072cc <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x20>
 80072c6:	2be1      	cmp	r3, #225	; 0xe1
 80072c8:	d008      	beq.n	80072dc <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x30>
 80072ca:	e00b      	b.n	80072e4 <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x38>
        {
        case PS2_KEY_EXTENDED:
            key->ps2Extended = PS2_KEY_EXTENDED;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	22e0      	movs	r2, #224	; 0xe0
 80072d0:	701a      	strb	r2, [r3, #0]
            break;
 80072d2:	e00e      	b.n	80072f2 <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x46>
        case PS2_KEY_REALESED:
            key->released = PS2_KEY_REALESED;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	22f0      	movs	r2, #240	; 0xf0
 80072d8:	70da      	strb	r2, [r3, #3]
            break;
 80072da:	e00a      	b.n	80072f2 <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x46>
        case PS2_KEY_SPECIAL:
            key->ps2Special = PS2_KEY_SPECIAL;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	22e1      	movs	r2, #225	; 0xe1
 80072e0:	705a      	strb	r2, [r3, #1]
            break;
 80072e2:	e006      	b.n	80072f2 <_ZN12ps2_keyboard17Ps2KeyboardReader11_decodeByteEhPNS_6Ps2KeyE+0x46>
        default:
            key->ps2Code = byte;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	79fa      	ldrb	r2, [r7, #7]
 80072e8:	709a      	strb	r2, [r3, #2]
            key->done = 1;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2201      	movs	r2, #1
 80072ee:	711a      	strb	r2, [r3, #4]
        }
    }
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <_ZN21ps2_to_hid_transcoder9Ps2HidMap6getKeyEh>:
    uint8_t Ps2HidMap::ps2ToHidLookupMap[Ps2HidMap::PS2_HID_MAP_SIZE] = {0};
    uint8_t Ps2HidMap::ps2ExtToHidLookupMap[Ps2HidMap::PS2_EXT_HID_MAP_SIZE] = {0};
    uint8_t Ps2HidMap::initDone = 0;

    uint8_t Ps2HidMap::getKey(uint8_t ps2ScanCode)
    {
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	71fb      	strb	r3, [r7, #7]
        if (ps2ScanCode >= PS2_HID_MAP_SIZE)
 8007306:	79fb      	ldrb	r3, [r7, #7]
 8007308:	2be6      	cmp	r3, #230	; 0xe6
 800730a:	d901      	bls.n	8007310 <_ZN21ps2_to_hid_transcoder9Ps2HidMap6getKeyEh+0x14>
            return 0;
 800730c:	2300      	movs	r3, #0
 800730e:	e002      	b.n	8007316 <_ZN21ps2_to_hid_transcoder9Ps2HidMap6getKeyEh+0x1a>

        return ps2ToHidLookupMap[ps2ScanCode];
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	4a03      	ldr	r2, [pc, #12]	; (8007320 <_ZN21ps2_to_hid_transcoder9Ps2HidMap6getKeyEh+0x24>)
 8007314:	5cd3      	ldrb	r3, [r2, r3]
    }
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr
 8007320:	20000414 	.word	0x20000414

08007324 <_ZN21ps2_to_hid_transcoder9Ps2HidMap14getExtendedKeyEh>:
    uint8_t Ps2HidMap::getExtendedKey(uint8_t ps2ScanCode)
    {
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
        if (ps2ScanCode >= PS2_EXT_HID_MAP_SIZE)
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	2be0      	cmp	r3, #224	; 0xe0
 8007332:	d901      	bls.n	8007338 <_ZN21ps2_to_hid_transcoder9Ps2HidMap14getExtendedKeyEh+0x14>
            return 0;
 8007334:	2300      	movs	r3, #0
 8007336:	e002      	b.n	800733e <_ZN21ps2_to_hid_transcoder9Ps2HidMap14getExtendedKeyEh+0x1a>

        return ps2ExtToHidLookupMap[ps2ScanCode];
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	4a03      	ldr	r2, [pc, #12]	; (8007348 <_ZN21ps2_to_hid_transcoder9Ps2HidMap14getExtendedKeyEh+0x24>)
 800733c:	5cd3      	ldrb	r3, [r2, r3]
    }
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	200004fc 	.word	0x200004fc

0800734c <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv>:

    void Ps2HidMap::init()
    {
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
        if (initDone)
 8007350:	4bc7      	ldr	r3, [pc, #796]	; (8007670 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x324>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 8192 	bne.w	800767e <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x332>
            return;

        /// PS2 KEY CODES init
        ps2ToHidLookupMap[PS2_KEY_MOD_LCTRL] = HID_KEY_LEFTCTRL;
 800735a:	4bc6      	ldr	r3, [pc, #792]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800735c:	22e0      	movs	r2, #224	; 0xe0
 800735e:	751a      	strb	r2, [r3, #20]
        ps2ToHidLookupMap[PS2_KEY_MOD_LSHIFT] = HID_KEY_LEFTSHIFT;
 8007360:	4bc4      	ldr	r3, [pc, #784]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007362:	22e1      	movs	r2, #225	; 0xe1
 8007364:	749a      	strb	r2, [r3, #18]
        ps2ToHidLookupMap[PS2_KEY_MOD_LALT] = HID_KEY_LEFTALT;
 8007366:	4bc3      	ldr	r3, [pc, #780]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007368:	22e2      	movs	r2, #226	; 0xe2
 800736a:	745a      	strb	r2, [r3, #17]
        ps2ToHidLookupMap[PS2_KEY_MOD_RSHIFT] = HID_KEY_RIGHTSHIFT;
 800736c:	4bc1      	ldr	r3, [pc, #772]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800736e:	22e5      	movs	r2, #229	; 0xe5
 8007370:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        ps2ToHidLookupMap[PS2_KEY_A] = HID_KEY_A;
 8007374:	4bbf      	ldr	r3, [pc, #764]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007376:	2204      	movs	r2, #4
 8007378:	771a      	strb	r2, [r3, #28]
        ps2ToHidLookupMap[PS2_KEY_B] = HID_KEY_B;
 800737a:	4bbe      	ldr	r3, [pc, #760]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800737c:	2205      	movs	r2, #5
 800737e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        ps2ToHidLookupMap[PS2_KEY_C] = HID_KEY_C;
 8007382:	4bbc      	ldr	r3, [pc, #752]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007384:	2206      	movs	r2, #6
 8007386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        ps2ToHidLookupMap[PS2_KEY_D] = HID_KEY_D;
 800738a:	4bba      	ldr	r3, [pc, #744]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800738c:	2207      	movs	r2, #7
 800738e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        ps2ToHidLookupMap[PS2_KEY_E] = HID_KEY_E;
 8007392:	4bb8      	ldr	r3, [pc, #736]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007394:	2208      	movs	r2, #8
 8007396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        ps2ToHidLookupMap[PS2_KEY_F] = HID_KEY_F;
 800739a:	4bb6      	ldr	r3, [pc, #728]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800739c:	2209      	movs	r2, #9
 800739e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        ps2ToHidLookupMap[PS2_KEY_G] = HID_KEY_G;
 80073a2:	4bb4      	ldr	r3, [pc, #720]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073a4:	220a      	movs	r2, #10
 80073a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ps2ToHidLookupMap[PS2_KEY_H] = HID_KEY_H;
 80073aa:	4bb2      	ldr	r3, [pc, #712]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073ac:	220b      	movs	r2, #11
 80073ae:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        ps2ToHidLookupMap[PS2_KEY_I] = HID_KEY_I;
 80073b2:	4bb0      	ldr	r3, [pc, #704]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073b4:	220c      	movs	r2, #12
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
        ps2ToHidLookupMap[PS2_KEY_J] = HID_KEY_J;
 80073ba:	4bae      	ldr	r3, [pc, #696]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073bc:	220d      	movs	r2, #13
 80073be:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
        ps2ToHidLookupMap[PS2_KEY_K] = HID_KEY_K;
 80073c2:	4bac      	ldr	r3, [pc, #688]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073c4:	220e      	movs	r2, #14
 80073c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        ps2ToHidLookupMap[PS2_KEY_L] = HID_KEY_L;
 80073ca:	4baa      	ldr	r3, [pc, #680]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073cc:	220f      	movs	r2, #15
 80073ce:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps2ToHidLookupMap[PS2_KEY_M] = HID_KEY_M;
 80073d2:	4ba8      	ldr	r3, [pc, #672]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073d4:	2210      	movs	r2, #16
 80073d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        ps2ToHidLookupMap[PS2_KEY_N] = HID_KEY_N;
 80073da:	4ba6      	ldr	r3, [pc, #664]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073dc:	2211      	movs	r2, #17
 80073de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        ps2ToHidLookupMap[PS2_KEY_O] = HID_KEY_O;
 80073e2:	4ba4      	ldr	r3, [pc, #656]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073e4:	2212      	movs	r2, #18
 80073e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        ps2ToHidLookupMap[PS2_KEY_P] = HID_KEY_P;
 80073ea:	4ba2      	ldr	r3, [pc, #648]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073ec:	2213      	movs	r2, #19
 80073ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        ps2ToHidLookupMap[PS2_KEY_Q] = HID_KEY_Q;
 80073f2:	4ba0      	ldr	r3, [pc, #640]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073f4:	2214      	movs	r2, #20
 80073f6:	755a      	strb	r2, [r3, #21]
        ps2ToHidLookupMap[PS2_KEY_R] = HID_KEY_R;
 80073f8:	4b9e      	ldr	r3, [pc, #632]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80073fa:	2215      	movs	r2, #21
 80073fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        ps2ToHidLookupMap[PS2_KEY_S] = HID_KEY_S;
 8007400:	4b9c      	ldr	r3, [pc, #624]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007402:	2216      	movs	r2, #22
 8007404:	76da      	strb	r2, [r3, #27]
        ps2ToHidLookupMap[PS2_KEY_T] = HID_KEY_T;
 8007406:	4b9b      	ldr	r3, [pc, #620]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007408:	2217      	movs	r2, #23
 800740a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        ps2ToHidLookupMap[PS2_KEY_U] = HID_KEY_U;
 800740e:	4b99      	ldr	r3, [pc, #612]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007410:	2218      	movs	r2, #24
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        ps2ToHidLookupMap[PS2_KEY_V] = HID_KEY_V;
 8007416:	4b97      	ldr	r3, [pc, #604]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007418:	2219      	movs	r2, #25
 800741a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        ps2ToHidLookupMap[PS2_KEY_W] = HID_KEY_W;
 800741e:	4b95      	ldr	r3, [pc, #596]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007420:	221a      	movs	r2, #26
 8007422:	775a      	strb	r2, [r3, #29]
        ps2ToHidLookupMap[PS2_KEY_X] = HID_KEY_X;
 8007424:	4b93      	ldr	r3, [pc, #588]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007426:	221b      	movs	r2, #27
 8007428:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        ps2ToHidLookupMap[PS2_KEY_Y] = HID_KEY_Y;
 800742c:	4b91      	ldr	r3, [pc, #580]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800742e:	221c      	movs	r2, #28
 8007430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ps2ToHidLookupMap[PS2_KEY_Z] = HID_KEY_Z;
 8007434:	4b8f      	ldr	r3, [pc, #572]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007436:	221d      	movs	r2, #29
 8007438:	769a      	strb	r2, [r3, #26]

        ps2ToHidLookupMap[PS2_KEY_1] = HID_KEY_1;
 800743a:	4b8e      	ldr	r3, [pc, #568]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800743c:	221e      	movs	r2, #30
 800743e:	759a      	strb	r2, [r3, #22]
        ps2ToHidLookupMap[PS2_KEY_2] = HID_KEY_2;
 8007440:	4b8c      	ldr	r3, [pc, #560]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007442:	221f      	movs	r2, #31
 8007444:	779a      	strb	r2, [r3, #30]
        ps2ToHidLookupMap[PS2_KEY_3] = HID_KEY_3;
 8007446:	4b8b      	ldr	r3, [pc, #556]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        ps2ToHidLookupMap[PS2_KEY_4] = HID_KEY_4;
 800744e:	4b89      	ldr	r3, [pc, #548]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007450:	2221      	movs	r2, #33	; 0x21
 8007452:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ps2ToHidLookupMap[PS2_KEY_6] = HID_KEY_6;
 8007456:	4b87      	ldr	r3, [pc, #540]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007458:	2223      	movs	r2, #35	; 0x23
 800745a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ps2ToHidLookupMap[PS2_KEY_6] = HID_KEY_6;
 800745e:	4b85      	ldr	r3, [pc, #532]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007460:	2223      	movs	r2, #35	; 0x23
 8007462:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ps2ToHidLookupMap[PS2_KEY_7] = HID_KEY_7;
 8007466:	4b83      	ldr	r3, [pc, #524]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007468:	2224      	movs	r2, #36	; 0x24
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        ps2ToHidLookupMap[PS2_KEY_8] = HID_KEY_8;
 800746e:	4b81      	ldr	r3, [pc, #516]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007470:	2225      	movs	r2, #37	; 0x25
 8007472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        ps2ToHidLookupMap[PS2_KEY_9] = HID_KEY_9;
 8007476:	4b7f      	ldr	r3, [pc, #508]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007478:	2226      	movs	r2, #38	; 0x26
 800747a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps2ToHidLookupMap[PS2_KEY_0] = HID_KEY_0;
 800747e:	4b7d      	ldr	r3, [pc, #500]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007480:	2227      	movs	r2, #39	; 0x27
 8007482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        ps2ToHidLookupMap[PS2_KEY_ENTER] = HID_KEY_ENTER;
 8007486:	4b7b      	ldr	r3, [pc, #492]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007488:	2228      	movs	r2, #40	; 0x28
 800748a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        ps2ToHidLookupMap[PS2_KEY_ESC] = HID_KEY_ESC;
 800748e:	4b79      	ldr	r3, [pc, #484]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007490:	2229      	movs	r2, #41	; 0x29
 8007492:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
        ps2ToHidLookupMap[PS2_KEY_BACKSPACE] = HID_KEY_BACKSPACE;
 8007496:	4b77      	ldr	r3, [pc, #476]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007498:	222a      	movs	r2, #42	; 0x2a
 800749a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
        ps2ToHidLookupMap[PS2_KEY_TAB] = HID_KEY_TAB;
 800749e:	4b75      	ldr	r3, [pc, #468]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074a0:	222b      	movs	r2, #43	; 0x2b
 80074a2:	735a      	strb	r2, [r3, #13]
        ps2ToHidLookupMap[PS2_KEY_SPACE] = HID_KEY_SPACE;
 80074a4:	4b73      	ldr	r3, [pc, #460]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074a6:	222c      	movs	r2, #44	; 0x2c
 80074a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        ps2ToHidLookupMap[PS2_KEY_MINUS] = HID_KEY_MINUS;
 80074ac:	4b71      	ldr	r3, [pc, #452]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074ae:	222d      	movs	r2, #45	; 0x2d
 80074b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        ps2ToHidLookupMap[PS2_KEY_EQUAL] = HID_KEY_EQUAL;
 80074b4:	4b6f      	ldr	r3, [pc, #444]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074b6:	222e      	movs	r2, #46	; 0x2e
 80074b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        ps2ToHidLookupMap[PS2_KEY_LEFTBRACE] = HID_KEY_LEFTBRACE;
 80074bc:	4b6d      	ldr	r3, [pc, #436]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074be:	222f      	movs	r2, #47	; 0x2f
 80074c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        ps2ToHidLookupMap[PS2_KEY_RIGHTBRACE] = HID_KEY_RIGHTBRACE;
 80074c4:	4b6b      	ldr	r3, [pc, #428]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074c6:	2230      	movs	r2, #48	; 0x30
 80074c8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        ps2ToHidLookupMap[PS2_KEY_BACKSLASH] = HID_KEY_BACKSLASH;
 80074cc:	4b69      	ldr	r3, [pc, #420]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074ce:	2231      	movs	r2, #49	; 0x31
 80074d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        ps2ToHidLookupMap[PS2_KEY_LESSTHAN] = HID_KEY_HASHTILDE;
 80074d4:	4b67      	ldr	r3, [pc, #412]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074d6:	2232      	movs	r2, #50	; 0x32
 80074d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        ps2ToHidLookupMap[PS2_KEY_SEMICOLON] = HID_KEY_SEMICOLON;
 80074dc:	4b65      	ldr	r3, [pc, #404]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074de:	2233      	movs	r2, #51	; 0x33
 80074e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        ps2ToHidLookupMap[PS2_KEY_APOSTROPHE] = HID_KEY_APOSTROPHE;
 80074e4:	4b63      	ldr	r3, [pc, #396]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074e6:	2234      	movs	r2, #52	; 0x34
 80074e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        ps2ToHidLookupMap[PS2_KEY_GRAVE] = HID_KEY_GRAVE;
 80074ec:	4b61      	ldr	r3, [pc, #388]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074ee:	2235      	movs	r2, #53	; 0x35
 80074f0:	739a      	strb	r2, [r3, #14]
        ps2ToHidLookupMap[PS2_KEY_COMMA] = HID_KEY_COMMA;
 80074f2:	4b60      	ldr	r3, [pc, #384]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074f4:	2236      	movs	r2, #54	; 0x36
 80074f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        ps2ToHidLookupMap[PS2_KEY_DOT] = HID_KEY_DOT;
 80074fa:	4b5e      	ldr	r3, [pc, #376]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80074fc:	2237      	movs	r2, #55	; 0x37
 80074fe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        ps2ToHidLookupMap[PS2_KEY_SLASH] = HID_KEY_SLASH;
 8007502:	4b5c      	ldr	r3, [pc, #368]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007504:	2238      	movs	r2, #56	; 0x38
 8007506:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        ps2ToHidLookupMap[PS2_KEY_CAPSLOCK] = HID_KEY_CAPSLOCK;
 800750a:	4b5a      	ldr	r3, [pc, #360]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800750c:	2239      	movs	r2, #57	; 0x39
 800750e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        ps2ToHidLookupMap[PS2_KEY_F1] = HID_KEY_F1;
 8007512:	4b58      	ldr	r3, [pc, #352]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007514:	223a      	movs	r2, #58	; 0x3a
 8007516:	715a      	strb	r2, [r3, #5]
        ps2ToHidLookupMap[PS2_KEY_F2] = HID_KEY_F2;
 8007518:	4b56      	ldr	r3, [pc, #344]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800751a:	223b      	movs	r2, #59	; 0x3b
 800751c:	719a      	strb	r2, [r3, #6]
        ps2ToHidLookupMap[PS2_KEY_F3] = HID_KEY_F3;
 800751e:	4b55      	ldr	r3, [pc, #340]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007520:	223c      	movs	r2, #60	; 0x3c
 8007522:	711a      	strb	r2, [r3, #4]
        ps2ToHidLookupMap[PS2_KEY_F4] = HID_KEY_F4;
 8007524:	4b53      	ldr	r3, [pc, #332]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007526:	223d      	movs	r2, #61	; 0x3d
 8007528:	731a      	strb	r2, [r3, #12]
        ps2ToHidLookupMap[PS2_KEY_F5] = HID_KEY_F5;
 800752a:	4b52      	ldr	r3, [pc, #328]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800752c:	223e      	movs	r2, #62	; 0x3e
 800752e:	70da      	strb	r2, [r3, #3]
        ps2ToHidLookupMap[PS2_KEY_F6] = HID_KEY_F6;
 8007530:	4b50      	ldr	r3, [pc, #320]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007532:	223f      	movs	r2, #63	; 0x3f
 8007534:	72da      	strb	r2, [r3, #11]
        ps2ToHidLookupMap[PS2_KEY_F7] = HID_KEY_F7;
 8007536:	4b4f      	ldr	r3, [pc, #316]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007538:	2240      	movs	r2, #64	; 0x40
 800753a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
        ps2ToHidLookupMap[PS2_KEY_F8] = HID_KEY_F8;
 800753e:	4b4d      	ldr	r3, [pc, #308]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007540:	2241      	movs	r2, #65	; 0x41
 8007542:	729a      	strb	r2, [r3, #10]
        ps2ToHidLookupMap[PS2_KEY_F9] = HID_KEY_F9;
 8007544:	4b4b      	ldr	r3, [pc, #300]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007546:	2242      	movs	r2, #66	; 0x42
 8007548:	705a      	strb	r2, [r3, #1]
        ps2ToHidLookupMap[PS2_KEY_F10] = HID_KEY_F10;
 800754a:	4b4a      	ldr	r3, [pc, #296]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800754c:	2243      	movs	r2, #67	; 0x43
 800754e:	725a      	strb	r2, [r3, #9]
        ps2ToHidLookupMap[PS2_KEY_F11] = HID_KEY_F11;
 8007550:	4b48      	ldr	r3, [pc, #288]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007552:	2244      	movs	r2, #68	; 0x44
 8007554:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        ps2ToHidLookupMap[PS2_KEY_F12] = HID_KEY_F12;
 8007558:	4b46      	ldr	r3, [pc, #280]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 800755a:	2245      	movs	r2, #69	; 0x45
 800755c:	71da      	strb	r2, [r3, #7]

        ps2ToHidLookupMap[PS2_KEY_NUMLOCK] = HID_KEY_NUMLOCK;
 800755e:	4b45      	ldr	r3, [pc, #276]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007560:	2253      	movs	r2, #83	; 0x53
 8007562:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        ps2ToHidLookupMap[PS2_KEY_KPASTERISK] = HID_KEY_KPASTERISK;
 8007566:	4b43      	ldr	r3, [pc, #268]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007568:	2255      	movs	r2, #85	; 0x55
 800756a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        ps2ToHidLookupMap[PS2_KEY_KPMINUS] = HID_KEY_KPMINUS;
 800756e:	4b41      	ldr	r3, [pc, #260]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007570:	2256      	movs	r2, #86	; 0x56
 8007572:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        ps2ToHidLookupMap[PS2_KEY_KPPLUS] = HID_KEY_KPPLUS;
 8007576:	4b3f      	ldr	r3, [pc, #252]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007578:	2257      	movs	r2, #87	; 0x57
 800757a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
        ps2ToHidLookupMap[PS2_KEY_KPDOT] = HID_KEY_KPDOT;
 800757e:	4b3d      	ldr	r3, [pc, #244]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007580:	2263      	movs	r2, #99	; 0x63
 8007582:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ps2ToHidLookupMap[PS2_KEY_KP1] = HID_KEY_KP1;
 8007586:	4b3b      	ldr	r3, [pc, #236]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007588:	2259      	movs	r2, #89	; 0x59
 800758a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        ps2ToHidLookupMap[PS2_KEY_KP2] = HID_KEY_KP2;
 800758e:	4b39      	ldr	r3, [pc, #228]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007590:	225a      	movs	r2, #90	; 0x5a
 8007592:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        ps2ToHidLookupMap[PS2_KEY_KP3] = HID_KEY_KP3;
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007598:	225b      	movs	r2, #91	; 0x5b
 800759a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        ps2ToHidLookupMap[PS2_KEY_KP4] = HID_KEY_KP4;
 800759e:	4b35      	ldr	r3, [pc, #212]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80075a0:	225c      	movs	r2, #92	; 0x5c
 80075a2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        ps2ToHidLookupMap[PS2_KEY_KP5] = HID_KEY_KP5;
 80075a6:	4b33      	ldr	r3, [pc, #204]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80075a8:	225d      	movs	r2, #93	; 0x5d
 80075aa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
        ps2ToHidLookupMap[PS2_KEY_KP6] = HID_KEY_KP6;
 80075ae:	4b31      	ldr	r3, [pc, #196]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80075b0:	225e      	movs	r2, #94	; 0x5e
 80075b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        ps2ToHidLookupMap[PS2_KEY_KP7] = HID_KEY_KP7;
 80075b6:	4b2f      	ldr	r3, [pc, #188]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80075b8:	225f      	movs	r2, #95	; 0x5f
 80075ba:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        ps2ToHidLookupMap[PS2_KEY_KP8] = HID_KEY_KP8;
 80075be:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80075c0:	2260      	movs	r2, #96	; 0x60
 80075c2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        ps2ToHidLookupMap[PS2_KEY_KP9] = HID_KEY_KP9;
 80075c6:	4b2b      	ldr	r3, [pc, #172]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80075c8:	2261      	movs	r2, #97	; 0x61
 80075ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ps2ToHidLookupMap[PS2_KEY_KP0] = HID_KEY_KP0;
 80075ce:	4b29      	ldr	r3, [pc, #164]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 80075d0:	2262      	movs	r2, #98	; 0x62
 80075d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /// Extended PS2 KEY CODES init
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_MOD_LMETA)] = HID_KEY_LEFTMETA;
 80075d6:	4b28      	ldr	r3, [pc, #160]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 80075d8:	22e3      	movs	r2, #227	; 0xe3
 80075da:	77da      	strb	r2, [r3, #31]
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_MOD_RCTRL)] = HID_KEY_RIGHTCTRL;
 80075dc:	4b26      	ldr	r3, [pc, #152]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 80075de:	22e4      	movs	r2, #228	; 0xe4
 80075e0:	751a      	strb	r2, [r3, #20]
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_MOD_RALT)] = HID_KEY_RIGHTALT;
 80075e2:	4b25      	ldr	r3, [pc, #148]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 80075e4:	22e6      	movs	r2, #230	; 0xe6
 80075e6:	745a      	strb	r2, [r3, #17]
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_MOD_RMETA)] = HID_KEY_RIGHTMETA;
 80075e8:	4b23      	ldr	r3, [pc, #140]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 80075ea:	22e7      	movs	r2, #231	; 0xe7
 80075ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_SYSRQ)] = HID_KEY_SYSRQ;
 80075f0:	4b21      	ldr	r3, [pc, #132]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 80075f2:	2246      	movs	r2, #70	; 0x46
 80075f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_SCROLLLOCK)] = HID_KEY_SCROLLLOCK;
 80075f8:	4b1f      	ldr	r3, [pc, #124]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 80075fa:	2247      	movs	r2, #71	; 0x47
 80075fc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

        ps2ToHidLookupMap[PS2_EXT_CODE(PS2_KEY_MENU)] = HID_KEY_PROPS;
 8007600:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x328>)
 8007602:	2276      	movs	r2, #118	; 0x76
 8007604:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_INSERT)] = HID_KEY_INSERT;
 8007608:	4b1b      	ldr	r3, [pc, #108]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 800760a:	2249      	movs	r2, #73	; 0x49
 800760c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_HOME)] = HID_KEY_HOME;
 8007610:	4b19      	ldr	r3, [pc, #100]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 8007612:	224a      	movs	r2, #74	; 0x4a
 8007614:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_PAGEUP)] = HID_KEY_PAGEUP;
 8007618:	4b17      	ldr	r3, [pc, #92]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 800761a:	224b      	movs	r2, #75	; 0x4b
 800761c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_DELETE)] = HID_KEY_DELETE;
 8007620:	4b15      	ldr	r3, [pc, #84]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 8007622:	224c      	movs	r2, #76	; 0x4c
 8007624:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_END)] = HID_KEY_END;
 8007628:	4b13      	ldr	r3, [pc, #76]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 800762a:	224d      	movs	r2, #77	; 0x4d
 800762c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_PAGEDOWN)] = HID_KEY_PAGEDOWN;
 8007630:	4b11      	ldr	r3, [pc, #68]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 8007632:	224e      	movs	r2, #78	; 0x4e
 8007634:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_RIGHT)] = HID_KEY_RIGHT;
 8007638:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 800763a:	224f      	movs	r2, #79	; 0x4f
 800763c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_LEFT)] = HID_KEY_LEFT;
 8007640:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 8007642:	2250      	movs	r2, #80	; 0x50
 8007644:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_DOWN)] = HID_KEY_DOWN;
 8007648:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 800764a:	2251      	movs	r2, #81	; 0x51
 800764c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_UP)] = HID_KEY_UP;
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 8007652:	2252      	movs	r2, #82	; 0x52
 8007654:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_KPSLASH)] = HID_KEY_KPSLASH;
 8007658:	4b07      	ldr	r3, [pc, #28]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 800765a:	2254      	movs	r2, #84	; 0x54
 800765c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        ps2ExtToHidLookupMap[PS2_EXT_CODE(PS2_KEY_KPENTER)] = HID_KEY_KPENTER;
 8007660:	4b05      	ldr	r3, [pc, #20]	; (8007678 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x32c>)
 8007662:	2258      	movs	r2, #88	; 0x58
 8007664:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

        initDone = 1;
 8007668:	4b01      	ldr	r3, [pc, #4]	; (8007670 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x324>)
 800766a:	2201      	movs	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e005      	b.n	800767c <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x330>
 8007670:	200005dd 	.word	0x200005dd
 8007674:	20000414 	.word	0x20000414
 8007678:	200004fc 	.word	0x200004fc
 800767c:	e000      	b.n	8007680 <_ZN21ps2_to_hid_transcoder9Ps2HidMap4initEv+0x334>
            return;
 800767e:	bf00      	nop
    }
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop

08007688 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE>:
    {
        Ps2HidMap::init();
    }

    HidKey Ps2ToHidTranscoder::transcode(Ps2Key ps2Key)
    {
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	463b      	mov	r3, r7
 8007690:	e883 0003 	stmia.w	r3, {r0, r1}
        HidKey hidKey = {0};
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]

        if (ps2Key.error || ps2Key.ps2Special)
 8007698:	797b      	ldrb	r3, [r7, #5]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x1c>
 800769e:	787b      	ldrb	r3, [r7, #1]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x26>
        {
            hidKey.error = 1;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
            return hidKey;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e02d      	b.n	800770a <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x82>
        }

        uint8_t hidCode = ps2Key.ps2Extended
 80076ae:	783b      	ldrb	r3, [r7, #0]
                              ? Ps2HidMap::getExtendedKey(ps2Key.ps2Code)
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x38>
 80076b4:	78bb      	ldrb	r3, [r7, #2]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fe34 	bl	8007324 <_ZN21ps2_to_hid_transcoder9Ps2HidMap14getExtendedKeyEh>
 80076bc:	4603      	mov	r3, r0
 80076be:	e004      	b.n	80076ca <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x42>
                              : Ps2HidMap::getKey(ps2Key.ps2Code);
 80076c0:	78bb      	ldrb	r3, [r7, #2]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff fe1a 	bl	80072fc <_ZN21ps2_to_hid_transcoder9Ps2HidMap6getKeyEh>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]

        uint8_t modKey = translateModKey(hidCode);
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f82c 	bl	800772c <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh>
 80076d4:	4603      	mov	r3, r0
 80076d6:	75bb      	strb	r3, [r7, #22]

        hidKey.hidCode = modKey ? modKey : hidCode;
 80076d8:	7dbb      	ldrb	r3, [r7, #22]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x5a>
 80076de:	7dbb      	ldrb	r3, [r7, #22]
 80076e0:	e000      	b.n	80076e4 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x5c>
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	733b      	strb	r3, [r7, #12]
        hidKey.modKey = modKey ? 1 : 0;
 80076e6:	7dbb      	ldrb	r3, [r7, #22]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x68>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder9transcodeEN12ps2_keyboard6Ps2KeyE+0x6a>
 80076f0:	2300      	movs	r3, #0
 80076f2:	737b      	strb	r3, [r7, #13]
        hidKey.released = ps2Key.released;
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	73bb      	strb	r3, [r7, #14]
        hidKey.error = hidKey.hidCode == 0x00;
 80076f8:	7b3b      	ldrb	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	73fb      	strb	r3, [r7, #15]

        return hidKey;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	613b      	str	r3, [r7, #16]
    }
 800770a:	2300      	movs	r3, #0
 800770c:	7c3a      	ldrb	r2, [r7, #16]
 800770e:	f362 0307 	bfi	r3, r2, #0, #8
 8007712:	7c7a      	ldrb	r2, [r7, #17]
 8007714:	f362 230f 	bfi	r3, r2, #8, #8
 8007718:	7cba      	ldrb	r2, [r7, #18]
 800771a:	f362 4317 	bfi	r3, r2, #16, #8
 800771e:	7cfa      	ldrb	r2, [r7, #19]
 8007720:	f362 631f 	bfi	r3, r2, #24, #8
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh>:

    uint8_t Ps2ToHidTranscoder::translateModKey(uint8_t hidCode)
    {
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	71fb      	strb	r3, [r7, #7]
        switch (hidCode)
 8007736:	79fb      	ldrb	r3, [r7, #7]
 8007738:	3be0      	subs	r3, #224	; 0xe0
 800773a:	2b07      	cmp	r3, #7
 800773c:	d822      	bhi.n	8007784 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x58>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x18>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007765 	.word	0x08007765
 8007748:	08007769 	.word	0x08007769
 800774c:	0800776d 	.word	0x0800776d
 8007750:	08007771 	.word	0x08007771
 8007754:	08007775 	.word	0x08007775
 8007758:	08007779 	.word	0x08007779
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007781 	.word	0x08007781
        {
        case HID_KEY_LEFTCTRL:
            return HID_KEY_MOD_LCTRL;
 8007764:	2301      	movs	r3, #1
 8007766:	e00e      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        case HID_KEY_LEFTSHIFT:
            return HID_KEY_MOD_LSHIFT;
 8007768:	2302      	movs	r3, #2
 800776a:	e00c      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        case HID_KEY_LEFTALT:
            return HID_KEY_MOD_LALT;
 800776c:	2304      	movs	r3, #4
 800776e:	e00a      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        case HID_KEY_LEFTMETA:
            return HID_KEY_MOD_LMETA;
 8007770:	2308      	movs	r3, #8
 8007772:	e008      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        case HID_KEY_RIGHTCTRL:
            return HID_KEY_MOD_RCTRL;
 8007774:	2310      	movs	r3, #16
 8007776:	e006      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        case HID_KEY_RIGHTSHIFT:
            return HID_KEY_MOD_RSHIFT;
 8007778:	2320      	movs	r3, #32
 800777a:	e004      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        case HID_KEY_RIGHTALT:
            return HID_KEY_MOD_RALT;
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	e002      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        case HID_KEY_RIGHTMETA:
            return HID_KEY_MOD_RMETA;
 8007780:	2380      	movs	r3, #128	; 0x80
 8007782:	e000      	b.n	8007786 <_ZN21ps2_to_hid_transcoder18Ps2ToHidTranscoder15translateModKeyEh+0x5a>
        default:
            return 0;
 8007784:	2300      	movs	r3, #0
        }
    }
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <_ZN10delay_util5Delay4initEPFvmE>:
namespace delay_util
{
    void (*Delay::delayProto)(uint32_t) = 0;

    void Delay::init(void (*delayProto)(uint32_t))
    {
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
        Delay::delayProto = delayProto;
 8007798:	4a03      	ldr	r2, [pc, #12]	; (80077a8 <_ZN10delay_util5Delay4initEPFvmE+0x18>)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6013      	str	r3, [r2, #0]
    }
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr
 80077a8:	200005e0 	.word	0x200005e0

080077ac <_ZN10delay_util5Delay10delayShortEh>:

    void Delay::delayShort(uint8_t ticks)
    {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	71fb      	strb	r3, [r7, #7]
        if (*Delay::delayProto != 0)
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <_ZN10delay_util5Delay10delayShortEh+0x2c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <_ZN10delay_util5Delay10delayShortEh+0x24>
            (*Delay::delayProto)(ticks * Delay::DELAY_SHORT_TICK_DURATION);
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <_ZN10delay_util5Delay10delayShortEh+0x2c>)
 80077c0:	6819      	ldr	r1, [r3, #0]
 80077c2:	79fa      	ldrb	r2, [r7, #7]
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4618      	mov	r0, r3
 80077ce:	4788      	blx	r1
    }
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200005e0 	.word	0x200005e0

080077dc <_ZN10delay_util5Delay9delayLongEh>:

    void Delay::delayLong(uint8_t ticks)
    {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]
        if (*Delay::delayProto != 0)
 80077e6:	4b08      	ldr	r3, [pc, #32]	; (8007808 <_ZN10delay_util5Delay9delayLongEh+0x2c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <_ZN10delay_util5Delay9delayLongEh+0x22>
            (*Delay::delayProto)(ticks * Delay::DELAY_LONG_TICK_DURATION);
 80077ee:	4b06      	ldr	r3, [pc, #24]	; (8007808 <_ZN10delay_util5Delay9delayLongEh+0x2c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	79fa      	ldrb	r2, [r7, #7]
 80077f4:	2164      	movs	r1, #100	; 0x64
 80077f6:	fb01 f202 	mul.w	r2, r1, r2
 80077fa:	4610      	mov	r0, r2
 80077fc:	4798      	blx	r3
    }
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	200005e0 	.word	0x200005e0

0800780c <_ZN10delay_util5Delay13delayLongLongEm>:

    void Delay::delayLongLong(uint32_t ticks)
    {
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
        if (*Delay::delayProto != 0)
 8007814:	4b08      	ldr	r3, [pc, #32]	; (8007838 <_ZN10delay_util5Delay13delayLongLongEm+0x2c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d008      	beq.n	800782e <_ZN10delay_util5Delay13delayLongLongEm+0x22>
            (*Delay::delayProto)(ticks * Delay::DELAY_LONG_LONG_TICK_DURATION);
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <_ZN10delay_util5Delay13delayLongLongEm+0x2c>)
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4618      	mov	r0, r3
 800782c:	4788      	blx	r1
    }
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200005e0 	.word	0x200005e0

0800783c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007848:	2308      	movs	r3, #8
 800784a:	2203      	movs	r2, #3
 800784c:	2181      	movs	r1, #129	; 0x81
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fc83 	bl	800915a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800785a:	2010      	movs	r0, #16
 800785c:	f001 fd92 	bl	8009384 <USBD_static_malloc>
 8007860:	4602      	mov	r2, r0
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007872:	2302      	movs	r3, #2
 8007874:	e005      	b.n	8007882 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787c:	2200      	movs	r2, #0
 800787e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007896:	2181      	movs	r1, #129	; 0x81
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 fc84 	bl	80091a6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d009      	beq.n	80078c2 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fd71 	bl	800939c <USBD_static_free>
    pdev->pClassData = NULL;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078dc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d045      	beq.n	8007986 <USBD_HID_Setup+0xba>
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	f040 80d3 	bne.w	8007aa6 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	3b02      	subs	r3, #2
 8007906:	2b09      	cmp	r3, #9
 8007908:	d835      	bhi.n	8007976 <USBD_HID_Setup+0xaa>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <USBD_HID_Setup+0x44>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007967 	.word	0x08007967
 8007914:	08007947 	.word	0x08007947
 8007918:	08007977 	.word	0x08007977
 800791c:	08007977 	.word	0x08007977
 8007920:	08007977 	.word	0x08007977
 8007924:	08007977 	.word	0x08007977
 8007928:	08007977 	.word	0x08007977
 800792c:	08007977 	.word	0x08007977
 8007930:	08007955 	.word	0x08007955
 8007934:	08007939 	.word	0x08007939
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	601a      	str	r2, [r3, #0]
          break;
 8007944:	e01e      	b.n	8007984 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2201      	movs	r2, #1
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 f944 	bl	8008bda <USBD_CtlSendData>
          break;
 8007952:	e017      	b.n	8007984 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	b29b      	uxth	r3, r3
 800795c:	b2db      	uxtb	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	605a      	str	r2, [r3, #4]
          break;
 8007964:	e00e      	b.n	8007984 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	3304      	adds	r3, #4
 800796a:	2201      	movs	r2, #1
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 f933 	bl	8008bda <USBD_CtlSendData>
          break;
 8007974:	e006      	b.n	8007984 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f8c4 	bl	8008b06 <USBD_CtlError>
          ret = USBD_FAIL;
 800797e:	2302      	movs	r3, #2
 8007980:	75fb      	strb	r3, [r7, #23]
          break;
 8007982:	bf00      	nop
      }
      break;
 8007984:	e096      	b.n	8007ab4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	2b0b      	cmp	r3, #11
 800798c:	f200 8083 	bhi.w	8007a96 <USBD_HID_Setup+0x1ca>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <USBD_HID_Setup+0xcc>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079c9 	.word	0x080079c9
 800799c:	08007a97 	.word	0x08007a97
 80079a0:	08007a97 	.word	0x08007a97
 80079a4:	08007a97 	.word	0x08007a97
 80079a8:	08007a97 	.word	0x08007a97
 80079ac:	08007a97 	.word	0x08007a97
 80079b0:	080079f1 	.word	0x080079f1
 80079b4:	08007a97 	.word	0x08007a97
 80079b8:	08007a97 	.word	0x08007a97
 80079bc:	08007a97 	.word	0x08007a97
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	08007a71 	.word	0x08007a71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d107      	bne.n	80079e2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80079d2:	f107 030e 	add.w	r3, r7, #14
 80079d6:	2202      	movs	r2, #2
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 f8fd 	bl	8008bda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079e0:	e060      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f88e 	bl	8008b06 <USBD_CtlError>
            ret = USBD_FAIL;
 80079ea:	2302      	movs	r3, #2
 80079ec:	75fb      	strb	r3, [r7, #23]
          break;
 80079ee:	e059      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	885b      	ldrh	r3, [r3, #2]
 80079f4:	0a1b      	lsrs	r3, r3, #8
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b22      	cmp	r3, #34	; 0x22
 80079fa:	d108      	bne.n	8007a0e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	88db      	ldrh	r3, [r3, #6]
 8007a00:	2bbb      	cmp	r3, #187	; 0xbb
 8007a02:	bf28      	it	cs
 8007a04:	23bb      	movcs	r3, #187	; 0xbb
 8007a06:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007a08:	4b2d      	ldr	r3, [pc, #180]	; (8007ac0 <USBD_HID_Setup+0x1f4>)
 8007a0a:	61bb      	str	r3, [r7, #24]
 8007a0c:	e015      	b.n	8007a3a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b21      	cmp	r3, #33	; 0x21
 8007a18:	d108      	bne.n	8007a2c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007a1a:	4b2a      	ldr	r3, [pc, #168]	; (8007ac4 <USBD_HID_Setup+0x1f8>)
 8007a1c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	2b09      	cmp	r3, #9
 8007a24:	bf28      	it	cs
 8007a26:	2309      	movcs	r3, #9
 8007a28:	83fb      	strh	r3, [r7, #30]
 8007a2a:	e006      	b.n	8007a3a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f869 	bl	8008b06 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a34:	2302      	movs	r3, #2
 8007a36:	75fb      	strb	r3, [r7, #23]
            break;
 8007a38:	e034      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007a3a:	8bfb      	ldrh	r3, [r7, #30]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f8ca 	bl	8008bda <USBD_CtlSendData>
          break;
 8007a46:	e02d      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d107      	bne.n	8007a62 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3308      	adds	r3, #8
 8007a56:	2201      	movs	r2, #1
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 f8bd 	bl	8008bda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a60:	e020      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f84e 	bl	8008b06 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a6e:	e019      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d106      	bne.n	8007a88 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a86:	e00d      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 f83b 	bl	8008b06 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a90:	2302      	movs	r3, #2
 8007a92:	75fb      	strb	r3, [r7, #23]
          break;
 8007a94:	e006      	b.n	8007aa4 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f834 	bl	8008b06 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa2:	bf00      	nop
      }
      break;
 8007aa4:	e006      	b.n	8007ab4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 f82c 	bl	8008b06 <USBD_CtlError>
      ret = USBD_FAIL;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab2:	bf00      	nop
  }

  return ret;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200000c8 	.word	0x200000c8
 8007ac4:	200000b0 	.word	0x200000b0

08007ac8 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007adc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d10c      	bne.n	8007b02 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	7b1b      	ldrb	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d108      	bne.n	8007b02 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2201      	movs	r2, #1
 8007af4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	2181      	movs	r1, #129	; 0x81
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f001 fbfa 	bl	80092f6 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2222      	movs	r2, #34	; 0x22
 8007b18:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20000044 	.word	0x20000044

08007b2c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2222      	movs	r2, #34	; 0x22
 8007b38:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007b3a:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000068 	.word	0x20000068

08007b4c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2222      	movs	r2, #34	; 0x22
 8007b58:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007b5a:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	2000008c 	.word	0x2000008c

08007b6c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7e:	2200      	movs	r2, #0
 8007b80:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr
	...

08007b90 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	220a      	movs	r2, #10
 8007b9c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007b9e:	4b03      	ldr	r3, [pc, #12]	; (8007bac <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	200000bc 	.word	0x200000bc

08007bb0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e01a      	b.n	8007bfe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	79fa      	ldrb	r2, [r7, #7]
 8007bf4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f001 fa4c 	bl	8009094 <USBD_LL_Init>

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
 8007c26:	e001      	b.n	8007c2c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fa6f 	bl	8009124 <USBD_LL_Start>

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c70:	2302      	movs	r3, #2
 8007c72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3

  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fed7 	bl	8008a8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d016      	beq.n	8007d32 <USBD_LL_SetupStage+0x6a>
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d81c      	bhi.n	8007d42 <USBD_LL_SetupStage+0x7a>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <USBD_LL_SetupStage+0x4a>
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d008      	beq.n	8007d22 <USBD_LL_SetupStage+0x5a>
 8007d10:	e017      	b.n	8007d42 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9ca 	bl	80080b4 <USBD_StdDevReq>
      break;
 8007d20:	e01a      	b.n	8007d58 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa2c 	bl	8008188 <USBD_StdItfReq>
      break;
 8007d30:	e012      	b.n	8007d58 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa6c 	bl	8008218 <USBD_StdEPReq>
      break;
 8007d40:	e00a      	b.n	8007d58 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fa47 	bl	80091e4 <USBD_LL_StallEP>
      break;
 8007d56:	bf00      	nop
  }

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b086      	sub	sp, #24
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d70:	7afb      	ldrb	r3, [r7, #11]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d14b      	bne.n	8007e0e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d7c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d134      	bne.n	8007df2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d919      	bls.n	8007dc8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	1ad2      	subs	r2, r2, r3
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d203      	bcs.n	8007db6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	e002      	b.n	8007dbc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 ff38 	bl	8008c36 <USBD_CtlContinueRx>
 8007dc6:	e038      	b.n	8007e3a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d105      	bne.n	8007dea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 ff35 	bl	8008c5a <USBD_CtlSendStatus>
 8007df0:	e023      	b.n	8007e3a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	d11e      	bne.n	8007e3a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e04:	2100      	movs	r1, #0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f001 f9ec 	bl	80091e4 <USBD_LL_StallEP>
 8007e0c:	e015      	b.n	8007e3a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00d      	beq.n	8007e36 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d108      	bne.n	8007e36 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	7afa      	ldrb	r2, [r7, #11]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	4798      	blx	r3
 8007e34:	e001      	b.n	8007e3a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e36:	2302      	movs	r3, #2
 8007e38:	e000      	b.n	8007e3c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d17f      	bne.n	8007f58 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3314      	adds	r3, #20
 8007e5c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d15c      	bne.n	8007f22 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d915      	bls.n	8007ea0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	1ad2      	subs	r2, r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fec0 	bl	8008c12 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e92:	2300      	movs	r3, #0
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f001 fa4f 	bl	800933c <USBD_LL_PrepareReceive>
 8007e9e:	e04e      	b.n	8007f3e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	6912      	ldr	r2, [r2, #16]
 8007ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eac:	fb01 f202 	mul.w	r2, r1, r2
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d11c      	bne.n	8007ef0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d316      	bcc.n	8007ef0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d20f      	bcs.n	8007ef0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 fe9c 	bl	8008c12 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f001 fa27 	bl	800933c <USBD_LL_PrepareReceive>
 8007eee:	e026      	b.n	8007f3e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d105      	bne.n	8007f12 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f001 f965 	bl	80091e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 feb0 	bl	8008c80 <USBD_CtlReceiveStatus>
 8007f20:	e00d      	b.n	8007f3e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d004      	beq.n	8007f36 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d103      	bne.n	8007f3e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f36:	2180      	movs	r1, #128	; 0x80
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f001 f953 	bl	80091e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d11d      	bne.n	8007f84 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fe81 	bl	8007c50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f56:	e015      	b.n	8007f84 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00d      	beq.n	8007f80 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d108      	bne.n	8007f80 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	7afa      	ldrb	r2, [r7, #11]
 8007f78:	4611      	mov	r1, r2
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	4798      	blx	r3
 8007f7e:	e001      	b.n	8007f84 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f80:	2302      	movs	r3, #2
 8007f82:	e000      	b.n	8007f86 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f8dc 	bl	800915a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2240      	movs	r2, #64	; 0x40
 8007fae:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fb2:	2340      	movs	r3, #64	; 0x40
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2180      	movs	r1, #128	; 0x80
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f8ce 	bl	800915a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2240      	movs	r2, #64	; 0x40
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6852      	ldr	r2, [r2, #4]
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	4611      	mov	r1, r2
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
  }

  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr

0800802e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2204      	movs	r2, #4
 8008046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bc80      	pop	{r7}
 8008054:	4770      	bx	lr

08008056 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008064:	2b04      	cmp	r3, #4
 8008066:	d105      	bne.n	8008074 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808e:	2b03      	cmp	r3, #3
 8008090:	d10b      	bne.n	80080aa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d005      	beq.n	80080da <USBD_StdDevReq+0x26>
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d84f      	bhi.n	8008172 <USBD_StdDevReq+0xbe>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <USBD_StdDevReq+0x36>
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d14b      	bne.n	8008172 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
      break;
 80080e8:	e048      	b.n	800817c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d839      	bhi.n	8008166 <USBD_StdDevReq+0xb2>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <USBD_StdDevReq+0x44>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008149 	.word	0x08008149
 80080fc:	0800815d 	.word	0x0800815d
 8008100:	08008167 	.word	0x08008167
 8008104:	08008153 	.word	0x08008153
 8008108:	08008167 	.word	0x08008167
 800810c:	0800812b 	.word	0x0800812b
 8008110:	08008121 	.word	0x08008121
 8008114:	08008167 	.word	0x08008167
 8008118:	0800813f 	.word	0x0800813f
 800811c:	08008135 	.word	0x08008135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f9dc 	bl	80084e0 <USBD_GetDescriptor>
          break;
 8008128:	e022      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fb3f 	bl	80087b0 <USBD_SetAddress>
          break;
 8008132:	e01d      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fb7e 	bl	8008838 <USBD_SetConfig>
          break;
 800813c:	e018      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fc07 	bl	8008954 <USBD_GetConfig>
          break;
 8008146:	e013      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fc37 	bl	80089be <USBD_GetStatus>
          break;
 8008150:	e00e      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fc65 	bl	8008a24 <USBD_SetFeature>
          break;
 800815a:	e009      	b.n	8008170 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fc74 	bl	8008a4c <USBD_ClrFeature>
          break;
 8008164:	e004      	b.n	8008170 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fccc 	bl	8008b06 <USBD_CtlError>
          break;
 800816e:	bf00      	nop
      }
      break;
 8008170:	e004      	b.n	800817c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fcc6 	bl	8008b06 <USBD_CtlError>
      break;
 800817a:	bf00      	nop
  }

  return ret;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop

08008188 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d005      	beq.n	80081ae <USBD_StdItfReq+0x26>
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d82e      	bhi.n	8008204 <USBD_StdItfReq+0x7c>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <USBD_StdItfReq+0x26>
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d12a      	bne.n	8008204 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	3b01      	subs	r3, #1
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d81d      	bhi.n	80081f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	889b      	ldrh	r3, [r3, #4]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d813      	bhi.n	80081ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	88db      	ldrh	r3, [r3, #6]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d110      	bne.n	8008200 <USBD_StdItfReq+0x78>
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10d      	bne.n	8008200 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fd38 	bl	8008c5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ea:	e009      	b.n	8008200 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fc89 	bl	8008b06 <USBD_CtlError>
          break;
 80081f4:	e004      	b.n	8008200 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fc84 	bl	8008b06 <USBD_CtlError>
          break;
 80081fe:	e000      	b.n	8008202 <USBD_StdItfReq+0x7a>
          break;
 8008200:	bf00      	nop
      }
      break;
 8008202:	e004      	b.n	800820e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc7d 	bl	8008b06 <USBD_CtlError>
      break;
 800820c:	bf00      	nop
  }

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	889b      	ldrh	r3, [r3, #4]
 800822a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d007      	beq.n	8008248 <USBD_StdEPReq+0x30>
 8008238:	2b40      	cmp	r3, #64	; 0x40
 800823a:	f200 8146 	bhi.w	80084ca <USBD_StdEPReq+0x2b2>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <USBD_StdEPReq+0x40>
 8008242:	2b20      	cmp	r3, #32
 8008244:	f040 8141 	bne.w	80084ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
      break;
 8008256:	e13d      	b.n	80084d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008260:	2b20      	cmp	r3, #32
 8008262:	d10a      	bne.n	800827a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	e12d      	b.n	80084d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b03      	cmp	r3, #3
 8008280:	d007      	beq.n	8008292 <USBD_StdEPReq+0x7a>
 8008282:	2b03      	cmp	r3, #3
 8008284:	f300 811b 	bgt.w	80084be <USBD_StdEPReq+0x2a6>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d072      	beq.n	8008372 <USBD_StdEPReq+0x15a>
 800828c:	2b01      	cmp	r3, #1
 800828e:	d03a      	beq.n	8008306 <USBD_StdEPReq+0xee>
 8008290:	e115      	b.n	80084be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008298:	2b02      	cmp	r3, #2
 800829a:	d002      	beq.n	80082a2 <USBD_StdEPReq+0x8a>
 800829c:	2b03      	cmp	r3, #3
 800829e:	d015      	beq.n	80082cc <USBD_StdEPReq+0xb4>
 80082a0:	e02b      	b.n	80082fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00c      	beq.n	80082c2 <USBD_StdEPReq+0xaa>
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d009      	beq.n	80082c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 ff96 	bl	80091e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082b8:	2180      	movs	r1, #128	; 0x80
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 ff92 	bl	80091e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c0:	e020      	b.n	8008304 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc1e 	bl	8008b06 <USBD_CtlError>
              break;
 80082ca:	e01b      	b.n	8008304 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10e      	bne.n	80082f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <USBD_StdEPReq+0xda>
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b80      	cmp	r3, #128	; 0x80
 80082de:	d008      	beq.n	80082f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	88db      	ldrh	r3, [r3, #6]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 ff79 	bl	80091e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fcb1 	bl	8008c5a <USBD_CtlSendStatus>

              break;
 80082f8:	e004      	b.n	8008304 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc02 	bl	8008b06 <USBD_CtlError>
              break;
 8008302:	bf00      	nop
          }
          break;
 8008304:	e0e0      	b.n	80084c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830c:	2b02      	cmp	r3, #2
 800830e:	d002      	beq.n	8008316 <USBD_StdEPReq+0xfe>
 8008310:	2b03      	cmp	r3, #3
 8008312:	d015      	beq.n	8008340 <USBD_StdEPReq+0x128>
 8008314:	e026      	b.n	8008364 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00c      	beq.n	8008336 <USBD_StdEPReq+0x11e>
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b80      	cmp	r3, #128	; 0x80
 8008320:	d009      	beq.n	8008336 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 ff5c 	bl	80091e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800832c:	2180      	movs	r1, #128	; 0x80
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 ff58 	bl	80091e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008334:	e01c      	b.n	8008370 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fbe4 	bl	8008b06 <USBD_CtlError>
              break;
 800833e:	e017      	b.n	8008370 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	885b      	ldrh	r3, [r3, #2]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d112      	bne.n	800836e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 ff63 	bl	8009222 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc7c 	bl	8008c5a <USBD_CtlSendStatus>
              }
              break;
 8008362:	e004      	b.n	800836e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fbcd 	bl	8008b06 <USBD_CtlError>
              break;
 800836c:	e000      	b.n	8008370 <USBD_StdEPReq+0x158>
              break;
 800836e:	bf00      	nop
          }
          break;
 8008370:	e0aa      	b.n	80084c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008378:	2b02      	cmp	r3, #2
 800837a:	d002      	beq.n	8008382 <USBD_StdEPReq+0x16a>
 800837c:	2b03      	cmp	r3, #3
 800837e:	d032      	beq.n	80083e6 <USBD_StdEPReq+0x1ce>
 8008380:	e097      	b.n	80084b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008382:	7bbb      	ldrb	r3, [r7, #14]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <USBD_StdEPReq+0x180>
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d004      	beq.n	8008398 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fbb8 	bl	8008b06 <USBD_CtlError>
                break;
 8008396:	e091      	b.n	80084bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800839c:	2b00      	cmp	r3, #0
 800839e:	da0b      	bge.n	80083b8 <USBD_StdEPReq+0x1a0>
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	3310      	adds	r3, #16
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4413      	add	r3, r2
 80083b4:	3304      	adds	r3, #4
 80083b6:	e00b      	b.n	80083d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	3304      	adds	r3, #4
 80083d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2202      	movs	r2, #2
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fbfb 	bl	8008bda <USBD_CtlSendData>
              break;
 80083e4:	e06a      	b.n	80084bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da11      	bge.n	8008412 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	3318      	adds	r3, #24
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d117      	bne.n	8008438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fb7b 	bl	8008b06 <USBD_CtlError>
                  break;
 8008410:	e054      	b.n	80084bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fb68 	bl	8008b06 <USBD_CtlError>
                  break;
 8008436:	e041      	b.n	80084bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800843c:	2b00      	cmp	r3, #0
 800843e:	da0b      	bge.n	8008458 <USBD_StdEPReq+0x240>
 8008440:	7bbb      	ldrb	r3, [r7, #14]
 8008442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	3310      	adds	r3, #16
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	3304      	adds	r3, #4
 8008456:	e00b      	b.n	8008470 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	3304      	adds	r3, #4
 8008470:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <USBD_StdEPReq+0x266>
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	2b80      	cmp	r3, #128	; 0x80
 800847c:	d103      	bne.n	8008486 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	e00e      	b.n	80084a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fee8 	bl	8009260 <USBD_LL_IsStallEP>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e002      	b.n	80084a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2202      	movs	r2, #2
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fb95 	bl	8008bda <USBD_CtlSendData>
              break;
 80084b0:	e004      	b.n	80084bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fb26 	bl	8008b06 <USBD_CtlError>
              break;
 80084ba:	bf00      	nop
          }
          break;
 80084bc:	e004      	b.n	80084c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fb20 	bl	8008b06 <USBD_CtlError>
          break;
 80084c6:	bf00      	nop
      }
      break;
 80084c8:	e004      	b.n	80084d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fb1a 	bl	8008b06 <USBD_CtlError>
      break;
 80084d2:	bf00      	nop
  }

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	2b06      	cmp	r3, #6
 8008502:	f200 8128 	bhi.w	8008756 <USBD_GetDescriptor+0x276>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <USBD_GetDescriptor+0x2c>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	08008529 	.word	0x08008529
 8008510:	08008541 	.word	0x08008541
 8008514:	08008581 	.word	0x08008581
 8008518:	08008757 	.word	0x08008757
 800851c:	08008757 	.word	0x08008757
 8008520:	080086f7 	.word	0x080086f7
 8008524:	08008723 	.word	0x08008723
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	7c12      	ldrb	r2, [r2, #16]
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
      break;
 800853e:	e112      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	7c1b      	ldrb	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10d      	bne.n	8008564 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	f107 0208 	add.w	r2, r7, #8
 8008554:	4610      	mov	r0, r2
 8008556:	4798      	blx	r3
 8008558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3301      	adds	r3, #1
 800855e:	2202      	movs	r2, #2
 8008560:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008562:	e100      	b.n	8008766 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	f107 0208 	add.w	r2, r7, #8
 8008570:	4610      	mov	r0, r2
 8008572:	4798      	blx	r3
 8008574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	2202      	movs	r2, #2
 800857c:	701a      	strb	r2, [r3, #0]
      break;
 800857e:	e0f2      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	885b      	ldrh	r3, [r3, #2]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b05      	cmp	r3, #5
 8008588:	f200 80ac 	bhi.w	80086e4 <USBD_GetDescriptor+0x204>
 800858c:	a201      	add	r2, pc, #4	; (adr r2, 8008594 <USBD_GetDescriptor+0xb4>)
 800858e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008592:	bf00      	nop
 8008594:	080085ad 	.word	0x080085ad
 8008598:	080085e1 	.word	0x080085e1
 800859c:	08008615 	.word	0x08008615
 80085a0:	08008649 	.word	0x08008649
 80085a4:	0800867d 	.word	0x0800867d
 80085a8:	080086b1 	.word	0x080086b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	7c12      	ldrb	r2, [r2, #16]
 80085c4:	f107 0108 	add.w	r1, r7, #8
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
 80085cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ce:	e091      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa97 	bl	8008b06 <USBD_CtlError>
            err++;
 80085d8:	7afb      	ldrb	r3, [r7, #11]
 80085da:	3301      	adds	r3, #1
 80085dc:	72fb      	strb	r3, [r7, #11]
          break;
 80085de:	e089      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	7c12      	ldrb	r2, [r2, #16]
 80085f8:	f107 0108 	add.w	r1, r7, #8
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008602:	e077      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa7d 	bl	8008b06 <USBD_CtlError>
            err++;
 800860c:	7afb      	ldrb	r3, [r7, #11]
 800860e:	3301      	adds	r3, #1
 8008610:	72fb      	strb	r3, [r7, #11]
          break;
 8008612:	e06f      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	7c12      	ldrb	r2, [r2, #16]
 800862c:	f107 0108 	add.w	r1, r7, #8
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3
 8008634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008636:	e05d      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa63 	bl	8008b06 <USBD_CtlError>
            err++;
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	3301      	adds	r3, #1
 8008644:	72fb      	strb	r3, [r7, #11]
          break;
 8008646:	e055      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	7c12      	ldrb	r2, [r2, #16]
 8008660:	f107 0108 	add.w	r1, r7, #8
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
 8008668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866a:	e043      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fa49 	bl	8008b06 <USBD_CtlError>
            err++;
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	3301      	adds	r3, #1
 8008678:	72fb      	strb	r3, [r7, #11]
          break;
 800867a:	e03b      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	7c12      	ldrb	r2, [r2, #16]
 8008694:	f107 0108 	add.w	r1, r7, #8
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
 800869c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800869e:	e029      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa2f 	bl	8008b06 <USBD_CtlError>
            err++;
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	3301      	adds	r3, #1
 80086ac:	72fb      	strb	r3, [r7, #11]
          break;
 80086ae:	e021      	b.n	80086f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	7c12      	ldrb	r2, [r2, #16]
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
 80086d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d2:	e00f      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fa15 	bl	8008b06 <USBD_CtlError>
            err++;
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	3301      	adds	r3, #1
 80086e0:	72fb      	strb	r3, [r7, #11]
          break;
 80086e2:	e007      	b.n	80086f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa0d 	bl	8008b06 <USBD_CtlError>
          err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80086f2:	e038      	b.n	8008766 <USBD_GetDescriptor+0x286>
 80086f4:	e037      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7c1b      	ldrb	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008706:	f107 0208 	add.w	r2, r7, #8
 800870a:	4610      	mov	r0, r2
 800870c:	4798      	blx	r3
 800870e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008710:	e029      	b.n	8008766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f9f6 	bl	8008b06 <USBD_CtlError>
        err++;
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	3301      	adds	r3, #1
 800871e:	72fb      	strb	r3, [r7, #11]
      break;
 8008720:	e021      	b.n	8008766 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7c1b      	ldrb	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10d      	bne.n	8008746 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	f107 0208 	add.w	r2, r7, #8
 8008736:	4610      	mov	r0, r2
 8008738:	4798      	blx	r3
 800873a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	2207      	movs	r2, #7
 8008742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008744:	e00f      	b.n	8008766 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f9dc 	bl	8008b06 <USBD_CtlError>
        err++;
 800874e:	7afb      	ldrb	r3, [r7, #11]
 8008750:	3301      	adds	r3, #1
 8008752:	72fb      	strb	r3, [r7, #11]
      break;
 8008754:	e007      	b.n	8008766 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9d4 	bl	8008b06 <USBD_CtlError>
      err++;
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	3301      	adds	r3, #1
 8008762:	72fb      	strb	r3, [r7, #11]
      break;
 8008764:	bf00      	nop
  }

  if (err != 0U)
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d11c      	bne.n	80087a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800876c:	893b      	ldrh	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d011      	beq.n	8008796 <USBD_GetDescriptor+0x2b6>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88db      	ldrh	r3, [r3, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00d      	beq.n	8008796 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	88da      	ldrh	r2, [r3, #6]
 800877e:	893b      	ldrh	r3, [r7, #8]
 8008780:	4293      	cmp	r3, r2
 8008782:	bf28      	it	cs
 8008784:	4613      	movcs	r3, r2
 8008786:	b29b      	uxth	r3, r3
 8008788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800878a:	893b      	ldrh	r3, [r7, #8]
 800878c:	461a      	mov	r2, r3
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fa22 	bl	8008bda <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	88db      	ldrh	r3, [r3, #6]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fa5b 	bl	8008c5a <USBD_CtlSendStatus>
 80087a4:	e000      	b.n	80087a8 <USBD_GetDescriptor+0x2c8>
    return;
 80087a6:	bf00      	nop
    }
  }
}
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop

080087b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	889b      	ldrh	r3, [r3, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d130      	bne.n	8008824 <USBD_SetAddress+0x74>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	88db      	ldrh	r3, [r3, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d12c      	bne.n	8008824 <USBD_SetAddress+0x74>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	2b7f      	cmp	r3, #127	; 0x7f
 80087d0:	d828      	bhi.n	8008824 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d104      	bne.n	80087f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f98b 	bl	8008b06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f0:	e01d      	b.n	800882e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	7bfa      	ldrb	r2, [r7, #15]
 80087f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fd5a 	bl	80092b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa28 	bl	8008c5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008818:	e009      	b.n	800882e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	e004      	b.n	800882e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f96d 	bl	8008b06 <USBD_CtlError>
  }
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	885b      	ldrh	r3, [r3, #2]
 8008846:	b2da      	uxtb	r2, r3
 8008848:	4b41      	ldr	r3, [pc, #260]	; (8008950 <USBD_SetConfig+0x118>)
 800884a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800884c:	4b40      	ldr	r3, [pc, #256]	; (8008950 <USBD_SetConfig+0x118>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d904      	bls.n	800885e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f955 	bl	8008b06 <USBD_CtlError>
 800885c:	e075      	b.n	800894a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	2b02      	cmp	r3, #2
 8008866:	d002      	beq.n	800886e <USBD_SetConfig+0x36>
 8008868:	2b03      	cmp	r3, #3
 800886a:	d023      	beq.n	80088b4 <USBD_SetConfig+0x7c>
 800886c:	e062      	b.n	8008934 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800886e:	4b38      	ldr	r3, [pc, #224]	; (8008950 <USBD_SetConfig+0x118>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01a      	beq.n	80088ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008876:	4b36      	ldr	r3, [pc, #216]	; (8008950 <USBD_SetConfig+0x118>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2203      	movs	r2, #3
 8008884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008888:	4b31      	ldr	r3, [pc, #196]	; (8008950 <USBD_SetConfig+0x118>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff f9e8 	bl	8007c64 <USBD_SetClassConfig>
 8008894:	4603      	mov	r3, r0
 8008896:	2b02      	cmp	r3, #2
 8008898:	d104      	bne.n	80088a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f932 	bl	8008b06 <USBD_CtlError>
            return;
 80088a2:	e052      	b.n	800894a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f9d8 	bl	8008c5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088aa:	e04e      	b.n	800894a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f9d4 	bl	8008c5a <USBD_CtlSendStatus>
        break;
 80088b2:	e04a      	b.n	800894a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088b4:	4b26      	ldr	r3, [pc, #152]	; (8008950 <USBD_SetConfig+0x118>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d112      	bne.n	80088e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2202      	movs	r2, #2
 80088c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80088c4:	4b22      	ldr	r3, [pc, #136]	; (8008950 <USBD_SetConfig+0x118>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80088ce:	4b20      	ldr	r3, [pc, #128]	; (8008950 <USBD_SetConfig+0x118>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff f9e4 	bl	8007ca2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f9bd 	bl	8008c5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088e0:	e033      	b.n	800894a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80088e2:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <USBD_SetConfig+0x118>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d01d      	beq.n	800892c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff f9d2 	bl	8007ca2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <USBD_SetConfig+0x118>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <USBD_SetConfig+0x118>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff f9a8 	bl	8007c64 <USBD_SetClassConfig>
 8008914:	4603      	mov	r3, r0
 8008916:	2b02      	cmp	r3, #2
 8008918:	d104      	bne.n	8008924 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f8f2 	bl	8008b06 <USBD_CtlError>
            return;
 8008922:	e012      	b.n	800894a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f998 	bl	8008c5a <USBD_CtlSendStatus>
        break;
 800892a:	e00e      	b.n	800894a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f994 	bl	8008c5a <USBD_CtlSendStatus>
        break;
 8008932:	e00a      	b.n	800894a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8e5 	bl	8008b06 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <USBD_SetConfig+0x118>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff f9ad 	bl	8007ca2 <USBD_ClrClassConfig>
        break;
 8008948:	bf00      	nop
    }
  }
}
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200005e4 	.word	0x200005e4

08008954 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88db      	ldrh	r3, [r3, #6]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d004      	beq.n	8008970 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f8cc 	bl	8008b06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800896e:	e022      	b.n	80089b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008976:	2b02      	cmp	r3, #2
 8008978:	dc02      	bgt.n	8008980 <USBD_GetConfig+0x2c>
 800897a:	2b00      	cmp	r3, #0
 800897c:	dc03      	bgt.n	8008986 <USBD_GetConfig+0x32>
 800897e:	e015      	b.n	80089ac <USBD_GetConfig+0x58>
 8008980:	2b03      	cmp	r3, #3
 8008982:	d00b      	beq.n	800899c <USBD_GetConfig+0x48>
 8008984:	e012      	b.n	80089ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3308      	adds	r3, #8
 8008990:	2201      	movs	r2, #1
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f920 	bl	8008bda <USBD_CtlSendData>
        break;
 800899a:	e00c      	b.n	80089b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	2201      	movs	r2, #1
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f918 	bl	8008bda <USBD_CtlSendData>
        break;
 80089aa:	e004      	b.n	80089b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f8a9 	bl	8008b06 <USBD_CtlError>
        break;
 80089b4:	bf00      	nop
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ce:	3b01      	subs	r3, #1
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d81e      	bhi.n	8008a12 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	88db      	ldrh	r3, [r3, #6]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d004      	beq.n	80089e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f891 	bl	8008b06 <USBD_CtlError>
        break;
 80089e4:	e01a      	b.n	8008a1c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f043 0202 	orr.w	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	330c      	adds	r3, #12
 8008a06:	2202      	movs	r2, #2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f8e5 	bl	8008bda <USBD_CtlSendData>
      break;
 8008a10:	e004      	b.n	8008a1c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f876 	bl	8008b06 <USBD_CtlError>
      break;
 8008a1a:	bf00      	nop
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d106      	bne.n	8008a44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f90b 	bl	8008c5a <USBD_CtlSendStatus>
  }
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d80b      	bhi.n	8008a7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	885b      	ldrh	r3, [r3, #2]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d10c      	bne.n	8008a84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f8f1 	bl	8008c5a <USBD_CtlSendStatus>
      }
      break;
 8008a78:	e004      	b.n	8008a84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f842 	bl	8008b06 <USBD_CtlError>
      break;
 8008a82:	e000      	b.n	8008a86 <USBD_ClrFeature+0x3a>
      break;
 8008a84:	bf00      	nop
  }
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781a      	ldrb	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785a      	ldrb	r2, [r3, #1]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	3302      	adds	r3, #2
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	3303      	adds	r3, #3
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	3305      	adds	r3, #5
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	3306      	adds	r3, #6
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	3307      	adds	r3, #7
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	80da      	strh	r2, [r3, #6]

}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr

08008b06 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b10:	2180      	movs	r1, #128	; 0x80
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fb66 	bl	80091e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b18:	2100      	movs	r1, #0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fb62 	bl	80091e4 <USBD_LL_StallEP>
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d032      	beq.n	8008ba4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 f834 	bl	8008bac <USBD_GetLen>
 8008b44:	4603      	mov	r3, r0
 8008b46:	3301      	adds	r3, #1
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	75fa      	strb	r2, [r7, #23]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	7812      	ldrb	r2, [r2, #0]
 8008b62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	75fa      	strb	r2, [r7, #23]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4413      	add	r3, r2
 8008b70:	2203      	movs	r2, #3
 8008b72:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b74:	e012      	b.n	8008b9c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	60fa      	str	r2, [r7, #12]
 8008b7c:	7dfa      	ldrb	r2, [r7, #23]
 8008b7e:	1c51      	adds	r1, r2, #1
 8008b80:	75f9      	strb	r1, [r7, #23]
 8008b82:	4611      	mov	r1, r2
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	440a      	add	r2, r1
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	75fa      	strb	r2, [r7, #23]
 8008b92:	461a      	mov	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4413      	add	r3, r2
 8008b98:	2200      	movs	r2, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e8      	bne.n	8008b76 <USBD_GetString+0x4e>
    }
  }
}
 8008ba4:	bf00      	nop
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008bb8:	e005      	b.n	8008bc6 <USBD_GetLen+0x1a>
  {
    len++;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f5      	bne.n	8008bba <USBD_GetLen+0xe>
  }

  return len;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bc80      	pop	{r7}
 8008bd8:	4770      	bx	lr

08008bda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	4613      	mov	r3, r2
 8008be6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2202      	movs	r2, #2
 8008bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bf0:	88fa      	ldrh	r2, [r7, #6]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008bf6:	88fa      	ldrh	r2, [r7, #6]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	2100      	movs	r1, #0
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fb77 	bl	80092f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fb65 	bl	80092f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	4613      	mov	r3, r2
 8008c42:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 fb76 	bl	800933c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2204      	movs	r2, #4
 8008c66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2100      	movs	r1, #0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fb40 	bl	80092f6 <USBD_LL_Transmit>

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c90:	2300      	movs	r3, #0
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fb50 	bl	800933c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cac:	2200      	movs	r2, #0
 8008cae:	490e      	ldr	r1, [pc, #56]	; (8008ce8 <MX_USB_DEVICE_Init+0x40>)
 8008cb0:	480e      	ldr	r0, [pc, #56]	; (8008cec <MX_USB_DEVICE_Init+0x44>)
 8008cb2:	f7fe ff7d 	bl	8007bb0 <USBD_Init>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cbc:	f7f7 fbf2 	bl	80004a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008cc0:	490b      	ldr	r1, [pc, #44]	; (8008cf0 <MX_USB_DEVICE_Init+0x48>)
 8008cc2:	480a      	ldr	r0, [pc, #40]	; (8008cec <MX_USB_DEVICE_Init+0x44>)
 8008cc4:	f7fe ff9f 	bl	8007c06 <USBD_RegisterClass>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cce:	f7f7 fbe9 	bl	80004a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cd2:	4806      	ldr	r0, [pc, #24]	; (8008cec <MX_USB_DEVICE_Init+0x44>)
 8008cd4:	f7fe ffb0 	bl	8007c38 <USBD_Start>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008cde:	f7f7 fbe1 	bl	80004a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ce2:	bf00      	nop
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000184 	.word	0x20000184
 8008cec:	200005e8 	.word	0x200005e8
 8008cf0:	2000000c 	.word	0x2000000c

08008cf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2212      	movs	r2, #18
 8008d04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	200001a0 	.word	0x200001a0

08008d18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2204      	movs	r2, #4
 8008d28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d2a:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bc80      	pop	{r7}
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	200001b4 	.word	0x200001b4

08008d3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d105      	bne.n	8008d5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	4907      	ldr	r1, [pc, #28]	; (8008d70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d52:	4808      	ldr	r0, [pc, #32]	; (8008d74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d54:	f7ff fee8 	bl	8008b28 <USBD_GetString>
 8008d58:	e004      	b.n	8008d64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4904      	ldr	r1, [pc, #16]	; (8008d70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d5e:	4805      	ldr	r0, [pc, #20]	; (8008d74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d60:	f7ff fee2 	bl	8008b28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200008ac 	.word	0x200008ac
 8008d74:	0800a1f0 	.word	0x0800a1f0

08008d78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	4904      	ldr	r1, [pc, #16]	; (8008d98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d88:	4804      	ldr	r0, [pc, #16]	; (8008d9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d8a:	f7ff fecd 	bl	8008b28 <USBD_GetString>
  return USBD_StrDesc;
 8008d8e:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	200008ac 	.word	0x200008ac
 8008d9c:	0800a208 	.word	0x0800a208

08008da0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	221a      	movs	r2, #26
 8008db0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008db2:	f000 f843 	bl	8008e3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008db6:	4b02      	ldr	r3, [pc, #8]	; (8008dc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	200001b8 	.word	0x200001b8

08008dc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	6039      	str	r1, [r7, #0]
 8008dce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d105      	bne.n	8008de2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	4907      	ldr	r1, [pc, #28]	; (8008df8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dda:	4808      	ldr	r0, [pc, #32]	; (8008dfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ddc:	f7ff fea4 	bl	8008b28 <USBD_GetString>
 8008de0:	e004      	b.n	8008dec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	4904      	ldr	r1, [pc, #16]	; (8008df8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008de6:	4805      	ldr	r0, [pc, #20]	; (8008dfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008de8:	f7ff fe9e 	bl	8008b28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dec:	4b02      	ldr	r3, [pc, #8]	; (8008df8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200008ac 	.word	0x200008ac
 8008dfc:	0800a21c 	.word	0x0800a21c

08008e00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	6039      	str	r1, [r7, #0]
 8008e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	4907      	ldr	r1, [pc, #28]	; (8008e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e16:	4808      	ldr	r0, [pc, #32]	; (8008e38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e18:	f7ff fe86 	bl	8008b28 <USBD_GetString>
 8008e1c:	e004      	b.n	8008e28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	4904      	ldr	r1, [pc, #16]	; (8008e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e22:	4805      	ldr	r0, [pc, #20]	; (8008e38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e24:	f7ff fe80 	bl	8008b28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200008ac 	.word	0x200008ac
 8008e38:	0800a228 	.word	0x0800a228

08008e3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <Get_SerialNum+0x44>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e48:	4b0e      	ldr	r3, [pc, #56]	; (8008e84 <Get_SerialNum+0x48>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <Get_SerialNum+0x4c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4413      	add	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d009      	beq.n	8008e76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e62:	2208      	movs	r2, #8
 8008e64:	4909      	ldr	r1, [pc, #36]	; (8008e8c <Get_SerialNum+0x50>)
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f814 	bl	8008e94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	4908      	ldr	r1, [pc, #32]	; (8008e90 <Get_SerialNum+0x54>)
 8008e70:	68b8      	ldr	r0, [r7, #8]
 8008e72:	f000 f80f 	bl	8008e94 <IntToUnicode>
  }
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	1ffff7e8 	.word	0x1ffff7e8
 8008e84:	1ffff7ec 	.word	0x1ffff7ec
 8008e88:	1ffff7f0 	.word	0x1ffff7f0
 8008e8c:	200001ba 	.word	0x200001ba
 8008e90:	200001ca 	.word	0x200001ca

08008e94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75fb      	strb	r3, [r7, #23]
 8008eaa:	e027      	b.n	8008efc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	0f1b      	lsrs	r3, r3, #28
 8008eb0:	2b09      	cmp	r3, #9
 8008eb2:	d80b      	bhi.n	8008ecc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	0f1b      	lsrs	r3, r3, #28
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	440b      	add	r3, r1
 8008ec4:	3230      	adds	r2, #48	; 0x30
 8008ec6:	b2d2      	uxtb	r2, r2
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e00a      	b.n	8008ee2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	0f1b      	lsrs	r3, r3, #28
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	440b      	add	r3, r1
 8008edc:	3237      	adds	r2, #55	; 0x37
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	005b      	lsls	r3, r3, #1
 8008eec:	3301      	adds	r3, #1
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	75fb      	strb	r3, [r7, #23]
 8008efc:	7dfa      	ldrb	r2, [r7, #23]
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d3d3      	bcc.n	8008eac <IntToUnicode+0x18>
  }
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr

08008f10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a0d      	ldr	r2, [pc, #52]	; (8008f54 <HAL_PCD_MspInit+0x44>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d113      	bne.n	8008f4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f22:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <HAL_PCD_MspInit+0x48>)
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	4a0c      	ldr	r2, [pc, #48]	; (8008f58 <HAL_PCD_MspInit+0x48>)
 8008f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f2c:	61d3      	str	r3, [r2, #28]
 8008f2e:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <HAL_PCD_MspInit+0x48>)
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	2014      	movs	r0, #20
 8008f40:	f7f7 fdc5 	bl	8000ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f44:	2014      	movs	r0, #20
 8008f46:	f7f7 fdde 	bl	8000b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40005c00 	.word	0x40005c00
 8008f58:	40021000 	.word	0x40021000

08008f5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7fe fea8 	bl	8007cc8 <USBD_LL_SetupStage>
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f92:	78fa      	ldrb	r2, [r7, #3]
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	440b      	add	r3, r1
 8008fa0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	f7fe feda 	bl	8007d62 <USBD_LL_DataOutStage>
}
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	440b      	add	r3, r1
 8008fd6:	333c      	adds	r3, #60	; 0x3c
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f7fe ff31 	bl	8007e44 <USBD_LL_DataInStage>
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff f841 	bl	8008080 <USBD_LL_SOF>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800900e:	2301      	movs	r3, #1
 8009010:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d001      	beq.n	800901e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800901a:	f7f7 fa43 	bl	80004a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009024:	7bfa      	ldrb	r2, [r7, #15]
 8009026:	4611      	mov	r1, r2
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fff1 	bl	8008010 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe ffaa 	bl	8007f8e <USBD_LL_Reset>
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe ffeb 	bl	800802e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <HAL_PCD_SuspendCallback+0x30>)
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	4a03      	ldr	r2, [pc, #12]	; (8009074 <HAL_PCD_SuspendCallback+0x30>)
 8009066:	f043 0306 	orr.w	r3, r3, #6
 800906a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	e000ed00 	.word	0xe000ed00

08009078 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe ffe5 	bl	8008056 <USBD_LL_Resume>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800909c:	4a1f      	ldr	r2, [pc, #124]	; (800911c <USBD_LL_Init+0x88>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a1d      	ldr	r2, [pc, #116]	; (800911c <USBD_LL_Init+0x88>)
 80090a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80090ac:	4b1b      	ldr	r3, [pc, #108]	; (800911c <USBD_LL_Init+0x88>)
 80090ae:	4a1c      	ldr	r2, [pc, #112]	; (8009120 <USBD_LL_Init+0x8c>)
 80090b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80090b2:	4b1a      	ldr	r3, [pc, #104]	; (800911c <USBD_LL_Init+0x88>)
 80090b4:	2208      	movs	r2, #8
 80090b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80090b8:	4b18      	ldr	r3, [pc, #96]	; (800911c <USBD_LL_Init+0x88>)
 80090ba:	2202      	movs	r2, #2
 80090bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80090be:	4b17      	ldr	r3, [pc, #92]	; (800911c <USBD_LL_Init+0x88>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80090c4:	4b15      	ldr	r3, [pc, #84]	; (800911c <USBD_LL_Init+0x88>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80090ca:	4b14      	ldr	r3, [pc, #80]	; (800911c <USBD_LL_Init+0x88>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80090d0:	4812      	ldr	r0, [pc, #72]	; (800911c <USBD_LL_Init+0x88>)
 80090d2:	f7f8 f933 	bl	800133c <HAL_PCD_Init>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80090dc:	f7f7 f9e2 	bl	80004a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090e6:	2318      	movs	r3, #24
 80090e8:	2200      	movs	r2, #0
 80090ea:	2100      	movs	r1, #0
 80090ec:	f7f9 fc5c 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090f6:	2358      	movs	r3, #88	; 0x58
 80090f8:	2200      	movs	r2, #0
 80090fa:	2180      	movs	r1, #128	; 0x80
 80090fc:	f7f9 fc54 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800910a:	2200      	movs	r2, #0
 800910c:	2181      	movs	r1, #129	; 0x81
 800910e:	f7f9 fc4b 	bl	80029a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20000aac 	.word	0x20000aac
 8009120:	40005c00 	.word	0x40005c00

08009124 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800913a:	4618      	mov	r0, r3
 800913c:	f7f8 fa09 	bl	8001552 <HAL_PCD_Start>
 8009140:	4603      	mov	r3, r0
 8009142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f93c 	bl	80093c4 <USBD_Get_USB_Status>
 800914c:	4603      	mov	r3, r0
 800914e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009150:	7bbb      	ldrb	r3, [r7, #14]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	461a      	mov	r2, r3
 8009168:	4603      	mov	r3, r0
 800916a:	70fb      	strb	r3, [r7, #3]
 800916c:	460b      	mov	r3, r1
 800916e:	70bb      	strb	r3, [r7, #2]
 8009170:	4613      	mov	r3, r2
 8009172:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009182:	78bb      	ldrb	r3, [r7, #2]
 8009184:	883a      	ldrh	r2, [r7, #0]
 8009186:	78f9      	ldrb	r1, [r7, #3]
 8009188:	f7f8 fb81 	bl	800188e <HAL_PCD_EP_Open>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f916 	bl	80093c4 <USBD_Get_USB_Status>
 8009198:	4603      	mov	r3, r0
 800919a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919c:	7bbb      	ldrb	r3, [r7, #14]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	4611      	mov	r1, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f8 fbc8 	bl	800195a <HAL_PCD_EP_Close>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f8f7 	bl	80093c4 <USBD_Get_USB_Status>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091da:	7bbb      	ldrb	r3, [r7, #14]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	4611      	mov	r1, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f7f8 fc71 	bl	8001aea <HAL_PCD_EP_SetStall>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 f8d8 	bl	80093c4 <USBD_Get_USB_Status>
 8009214:	4603      	mov	r3, r0
 8009216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009218:	7bbb      	ldrb	r3, [r7, #14]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f7f8 fcb2 	bl	8001baa <HAL_PCD_EP_ClrStall>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f8b9 	bl	80093c4 <USBD_Get_USB_Status>
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009256:	7bbb      	ldrb	r3, [r7, #14]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009272:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009278:	2b00      	cmp	r3, #0
 800927a:	da0c      	bge.n	8009296 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	4613      	mov	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	440b      	add	r3, r1
 8009290:	3302      	adds	r3, #2
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	e00b      	b.n	80092ae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009296:	78fb      	ldrb	r3, [r7, #3]
 8009298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800929c:	68f9      	ldr	r1, [r7, #12]
 800929e:	4613      	mov	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	440b      	add	r3, r1
 80092a8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80092ac:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bc80      	pop	{r7}
 80092b6:	4770      	bx	lr

080092b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	4611      	mov	r1, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f8 fab4 	bl	8001844 <HAL_PCD_SetAddress>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f86e 	bl	80093c4 <USBD_Get_USB_Status>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	461a      	mov	r2, r3
 8009302:	460b      	mov	r3, r1
 8009304:	72fb      	strb	r3, [r7, #11]
 8009306:	4613      	mov	r3, r2
 8009308:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009318:	893b      	ldrh	r3, [r7, #8]
 800931a:	7af9      	ldrb	r1, [r7, #11]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	f7f8 fba1 	bl	8001a64 <HAL_PCD_EP_Transmit>
 8009322:	4603      	mov	r3, r0
 8009324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009326:	7dfb      	ldrb	r3, [r7, #23]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 f84b 	bl	80093c4 <USBD_Get_USB_Status>
 800932e:	4603      	mov	r3, r0
 8009330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009332:	7dbb      	ldrb	r3, [r7, #22]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	461a      	mov	r2, r3
 8009348:	460b      	mov	r3, r1
 800934a:	72fb      	strb	r3, [r7, #11]
 800934c:	4613      	mov	r3, r2
 800934e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800935e:	893b      	ldrh	r3, [r7, #8]
 8009360:	7af9      	ldrb	r1, [r7, #11]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	f7f8 fb41 	bl	80019ea <HAL_PCD_EP_Receive>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f828 	bl	80093c4 <USBD_Get_USB_Status>
 8009374:	4603      	mov	r3, r0
 8009376:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009378:	7dbb      	ldrb	r3, [r7, #22]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <USBD_static_malloc+0x14>)
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	bc80      	pop	{r7}
 8009396:	4770      	bx	lr
 8009398:	20000d98 	.word	0x20000d98

0800939c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]

}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bc80      	pop	{r7}
 80093ac:	4770      	bx	lr

080093ae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ae:	b480      	push	{r7}
 80093b0:	b083      	sub	sp, #12
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	460b      	mov	r3, r1
 80093b8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	bc80      	pop	{r7}
 80093c2:	4770      	bx	lr

080093c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d817      	bhi.n	8009408 <USBD_Get_USB_Status+0x44>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <USBD_Get_USB_Status+0x1c>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	080093f1 	.word	0x080093f1
 80093e4:	080093f7 	.word	0x080093f7
 80093e8:	080093fd 	.word	0x080093fd
 80093ec:	08009403 	.word	0x08009403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
    break;
 80093f4:	e00b      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093f6:	2302      	movs	r3, #2
 80093f8:	73fb      	strb	r3, [r7, #15]
    break;
 80093fa:	e008      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009400:	e005      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009402:	2302      	movs	r3, #2
 8009404:	73fb      	strb	r3, [r7, #15]
    break;
 8009406:	e002      	b.n	800940e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009408:	2302      	movs	r3, #2
 800940a:	73fb      	strb	r3, [r7, #15]
    break;
 800940c:	bf00      	nop
  }
  return usb_status;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop

0800941c <__cxa_guard_acquire>:
 800941c:	6802      	ldr	r2, [r0, #0]
 800941e:	4603      	mov	r3, r0
 8009420:	07d2      	lsls	r2, r2, #31
 8009422:	d405      	bmi.n	8009430 <__cxa_guard_acquire+0x14>
 8009424:	7842      	ldrb	r2, [r0, #1]
 8009426:	b102      	cbz	r2, 800942a <__cxa_guard_acquire+0xe>
 8009428:	deff      	udf	#255	; 0xff
 800942a:	2001      	movs	r0, #1
 800942c:	7058      	strb	r0, [r3, #1]
 800942e:	4770      	bx	lr
 8009430:	2000      	movs	r0, #0
 8009432:	4770      	bx	lr

08009434 <__cxa_guard_release>:
 8009434:	2301      	movs	r3, #1
 8009436:	6003      	str	r3, [r0, #0]
 8009438:	4770      	bx	lr

0800943a <_Znwj>:
 800943a:	2801      	cmp	r0, #1
 800943c:	bf38      	it	cc
 800943e:	2001      	movcc	r0, #1
 8009440:	b510      	push	{r4, lr}
 8009442:	4604      	mov	r4, r0
 8009444:	4620      	mov	r0, r4
 8009446:	f000 f843 	bl	80094d0 <malloc>
 800944a:	b930      	cbnz	r0, 800945a <_Znwj+0x20>
 800944c:	f000 f806 	bl	800945c <_ZSt15get_new_handlerv>
 8009450:	b908      	cbnz	r0, 8009456 <_Znwj+0x1c>
 8009452:	f000 f80b 	bl	800946c <abort>
 8009456:	4780      	blx	r0
 8009458:	e7f4      	b.n	8009444 <_Znwj+0xa>
 800945a:	bd10      	pop	{r4, pc}

0800945c <_ZSt15get_new_handlerv>:
 800945c:	4b02      	ldr	r3, [pc, #8]	; (8009468 <_ZSt15get_new_handlerv+0xc>)
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	f3bf 8f5b 	dmb	ish
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	20000dac 	.word	0x20000dac

0800946c <abort>:
 800946c:	2006      	movs	r0, #6
 800946e:	b508      	push	{r3, lr}
 8009470:	f000 faea 	bl	8009a48 <raise>
 8009474:	2001      	movs	r0, #1
 8009476:	f7f7 f960 	bl	800073a <_exit>
	...

0800947c <__errno>:
 800947c:	4b01      	ldr	r3, [pc, #4]	; (8009484 <__errno+0x8>)
 800947e:	6818      	ldr	r0, [r3, #0]
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	200001d4 	.word	0x200001d4

08009488 <__libc_init_array>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	2600      	movs	r6, #0
 800948c:	4d0c      	ldr	r5, [pc, #48]	; (80094c0 <__libc_init_array+0x38>)
 800948e:	4c0d      	ldr	r4, [pc, #52]	; (80094c4 <__libc_init_array+0x3c>)
 8009490:	1b64      	subs	r4, r4, r5
 8009492:	10a4      	asrs	r4, r4, #2
 8009494:	42a6      	cmp	r6, r4
 8009496:	d109      	bne.n	80094ac <__libc_init_array+0x24>
 8009498:	f000 fe8c 	bl	800a1b4 <_init>
 800949c:	2600      	movs	r6, #0
 800949e:	4d0a      	ldr	r5, [pc, #40]	; (80094c8 <__libc_init_array+0x40>)
 80094a0:	4c0a      	ldr	r4, [pc, #40]	; (80094cc <__libc_init_array+0x44>)
 80094a2:	1b64      	subs	r4, r4, r5
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	42a6      	cmp	r6, r4
 80094a8:	d105      	bne.n	80094b6 <__libc_init_array+0x2e>
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b0:	4798      	blx	r3
 80094b2:	3601      	adds	r6, #1
 80094b4:	e7ee      	b.n	8009494 <__libc_init_array+0xc>
 80094b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ba:	4798      	blx	r3
 80094bc:	3601      	adds	r6, #1
 80094be:	e7f2      	b.n	80094a6 <__libc_init_array+0x1e>
 80094c0:	0800a384 	.word	0x0800a384
 80094c4:	0800a384 	.word	0x0800a384
 80094c8:	0800a384 	.word	0x0800a384
 80094cc:	0800a388 	.word	0x0800a388

080094d0 <malloc>:
 80094d0:	4b02      	ldr	r3, [pc, #8]	; (80094dc <malloc+0xc>)
 80094d2:	4601      	mov	r1, r0
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	f000 b881 	b.w	80095dc <_malloc_r>
 80094da:	bf00      	nop
 80094dc:	200001d4 	.word	0x200001d4

080094e0 <memcpy>:
 80094e0:	440a      	add	r2, r1
 80094e2:	4291      	cmp	r1, r2
 80094e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e8:	d100      	bne.n	80094ec <memcpy+0xc>
 80094ea:	4770      	bx	lr
 80094ec:	b510      	push	{r4, lr}
 80094ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f2:	4291      	cmp	r1, r2
 80094f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f8:	d1f9      	bne.n	80094ee <memcpy+0xe>
 80094fa:	bd10      	pop	{r4, pc}

080094fc <memset>:
 80094fc:	4603      	mov	r3, r0
 80094fe:	4402      	add	r2, r0
 8009500:	4293      	cmp	r3, r2
 8009502:	d100      	bne.n	8009506 <memset+0xa>
 8009504:	4770      	bx	lr
 8009506:	f803 1b01 	strb.w	r1, [r3], #1
 800950a:	e7f9      	b.n	8009500 <memset+0x4>

0800950c <_free_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4605      	mov	r5, r0
 8009510:	2900      	cmp	r1, #0
 8009512:	d040      	beq.n	8009596 <_free_r+0x8a>
 8009514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009518:	1f0c      	subs	r4, r1, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	bfb8      	it	lt
 800951e:	18e4      	addlt	r4, r4, r3
 8009520:	f000 fae8 	bl	8009af4 <__malloc_lock>
 8009524:	4a1c      	ldr	r2, [pc, #112]	; (8009598 <_free_r+0x8c>)
 8009526:	6813      	ldr	r3, [r2, #0]
 8009528:	b933      	cbnz	r3, 8009538 <_free_r+0x2c>
 800952a:	6063      	str	r3, [r4, #4]
 800952c:	6014      	str	r4, [r2, #0]
 800952e:	4628      	mov	r0, r5
 8009530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009534:	f000 bae4 	b.w	8009b00 <__malloc_unlock>
 8009538:	42a3      	cmp	r3, r4
 800953a:	d908      	bls.n	800954e <_free_r+0x42>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	1821      	adds	r1, r4, r0
 8009540:	428b      	cmp	r3, r1
 8009542:	bf01      	itttt	eq
 8009544:	6819      	ldreq	r1, [r3, #0]
 8009546:	685b      	ldreq	r3, [r3, #4]
 8009548:	1809      	addeq	r1, r1, r0
 800954a:	6021      	streq	r1, [r4, #0]
 800954c:	e7ed      	b.n	800952a <_free_r+0x1e>
 800954e:	461a      	mov	r2, r3
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	b10b      	cbz	r3, 8009558 <_free_r+0x4c>
 8009554:	42a3      	cmp	r3, r4
 8009556:	d9fa      	bls.n	800954e <_free_r+0x42>
 8009558:	6811      	ldr	r1, [r2, #0]
 800955a:	1850      	adds	r0, r2, r1
 800955c:	42a0      	cmp	r0, r4
 800955e:	d10b      	bne.n	8009578 <_free_r+0x6c>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	4401      	add	r1, r0
 8009564:	1850      	adds	r0, r2, r1
 8009566:	4283      	cmp	r3, r0
 8009568:	6011      	str	r1, [r2, #0]
 800956a:	d1e0      	bne.n	800952e <_free_r+0x22>
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4401      	add	r1, r0
 8009572:	6011      	str	r1, [r2, #0]
 8009574:	6053      	str	r3, [r2, #4]
 8009576:	e7da      	b.n	800952e <_free_r+0x22>
 8009578:	d902      	bls.n	8009580 <_free_r+0x74>
 800957a:	230c      	movs	r3, #12
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	e7d6      	b.n	800952e <_free_r+0x22>
 8009580:	6820      	ldr	r0, [r4, #0]
 8009582:	1821      	adds	r1, r4, r0
 8009584:	428b      	cmp	r3, r1
 8009586:	bf01      	itttt	eq
 8009588:	6819      	ldreq	r1, [r3, #0]
 800958a:	685b      	ldreq	r3, [r3, #4]
 800958c:	1809      	addeq	r1, r1, r0
 800958e:	6021      	streq	r1, [r4, #0]
 8009590:	6063      	str	r3, [r4, #4]
 8009592:	6054      	str	r4, [r2, #4]
 8009594:	e7cb      	b.n	800952e <_free_r+0x22>
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000db0 	.word	0x20000db0

0800959c <sbrk_aligned>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4e0e      	ldr	r6, [pc, #56]	; (80095d8 <sbrk_aligned+0x3c>)
 80095a0:	460c      	mov	r4, r1
 80095a2:	6831      	ldr	r1, [r6, #0]
 80095a4:	4605      	mov	r5, r0
 80095a6:	b911      	cbnz	r1, 80095ae <sbrk_aligned+0x12>
 80095a8:	f000 fa16 	bl	80099d8 <_sbrk_r>
 80095ac:	6030      	str	r0, [r6, #0]
 80095ae:	4621      	mov	r1, r4
 80095b0:	4628      	mov	r0, r5
 80095b2:	f000 fa11 	bl	80099d8 <_sbrk_r>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d00a      	beq.n	80095d0 <sbrk_aligned+0x34>
 80095ba:	1cc4      	adds	r4, r0, #3
 80095bc:	f024 0403 	bic.w	r4, r4, #3
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d007      	beq.n	80095d4 <sbrk_aligned+0x38>
 80095c4:	1a21      	subs	r1, r4, r0
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 fa06 	bl	80099d8 <_sbrk_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d101      	bne.n	80095d4 <sbrk_aligned+0x38>
 80095d0:	f04f 34ff 	mov.w	r4, #4294967295
 80095d4:	4620      	mov	r0, r4
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	20000db4 	.word	0x20000db4

080095dc <_malloc_r>:
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	1ccd      	adds	r5, r1, #3
 80095e2:	f025 0503 	bic.w	r5, r5, #3
 80095e6:	3508      	adds	r5, #8
 80095e8:	2d0c      	cmp	r5, #12
 80095ea:	bf38      	it	cc
 80095ec:	250c      	movcc	r5, #12
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	4607      	mov	r7, r0
 80095f2:	db01      	blt.n	80095f8 <_malloc_r+0x1c>
 80095f4:	42a9      	cmp	r1, r5
 80095f6:	d905      	bls.n	8009604 <_malloc_r+0x28>
 80095f8:	230c      	movs	r3, #12
 80095fa:	2600      	movs	r6, #0
 80095fc:	603b      	str	r3, [r7, #0]
 80095fe:	4630      	mov	r0, r6
 8009600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009604:	4e2e      	ldr	r6, [pc, #184]	; (80096c0 <_malloc_r+0xe4>)
 8009606:	f000 fa75 	bl	8009af4 <__malloc_lock>
 800960a:	6833      	ldr	r3, [r6, #0]
 800960c:	461c      	mov	r4, r3
 800960e:	bb34      	cbnz	r4, 800965e <_malloc_r+0x82>
 8009610:	4629      	mov	r1, r5
 8009612:	4638      	mov	r0, r7
 8009614:	f7ff ffc2 	bl	800959c <sbrk_aligned>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	4604      	mov	r4, r0
 800961c:	d14d      	bne.n	80096ba <_malloc_r+0xde>
 800961e:	6834      	ldr	r4, [r6, #0]
 8009620:	4626      	mov	r6, r4
 8009622:	2e00      	cmp	r6, #0
 8009624:	d140      	bne.n	80096a8 <_malloc_r+0xcc>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	4631      	mov	r1, r6
 800962a:	4638      	mov	r0, r7
 800962c:	eb04 0803 	add.w	r8, r4, r3
 8009630:	f000 f9d2 	bl	80099d8 <_sbrk_r>
 8009634:	4580      	cmp	r8, r0
 8009636:	d13a      	bne.n	80096ae <_malloc_r+0xd2>
 8009638:	6821      	ldr	r1, [r4, #0]
 800963a:	3503      	adds	r5, #3
 800963c:	1a6d      	subs	r5, r5, r1
 800963e:	f025 0503 	bic.w	r5, r5, #3
 8009642:	3508      	adds	r5, #8
 8009644:	2d0c      	cmp	r5, #12
 8009646:	bf38      	it	cc
 8009648:	250c      	movcc	r5, #12
 800964a:	4638      	mov	r0, r7
 800964c:	4629      	mov	r1, r5
 800964e:	f7ff ffa5 	bl	800959c <sbrk_aligned>
 8009652:	3001      	adds	r0, #1
 8009654:	d02b      	beq.n	80096ae <_malloc_r+0xd2>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	442b      	add	r3, r5
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	e00e      	b.n	800967c <_malloc_r+0xa0>
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	1b52      	subs	r2, r2, r5
 8009662:	d41e      	bmi.n	80096a2 <_malloc_r+0xc6>
 8009664:	2a0b      	cmp	r2, #11
 8009666:	d916      	bls.n	8009696 <_malloc_r+0xba>
 8009668:	1961      	adds	r1, r4, r5
 800966a:	42a3      	cmp	r3, r4
 800966c:	6025      	str	r5, [r4, #0]
 800966e:	bf18      	it	ne
 8009670:	6059      	strne	r1, [r3, #4]
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	bf08      	it	eq
 8009676:	6031      	streq	r1, [r6, #0]
 8009678:	5162      	str	r2, [r4, r5]
 800967a:	604b      	str	r3, [r1, #4]
 800967c:	4638      	mov	r0, r7
 800967e:	f104 060b 	add.w	r6, r4, #11
 8009682:	f000 fa3d 	bl	8009b00 <__malloc_unlock>
 8009686:	f026 0607 	bic.w	r6, r6, #7
 800968a:	1d23      	adds	r3, r4, #4
 800968c:	1af2      	subs	r2, r6, r3
 800968e:	d0b6      	beq.n	80095fe <_malloc_r+0x22>
 8009690:	1b9b      	subs	r3, r3, r6
 8009692:	50a3      	str	r3, [r4, r2]
 8009694:	e7b3      	b.n	80095fe <_malloc_r+0x22>
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	42a3      	cmp	r3, r4
 800969a:	bf0c      	ite	eq
 800969c:	6032      	streq	r2, [r6, #0]
 800969e:	605a      	strne	r2, [r3, #4]
 80096a0:	e7ec      	b.n	800967c <_malloc_r+0xa0>
 80096a2:	4623      	mov	r3, r4
 80096a4:	6864      	ldr	r4, [r4, #4]
 80096a6:	e7b2      	b.n	800960e <_malloc_r+0x32>
 80096a8:	4634      	mov	r4, r6
 80096aa:	6876      	ldr	r6, [r6, #4]
 80096ac:	e7b9      	b.n	8009622 <_malloc_r+0x46>
 80096ae:	230c      	movs	r3, #12
 80096b0:	4638      	mov	r0, r7
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	f000 fa24 	bl	8009b00 <__malloc_unlock>
 80096b8:	e7a1      	b.n	80095fe <_malloc_r+0x22>
 80096ba:	6025      	str	r5, [r4, #0]
 80096bc:	e7de      	b.n	800967c <_malloc_r+0xa0>
 80096be:	bf00      	nop
 80096c0:	20000db0 	.word	0x20000db0

080096c4 <swapfunc>:
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	b510      	push	{r4, lr}
 80096c8:	d00a      	beq.n	80096e0 <swapfunc+0x1c>
 80096ca:	0892      	lsrs	r2, r2, #2
 80096cc:	6803      	ldr	r3, [r0, #0]
 80096ce:	680c      	ldr	r4, [r1, #0]
 80096d0:	3a01      	subs	r2, #1
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	f840 4b04 	str.w	r4, [r0], #4
 80096d8:	f841 3b04 	str.w	r3, [r1], #4
 80096dc:	dcf6      	bgt.n	80096cc <swapfunc+0x8>
 80096de:	bd10      	pop	{r4, pc}
 80096e0:	4402      	add	r2, r0
 80096e2:	780c      	ldrb	r4, [r1, #0]
 80096e4:	7803      	ldrb	r3, [r0, #0]
 80096e6:	f800 4b01 	strb.w	r4, [r0], #1
 80096ea:	f801 3b01 	strb.w	r3, [r1], #1
 80096ee:	1a13      	subs	r3, r2, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dcf6      	bgt.n	80096e2 <swapfunc+0x1e>
 80096f4:	e7f3      	b.n	80096de <swapfunc+0x1a>

080096f6 <med3.constprop.0>:
 80096f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f8:	460c      	mov	r4, r1
 80096fa:	4615      	mov	r5, r2
 80096fc:	4607      	mov	r7, r0
 80096fe:	461e      	mov	r6, r3
 8009700:	4798      	blx	r3
 8009702:	2800      	cmp	r0, #0
 8009704:	4629      	mov	r1, r5
 8009706:	4620      	mov	r0, r4
 8009708:	da0a      	bge.n	8009720 <med3.constprop.0+0x2a>
 800970a:	47b0      	blx	r6
 800970c:	2800      	cmp	r0, #0
 800970e:	db05      	blt.n	800971c <med3.constprop.0+0x26>
 8009710:	4629      	mov	r1, r5
 8009712:	4638      	mov	r0, r7
 8009714:	47b0      	blx	r6
 8009716:	2800      	cmp	r0, #0
 8009718:	db0a      	blt.n	8009730 <med3.constprop.0+0x3a>
 800971a:	463c      	mov	r4, r7
 800971c:	4620      	mov	r0, r4
 800971e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009720:	47b0      	blx	r6
 8009722:	2800      	cmp	r0, #0
 8009724:	dcfa      	bgt.n	800971c <med3.constprop.0+0x26>
 8009726:	4629      	mov	r1, r5
 8009728:	4638      	mov	r0, r7
 800972a:	47b0      	blx	r6
 800972c:	2800      	cmp	r0, #0
 800972e:	dbf4      	blt.n	800971a <med3.constprop.0+0x24>
 8009730:	462c      	mov	r4, r5
 8009732:	e7f3      	b.n	800971c <med3.constprop.0+0x26>

08009734 <qsort>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	469a      	mov	sl, r3
 800973a:	ea40 0302 	orr.w	r3, r0, r2
 800973e:	079b      	lsls	r3, r3, #30
 8009740:	4606      	mov	r6, r0
 8009742:	4614      	mov	r4, r2
 8009744:	b097      	sub	sp, #92	; 0x5c
 8009746:	d11a      	bne.n	800977e <qsort+0x4a>
 8009748:	f1b2 0804 	subs.w	r8, r2, #4
 800974c:	bf18      	it	ne
 800974e:	f04f 0801 	movne.w	r8, #1
 8009752:	2300      	movs	r3, #0
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	fb04 f701 	mul.w	r7, r4, r1
 800975a:	1933      	adds	r3, r6, r4
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	2906      	cmp	r1, #6
 8009760:	eb06 0307 	add.w	r3, r6, r7
 8009764:	9303      	str	r3, [sp, #12]
 8009766:	d82a      	bhi.n	80097be <qsort+0x8a>
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	9a03      	ldr	r2, [sp, #12]
 800976c:	4293      	cmp	r3, r2
 800976e:	d310      	bcc.n	8009792 <qsort+0x5e>
 8009770:	9b02      	ldr	r3, [sp, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f040 811f 	bne.w	80099b6 <qsort+0x282>
 8009778:	b017      	add	sp, #92	; 0x5c
 800977a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977e:	f04f 0802 	mov.w	r8, #2
 8009782:	e7e6      	b.n	8009752 <qsort+0x1e>
 8009784:	4643      	mov	r3, r8
 8009786:	4622      	mov	r2, r4
 8009788:	4639      	mov	r1, r7
 800978a:	4628      	mov	r0, r5
 800978c:	f7ff ff9a 	bl	80096c4 <swapfunc>
 8009790:	e00e      	b.n	80097b0 <qsort+0x7c>
 8009792:	9d01      	ldr	r5, [sp, #4]
 8009794:	e00d      	b.n	80097b2 <qsort+0x7e>
 8009796:	1b2f      	subs	r7, r5, r4
 8009798:	4629      	mov	r1, r5
 800979a:	4638      	mov	r0, r7
 800979c:	47d0      	blx	sl
 800979e:	2800      	cmp	r0, #0
 80097a0:	dd09      	ble.n	80097b6 <qsort+0x82>
 80097a2:	f1b8 0f00 	cmp.w	r8, #0
 80097a6:	d1ed      	bne.n	8009784 <qsort+0x50>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	463d      	mov	r5, r7
 80097b2:	42ae      	cmp	r6, r5
 80097b4:	d3ef      	bcc.n	8009796 <qsort+0x62>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	4423      	add	r3, r4
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	e7d4      	b.n	8009768 <qsort+0x34>
 80097be:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80097c2:	1b3f      	subs	r7, r7, r4
 80097c4:	2907      	cmp	r1, #7
 80097c6:	fb04 6909 	mla	r9, r4, r9, r6
 80097ca:	4437      	add	r7, r6
 80097cc:	d022      	beq.n	8009814 <qsort+0xe0>
 80097ce:	2928      	cmp	r1, #40	; 0x28
 80097d0:	d945      	bls.n	800985e <qsort+0x12a>
 80097d2:	08c9      	lsrs	r1, r1, #3
 80097d4:	fb04 f501 	mul.w	r5, r4, r1
 80097d8:	4653      	mov	r3, sl
 80097da:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 80097de:	1971      	adds	r1, r6, r5
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7ff ff88 	bl	80096f6 <med3.constprop.0>
 80097e6:	4649      	mov	r1, r9
 80097e8:	eb09 0205 	add.w	r2, r9, r5
 80097ec:	4653      	mov	r3, sl
 80097ee:	4683      	mov	fp, r0
 80097f0:	1b48      	subs	r0, r1, r5
 80097f2:	f7ff ff80 	bl	80096f6 <med3.constprop.0>
 80097f6:	463a      	mov	r2, r7
 80097f8:	4681      	mov	r9, r0
 80097fa:	4653      	mov	r3, sl
 80097fc:	1b79      	subs	r1, r7, r5
 80097fe:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8009802:	f7ff ff78 	bl	80096f6 <med3.constprop.0>
 8009806:	4602      	mov	r2, r0
 8009808:	4649      	mov	r1, r9
 800980a:	4653      	mov	r3, sl
 800980c:	4658      	mov	r0, fp
 800980e:	f7ff ff72 	bl	80096f6 <med3.constprop.0>
 8009812:	4681      	mov	r9, r0
 8009814:	f1b8 0f00 	cmp.w	r8, #0
 8009818:	d124      	bne.n	8009864 <qsort+0x130>
 800981a:	6833      	ldr	r3, [r6, #0]
 800981c:	f8d9 2000 	ldr.w	r2, [r9]
 8009820:	6032      	str	r2, [r6, #0]
 8009822:	f8c9 3000 	str.w	r3, [r9]
 8009826:	eb06 0b04 	add.w	fp, r6, r4
 800982a:	46b9      	mov	r9, r7
 800982c:	465d      	mov	r5, fp
 800982e:	2300      	movs	r3, #0
 8009830:	45bb      	cmp	fp, r7
 8009832:	d835      	bhi.n	80098a0 <qsort+0x16c>
 8009834:	4631      	mov	r1, r6
 8009836:	4658      	mov	r0, fp
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	47d0      	blx	sl
 800983c:	2800      	cmp	r0, #0
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	dc3e      	bgt.n	80098c0 <qsort+0x18c>
 8009842:	d10a      	bne.n	800985a <qsort+0x126>
 8009844:	f1b8 0f00 	cmp.w	r8, #0
 8009848:	d113      	bne.n	8009872 <qsort+0x13e>
 800984a:	682b      	ldr	r3, [r5, #0]
 800984c:	f8db 2000 	ldr.w	r2, [fp]
 8009850:	602a      	str	r2, [r5, #0]
 8009852:	f8cb 3000 	str.w	r3, [fp]
 8009856:	4425      	add	r5, r4
 8009858:	2301      	movs	r3, #1
 800985a:	44a3      	add	fp, r4
 800985c:	e7e8      	b.n	8009830 <qsort+0xfc>
 800985e:	463a      	mov	r2, r7
 8009860:	46b3      	mov	fp, r6
 8009862:	e7d1      	b.n	8009808 <qsort+0xd4>
 8009864:	4643      	mov	r3, r8
 8009866:	4622      	mov	r2, r4
 8009868:	4649      	mov	r1, r9
 800986a:	4630      	mov	r0, r6
 800986c:	f7ff ff2a 	bl	80096c4 <swapfunc>
 8009870:	e7d9      	b.n	8009826 <qsort+0xf2>
 8009872:	4643      	mov	r3, r8
 8009874:	4622      	mov	r2, r4
 8009876:	4659      	mov	r1, fp
 8009878:	4628      	mov	r0, r5
 800987a:	f7ff ff23 	bl	80096c4 <swapfunc>
 800987e:	e7ea      	b.n	8009856 <qsort+0x122>
 8009880:	d10b      	bne.n	800989a <qsort+0x166>
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	d114      	bne.n	80098b2 <qsort+0x17e>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f8d9 2000 	ldr.w	r2, [r9]
 800988e:	603a      	str	r2, [r7, #0]
 8009890:	f8c9 3000 	str.w	r3, [r9]
 8009894:	2301      	movs	r3, #1
 8009896:	eba9 0904 	sub.w	r9, r9, r4
 800989a:	9f04      	ldr	r7, [sp, #16]
 800989c:	45bb      	cmp	fp, r7
 800989e:	d90f      	bls.n	80098c0 <qsort+0x18c>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d143      	bne.n	800992c <qsort+0x1f8>
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	9a03      	ldr	r2, [sp, #12]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	f4bf af61 	bcs.w	8009770 <qsort+0x3c>
 80098ae:	9d01      	ldr	r5, [sp, #4]
 80098b0:	e036      	b.n	8009920 <qsort+0x1ec>
 80098b2:	4643      	mov	r3, r8
 80098b4:	4622      	mov	r2, r4
 80098b6:	4649      	mov	r1, r9
 80098b8:	4638      	mov	r0, r7
 80098ba:	f7ff ff03 	bl	80096c4 <swapfunc>
 80098be:	e7e9      	b.n	8009894 <qsort+0x160>
 80098c0:	4631      	mov	r1, r6
 80098c2:	4638      	mov	r0, r7
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	47d0      	blx	sl
 80098c8:	1b3b      	subs	r3, r7, r4
 80098ca:	2800      	cmp	r0, #0
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	dad6      	bge.n	8009880 <qsort+0x14c>
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	d006      	beq.n	80098e6 <qsort+0x1b2>
 80098d8:	4643      	mov	r3, r8
 80098da:	4622      	mov	r2, r4
 80098dc:	4639      	mov	r1, r7
 80098de:	4658      	mov	r0, fp
 80098e0:	f7ff fef0 	bl	80096c4 <swapfunc>
 80098e4:	e005      	b.n	80098f2 <qsort+0x1be>
 80098e6:	f8db 3000 	ldr.w	r3, [fp]
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	f8cb 2000 	str.w	r2, [fp]
 80098f0:	603b      	str	r3, [r7, #0]
 80098f2:	9f04      	ldr	r7, [sp, #16]
 80098f4:	e7b0      	b.n	8009858 <qsort+0x124>
 80098f6:	4643      	mov	r3, r8
 80098f8:	4622      	mov	r2, r4
 80098fa:	4639      	mov	r1, r7
 80098fc:	4628      	mov	r0, r5
 80098fe:	f7ff fee1 	bl	80096c4 <swapfunc>
 8009902:	e00c      	b.n	800991e <qsort+0x1ea>
 8009904:	1b2f      	subs	r7, r5, r4
 8009906:	4629      	mov	r1, r5
 8009908:	4638      	mov	r0, r7
 800990a:	47d0      	blx	sl
 800990c:	2800      	cmp	r0, #0
 800990e:	dd09      	ble.n	8009924 <qsort+0x1f0>
 8009910:	f1b8 0f00 	cmp.w	r8, #0
 8009914:	d1ef      	bne.n	80098f6 <qsort+0x1c2>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	602a      	str	r2, [r5, #0]
 800991c:	603b      	str	r3, [r7, #0]
 800991e:	463d      	mov	r5, r7
 8009920:	42ae      	cmp	r6, r5
 8009922:	d3ef      	bcc.n	8009904 <qsort+0x1d0>
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	4423      	add	r3, r4
 8009928:	9301      	str	r3, [sp, #4]
 800992a:	e7bb      	b.n	80098a4 <qsort+0x170>
 800992c:	ebab 0305 	sub.w	r3, fp, r5
 8009930:	1baa      	subs	r2, r5, r6
 8009932:	429a      	cmp	r2, r3
 8009934:	bfa8      	it	ge
 8009936:	461a      	movge	r2, r3
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	b12a      	cbz	r2, 8009948 <qsort+0x214>
 800993c:	4643      	mov	r3, r8
 800993e:	4630      	mov	r0, r6
 8009940:	ebab 0102 	sub.w	r1, fp, r2
 8009944:	f7ff febe 	bl	80096c4 <swapfunc>
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	eba9 0707 	sub.w	r7, r9, r7
 800994e:	eba3 0209 	sub.w	r2, r3, r9
 8009952:	1b12      	subs	r2, r2, r4
 8009954:	42ba      	cmp	r2, r7
 8009956:	bf28      	it	cs
 8009958:	463a      	movcs	r2, r7
 800995a:	b12a      	cbz	r2, 8009968 <qsort+0x234>
 800995c:	9903      	ldr	r1, [sp, #12]
 800995e:	4643      	mov	r3, r8
 8009960:	4658      	mov	r0, fp
 8009962:	1a89      	subs	r1, r1, r2
 8009964:	f7ff feae 	bl	80096c4 <swapfunc>
 8009968:	9d01      	ldr	r5, [sp, #4]
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	42af      	cmp	r7, r5
 800996e:	eba3 0007 	sub.w	r0, r3, r7
 8009972:	d904      	bls.n	800997e <qsort+0x24a>
 8009974:	4633      	mov	r3, r6
 8009976:	4606      	mov	r6, r0
 8009978:	4618      	mov	r0, r3
 800997a:	463d      	mov	r5, r7
 800997c:	9f01      	ldr	r7, [sp, #4]
 800997e:	42a7      	cmp	r7, r4
 8009980:	d923      	bls.n	80099ca <qsort+0x296>
 8009982:	9b02      	ldr	r3, [sp, #8]
 8009984:	fbb7 f1f4 	udiv	r1, r7, r4
 8009988:	2b07      	cmp	r3, #7
 800998a:	d80e      	bhi.n	80099aa <qsort+0x276>
 800998c:	fbb5 f5f4 	udiv	r5, r5, r4
 8009990:	9a02      	ldr	r2, [sp, #8]
 8009992:	ab16      	add	r3, sp, #88	; 0x58
 8009994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009998:	f843 6c40 	str.w	r6, [r3, #-64]
 800999c:	f843 5c3c 	str.w	r5, [r3, #-60]
 80099a0:	4613      	mov	r3, r2
 80099a2:	3301      	adds	r3, #1
 80099a4:	9302      	str	r3, [sp, #8]
 80099a6:	4606      	mov	r6, r0
 80099a8:	e6d5      	b.n	8009756 <qsort+0x22>
 80099aa:	4653      	mov	r3, sl
 80099ac:	4622      	mov	r2, r4
 80099ae:	f7ff fec1 	bl	8009734 <qsort>
 80099b2:	42a5      	cmp	r5, r4
 80099b4:	d80c      	bhi.n	80099d0 <qsort+0x29c>
 80099b6:	9b02      	ldr	r3, [sp, #8]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	9302      	str	r3, [sp, #8]
 80099bc:	9a02      	ldr	r2, [sp, #8]
 80099be:	ab16      	add	r3, sp, #88	; 0x58
 80099c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099c4:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 80099c8:	e7ed      	b.n	80099a6 <qsort+0x272>
 80099ca:	42a5      	cmp	r5, r4
 80099cc:	f67f aed0 	bls.w	8009770 <qsort+0x3c>
 80099d0:	fbb5 f1f4 	udiv	r1, r5, r4
 80099d4:	4630      	mov	r0, r6
 80099d6:	e7e6      	b.n	80099a6 <qsort+0x272>

080099d8 <_sbrk_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	2300      	movs	r3, #0
 80099dc:	4d05      	ldr	r5, [pc, #20]	; (80099f4 <_sbrk_r+0x1c>)
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f6 feb4 	bl	8000750 <_sbrk>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_sbrk_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_sbrk_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20000db8 	.word	0x20000db8

080099f8 <_raise_r>:
 80099f8:	291f      	cmp	r1, #31
 80099fa:	b538      	push	{r3, r4, r5, lr}
 80099fc:	4604      	mov	r4, r0
 80099fe:	460d      	mov	r5, r1
 8009a00:	d904      	bls.n	8009a0c <_raise_r+0x14>
 8009a02:	2316      	movs	r3, #22
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a0e:	b112      	cbz	r2, 8009a16 <_raise_r+0x1e>
 8009a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a14:	b94b      	cbnz	r3, 8009a2a <_raise_r+0x32>
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 f830 	bl	8009a7c <_getpid_r>
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	4601      	mov	r1, r0
 8009a20:	4620      	mov	r0, r4
 8009a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a26:	f000 b817 	b.w	8009a58 <_kill_r>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d00a      	beq.n	8009a44 <_raise_r+0x4c>
 8009a2e:	1c59      	adds	r1, r3, #1
 8009a30:	d103      	bne.n	8009a3a <_raise_r+0x42>
 8009a32:	2316      	movs	r3, #22
 8009a34:	6003      	str	r3, [r0, #0]
 8009a36:	2001      	movs	r0, #1
 8009a38:	e7e7      	b.n	8009a0a <_raise_r+0x12>
 8009a3a:	2400      	movs	r4, #0
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a42:	4798      	blx	r3
 8009a44:	2000      	movs	r0, #0
 8009a46:	e7e0      	b.n	8009a0a <_raise_r+0x12>

08009a48 <raise>:
 8009a48:	4b02      	ldr	r3, [pc, #8]	; (8009a54 <raise+0xc>)
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	f7ff bfd3 	b.w	80099f8 <_raise_r>
 8009a52:	bf00      	nop
 8009a54:	200001d4 	.word	0x200001d4

08009a58 <_kill_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4d06      	ldr	r5, [pc, #24]	; (8009a78 <_kill_r+0x20>)
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7f6 fe58 	bl	800071a <_kill>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_kill_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_kill_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	20000db8 	.word	0x20000db8

08009a7c <_getpid_r>:
 8009a7c:	f7f6 be46 	b.w	800070c <_getpid>

08009a80 <siprintf>:
 8009a80:	b40e      	push	{r1, r2, r3}
 8009a82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a86:	b500      	push	{lr}
 8009a88:	b09c      	sub	sp, #112	; 0x70
 8009a8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a8c:	9002      	str	r0, [sp, #8]
 8009a8e:	9006      	str	r0, [sp, #24]
 8009a90:	9107      	str	r1, [sp, #28]
 8009a92:	9104      	str	r1, [sp, #16]
 8009a94:	4808      	ldr	r0, [pc, #32]	; (8009ab8 <siprintf+0x38>)
 8009a96:	4909      	ldr	r1, [pc, #36]	; (8009abc <siprintf+0x3c>)
 8009a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9c:	9105      	str	r1, [sp, #20]
 8009a9e:	6800      	ldr	r0, [r0, #0]
 8009aa0:	a902      	add	r1, sp, #8
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	f000 f88e 	bl	8009bc4 <_svfiprintf_r>
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	b01c      	add	sp, #112	; 0x70
 8009ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab4:	b003      	add	sp, #12
 8009ab6:	4770      	bx	lr
 8009ab8:	200001d4 	.word	0x200001d4
 8009abc:	ffff0208 	.word	0xffff0208

08009ac0 <strcat>:
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	b510      	push	{r4, lr}
 8009ac4:	7814      	ldrb	r4, [r2, #0]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	3201      	adds	r2, #1
 8009aca:	2c00      	cmp	r4, #0
 8009acc:	d1fa      	bne.n	8009ac4 <strcat+0x4>
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ad4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ad8:	2a00      	cmp	r2, #0
 8009ada:	d1f9      	bne.n	8009ad0 <strcat+0x10>
 8009adc:	bd10      	pop	{r4, pc}
	...

08009ae0 <tolower>:
 8009ae0:	4b03      	ldr	r3, [pc, #12]	; (8009af0 <tolower+0x10>)
 8009ae2:	5cc3      	ldrb	r3, [r0, r3]
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	bf08      	it	eq
 8009aec:	3020      	addeq	r0, #32
 8009aee:	4770      	bx	lr
 8009af0:	0800a251 	.word	0x0800a251

08009af4 <__malloc_lock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__malloc_lock+0x8>)
 8009af6:	f000 bafb 	b.w	800a0f0 <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20000dbc 	.word	0x20000dbc

08009b00 <__malloc_unlock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__malloc_unlock+0x8>)
 8009b02:	f000 baf6 	b.w	800a0f2 <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20000dbc 	.word	0x20000dbc

08009b0c <__ssputs_r>:
 8009b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b10:	688e      	ldr	r6, [r1, #8]
 8009b12:	4682      	mov	sl, r0
 8009b14:	429e      	cmp	r6, r3
 8009b16:	460c      	mov	r4, r1
 8009b18:	4690      	mov	r8, r2
 8009b1a:	461f      	mov	r7, r3
 8009b1c:	d838      	bhi.n	8009b90 <__ssputs_r+0x84>
 8009b1e:	898a      	ldrh	r2, [r1, #12]
 8009b20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b24:	d032      	beq.n	8009b8c <__ssputs_r+0x80>
 8009b26:	6825      	ldr	r5, [r4, #0]
 8009b28:	6909      	ldr	r1, [r1, #16]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	eba5 0901 	sub.w	r9, r5, r1
 8009b30:	6965      	ldr	r5, [r4, #20]
 8009b32:	444b      	add	r3, r9
 8009b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b3c:	106d      	asrs	r5, r5, #1
 8009b3e:	429d      	cmp	r5, r3
 8009b40:	bf38      	it	cc
 8009b42:	461d      	movcc	r5, r3
 8009b44:	0553      	lsls	r3, r2, #21
 8009b46:	d531      	bpl.n	8009bac <__ssputs_r+0xa0>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7ff fd47 	bl	80095dc <_malloc_r>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	b950      	cbnz	r0, 8009b68 <__ssputs_r+0x5c>
 8009b52:	230c      	movs	r3, #12
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	f8ca 3000 	str.w	r3, [sl]
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b68:	464a      	mov	r2, r9
 8009b6a:	6921      	ldr	r1, [r4, #16]
 8009b6c:	f7ff fcb8 	bl	80094e0 <memcpy>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	6126      	str	r6, [r4, #16]
 8009b7e:	444e      	add	r6, r9
 8009b80:	6026      	str	r6, [r4, #0]
 8009b82:	463e      	mov	r6, r7
 8009b84:	6165      	str	r5, [r4, #20]
 8009b86:	eba5 0509 	sub.w	r5, r5, r9
 8009b8a:	60a5      	str	r5, [r4, #8]
 8009b8c:	42be      	cmp	r6, r7
 8009b8e:	d900      	bls.n	8009b92 <__ssputs_r+0x86>
 8009b90:	463e      	mov	r6, r7
 8009b92:	4632      	mov	r2, r6
 8009b94:	4641      	mov	r1, r8
 8009b96:	6820      	ldr	r0, [r4, #0]
 8009b98:	f000 faba 	bl	800a110 <memmove>
 8009b9c:	68a3      	ldr	r3, [r4, #8]
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	1b9b      	subs	r3, r3, r6
 8009ba2:	60a3      	str	r3, [r4, #8]
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	4433      	add	r3, r6
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	e7db      	b.n	8009b64 <__ssputs_r+0x58>
 8009bac:	462a      	mov	r2, r5
 8009bae:	f000 fac9 	bl	800a144 <_realloc_r>
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d1e1      	bne.n	8009b7c <__ssputs_r+0x70>
 8009bb8:	4650      	mov	r0, sl
 8009bba:	6921      	ldr	r1, [r4, #16]
 8009bbc:	f7ff fca6 	bl	800950c <_free_r>
 8009bc0:	e7c7      	b.n	8009b52 <__ssputs_r+0x46>
	...

08009bc4 <_svfiprintf_r>:
 8009bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	4698      	mov	r8, r3
 8009bca:	898b      	ldrh	r3, [r1, #12]
 8009bcc:	4607      	mov	r7, r0
 8009bce:	061b      	lsls	r3, r3, #24
 8009bd0:	460d      	mov	r5, r1
 8009bd2:	4614      	mov	r4, r2
 8009bd4:	b09d      	sub	sp, #116	; 0x74
 8009bd6:	d50e      	bpl.n	8009bf6 <_svfiprintf_r+0x32>
 8009bd8:	690b      	ldr	r3, [r1, #16]
 8009bda:	b963      	cbnz	r3, 8009bf6 <_svfiprintf_r+0x32>
 8009bdc:	2140      	movs	r1, #64	; 0x40
 8009bde:	f7ff fcfd 	bl	80095dc <_malloc_r>
 8009be2:	6028      	str	r0, [r5, #0]
 8009be4:	6128      	str	r0, [r5, #16]
 8009be6:	b920      	cbnz	r0, 8009bf2 <_svfiprintf_r+0x2e>
 8009be8:	230c      	movs	r3, #12
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	e0d1      	b.n	8009d96 <_svfiprintf_r+0x1d2>
 8009bf2:	2340      	movs	r3, #64	; 0x40
 8009bf4:	616b      	str	r3, [r5, #20]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfa:	2320      	movs	r3, #32
 8009bfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c00:	2330      	movs	r3, #48	; 0x30
 8009c02:	f04f 0901 	mov.w	r9, #1
 8009c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009db0 <_svfiprintf_r+0x1ec>
 8009c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c12:	4623      	mov	r3, r4
 8009c14:	469a      	mov	sl, r3
 8009c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c1a:	b10a      	cbz	r2, 8009c20 <_svfiprintf_r+0x5c>
 8009c1c:	2a25      	cmp	r2, #37	; 0x25
 8009c1e:	d1f9      	bne.n	8009c14 <_svfiprintf_r+0x50>
 8009c20:	ebba 0b04 	subs.w	fp, sl, r4
 8009c24:	d00b      	beq.n	8009c3e <_svfiprintf_r+0x7a>
 8009c26:	465b      	mov	r3, fp
 8009c28:	4622      	mov	r2, r4
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	f7ff ff6d 	bl	8009b0c <__ssputs_r>
 8009c32:	3001      	adds	r0, #1
 8009c34:	f000 80aa 	beq.w	8009d8c <_svfiprintf_r+0x1c8>
 8009c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c3a:	445a      	add	r2, fp
 8009c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 80a2 	beq.w	8009d8c <_svfiprintf_r+0x1c8>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c52:	f10a 0a01 	add.w	sl, sl, #1
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	9307      	str	r3, [sp, #28]
 8009c5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c5e:	931a      	str	r3, [sp, #104]	; 0x68
 8009c60:	4654      	mov	r4, sl
 8009c62:	2205      	movs	r2, #5
 8009c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c68:	4851      	ldr	r0, [pc, #324]	; (8009db0 <_svfiprintf_r+0x1ec>)
 8009c6a:	f000 fa43 	bl	800a0f4 <memchr>
 8009c6e:	9a04      	ldr	r2, [sp, #16]
 8009c70:	b9d8      	cbnz	r0, 8009caa <_svfiprintf_r+0xe6>
 8009c72:	06d0      	lsls	r0, r2, #27
 8009c74:	bf44      	itt	mi
 8009c76:	2320      	movmi	r3, #32
 8009c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c7c:	0711      	lsls	r1, r2, #28
 8009c7e:	bf44      	itt	mi
 8009c80:	232b      	movmi	r3, #43	; 0x2b
 8009c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c86:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c8c:	d015      	beq.n	8009cba <_svfiprintf_r+0xf6>
 8009c8e:	4654      	mov	r4, sl
 8009c90:	2000      	movs	r0, #0
 8009c92:	f04f 0c0a 	mov.w	ip, #10
 8009c96:	9a07      	ldr	r2, [sp, #28]
 8009c98:	4621      	mov	r1, r4
 8009c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c9e:	3b30      	subs	r3, #48	; 0x30
 8009ca0:	2b09      	cmp	r3, #9
 8009ca2:	d94e      	bls.n	8009d42 <_svfiprintf_r+0x17e>
 8009ca4:	b1b0      	cbz	r0, 8009cd4 <_svfiprintf_r+0x110>
 8009ca6:	9207      	str	r2, [sp, #28]
 8009ca8:	e014      	b.n	8009cd4 <_svfiprintf_r+0x110>
 8009caa:	eba0 0308 	sub.w	r3, r0, r8
 8009cae:	fa09 f303 	lsl.w	r3, r9, r3
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	46a2      	mov	sl, r4
 8009cb6:	9304      	str	r3, [sp, #16]
 8009cb8:	e7d2      	b.n	8009c60 <_svfiprintf_r+0x9c>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	1d19      	adds	r1, r3, #4
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	9103      	str	r1, [sp, #12]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bfbb      	ittet	lt
 8009cc6:	425b      	neglt	r3, r3
 8009cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ccc:	9307      	strge	r3, [sp, #28]
 8009cce:	9307      	strlt	r3, [sp, #28]
 8009cd0:	bfb8      	it	lt
 8009cd2:	9204      	strlt	r2, [sp, #16]
 8009cd4:	7823      	ldrb	r3, [r4, #0]
 8009cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd8:	d10c      	bne.n	8009cf4 <_svfiprintf_r+0x130>
 8009cda:	7863      	ldrb	r3, [r4, #1]
 8009cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8009cde:	d135      	bne.n	8009d4c <_svfiprintf_r+0x188>
 8009ce0:	9b03      	ldr	r3, [sp, #12]
 8009ce2:	3402      	adds	r4, #2
 8009ce4:	1d1a      	adds	r2, r3, #4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	9203      	str	r2, [sp, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfb8      	it	lt
 8009cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009db4 <_svfiprintf_r+0x1f0>
 8009cf8:	2203      	movs	r2, #3
 8009cfa:	4650      	mov	r0, sl
 8009cfc:	7821      	ldrb	r1, [r4, #0]
 8009cfe:	f000 f9f9 	bl	800a0f4 <memchr>
 8009d02:	b140      	cbz	r0, 8009d16 <_svfiprintf_r+0x152>
 8009d04:	2340      	movs	r3, #64	; 0x40
 8009d06:	eba0 000a 	sub.w	r0, r0, sl
 8009d0a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d0e:	9b04      	ldr	r3, [sp, #16]
 8009d10:	3401      	adds	r4, #1
 8009d12:	4303      	orrs	r3, r0
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1a:	2206      	movs	r2, #6
 8009d1c:	4826      	ldr	r0, [pc, #152]	; (8009db8 <_svfiprintf_r+0x1f4>)
 8009d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d22:	f000 f9e7 	bl	800a0f4 <memchr>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d038      	beq.n	8009d9c <_svfiprintf_r+0x1d8>
 8009d2a:	4b24      	ldr	r3, [pc, #144]	; (8009dbc <_svfiprintf_r+0x1f8>)
 8009d2c:	bb1b      	cbnz	r3, 8009d76 <_svfiprintf_r+0x1b2>
 8009d2e:	9b03      	ldr	r3, [sp, #12]
 8009d30:	3307      	adds	r3, #7
 8009d32:	f023 0307 	bic.w	r3, r3, #7
 8009d36:	3308      	adds	r3, #8
 8009d38:	9303      	str	r3, [sp, #12]
 8009d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3c:	4433      	add	r3, r6
 8009d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d40:	e767      	b.n	8009c12 <_svfiprintf_r+0x4e>
 8009d42:	460c      	mov	r4, r1
 8009d44:	2001      	movs	r0, #1
 8009d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d4a:	e7a5      	b.n	8009c98 <_svfiprintf_r+0xd4>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f04f 0c0a 	mov.w	ip, #10
 8009d52:	4619      	mov	r1, r3
 8009d54:	3401      	adds	r4, #1
 8009d56:	9305      	str	r3, [sp, #20]
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d5e:	3a30      	subs	r2, #48	; 0x30
 8009d60:	2a09      	cmp	r2, #9
 8009d62:	d903      	bls.n	8009d6c <_svfiprintf_r+0x1a8>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0c5      	beq.n	8009cf4 <_svfiprintf_r+0x130>
 8009d68:	9105      	str	r1, [sp, #20]
 8009d6a:	e7c3      	b.n	8009cf4 <_svfiprintf_r+0x130>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	2301      	movs	r3, #1
 8009d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d74:	e7f0      	b.n	8009d58 <_svfiprintf_r+0x194>
 8009d76:	ab03      	add	r3, sp, #12
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	462a      	mov	r2, r5
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <_svfiprintf_r+0x1fc>)
 8009d80:	a904      	add	r1, sp, #16
 8009d82:	f3af 8000 	nop.w
 8009d86:	1c42      	adds	r2, r0, #1
 8009d88:	4606      	mov	r6, r0
 8009d8a:	d1d6      	bne.n	8009d3a <_svfiprintf_r+0x176>
 8009d8c:	89ab      	ldrh	r3, [r5, #12]
 8009d8e:	065b      	lsls	r3, r3, #25
 8009d90:	f53f af2c 	bmi.w	8009bec <_svfiprintf_r+0x28>
 8009d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d96:	b01d      	add	sp, #116	; 0x74
 8009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9c:	ab03      	add	r3, sp, #12
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	462a      	mov	r2, r5
 8009da2:	4638      	mov	r0, r7
 8009da4:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <_svfiprintf_r+0x1fc>)
 8009da6:	a904      	add	r1, sp, #16
 8009da8:	f000 f87c 	bl	8009ea4 <_printf_i>
 8009dac:	e7eb      	b.n	8009d86 <_svfiprintf_r+0x1c2>
 8009dae:	bf00      	nop
 8009db0:	0800a351 	.word	0x0800a351
 8009db4:	0800a357 	.word	0x0800a357
 8009db8:	0800a35b 	.word	0x0800a35b
 8009dbc:	00000000 	.word	0x00000000
 8009dc0:	08009b0d 	.word	0x08009b0d

08009dc4 <_printf_common>:
 8009dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	4616      	mov	r6, r2
 8009dca:	4699      	mov	r9, r3
 8009dcc:	688a      	ldr	r2, [r1, #8]
 8009dce:	690b      	ldr	r3, [r1, #16]
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	bfb8      	it	lt
 8009dd6:	4613      	movlt	r3, r2
 8009dd8:	6033      	str	r3, [r6, #0]
 8009dda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dde:	460c      	mov	r4, r1
 8009de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009de4:	b10a      	cbz	r2, 8009dea <_printf_common+0x26>
 8009de6:	3301      	adds	r3, #1
 8009de8:	6033      	str	r3, [r6, #0]
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	0699      	lsls	r1, r3, #26
 8009dee:	bf42      	ittt	mi
 8009df0:	6833      	ldrmi	r3, [r6, #0]
 8009df2:	3302      	addmi	r3, #2
 8009df4:	6033      	strmi	r3, [r6, #0]
 8009df6:	6825      	ldr	r5, [r4, #0]
 8009df8:	f015 0506 	ands.w	r5, r5, #6
 8009dfc:	d106      	bne.n	8009e0c <_printf_common+0x48>
 8009dfe:	f104 0a19 	add.w	sl, r4, #25
 8009e02:	68e3      	ldr	r3, [r4, #12]
 8009e04:	6832      	ldr	r2, [r6, #0]
 8009e06:	1a9b      	subs	r3, r3, r2
 8009e08:	42ab      	cmp	r3, r5
 8009e0a:	dc28      	bgt.n	8009e5e <_printf_common+0x9a>
 8009e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e10:	1e13      	subs	r3, r2, #0
 8009e12:	6822      	ldr	r2, [r4, #0]
 8009e14:	bf18      	it	ne
 8009e16:	2301      	movne	r3, #1
 8009e18:	0692      	lsls	r2, r2, #26
 8009e1a:	d42d      	bmi.n	8009e78 <_printf_common+0xb4>
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e24:	47c0      	blx	r8
 8009e26:	3001      	adds	r0, #1
 8009e28:	d020      	beq.n	8009e6c <_printf_common+0xa8>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	68e5      	ldr	r5, [r4, #12]
 8009e2e:	f003 0306 	and.w	r3, r3, #6
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	bf18      	it	ne
 8009e36:	2500      	movne	r5, #0
 8009e38:	6832      	ldr	r2, [r6, #0]
 8009e3a:	f04f 0600 	mov.w	r6, #0
 8009e3e:	68a3      	ldr	r3, [r4, #8]
 8009e40:	bf08      	it	eq
 8009e42:	1aad      	subeq	r5, r5, r2
 8009e44:	6922      	ldr	r2, [r4, #16]
 8009e46:	bf08      	it	eq
 8009e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	bfc4      	itt	gt
 8009e50:	1a9b      	subgt	r3, r3, r2
 8009e52:	18ed      	addgt	r5, r5, r3
 8009e54:	341a      	adds	r4, #26
 8009e56:	42b5      	cmp	r5, r6
 8009e58:	d11a      	bne.n	8009e90 <_printf_common+0xcc>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e008      	b.n	8009e70 <_printf_common+0xac>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	4652      	mov	r2, sl
 8009e62:	4649      	mov	r1, r9
 8009e64:	4638      	mov	r0, r7
 8009e66:	47c0      	blx	r8
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d103      	bne.n	8009e74 <_printf_common+0xb0>
 8009e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e74:	3501      	adds	r5, #1
 8009e76:	e7c4      	b.n	8009e02 <_printf_common+0x3e>
 8009e78:	2030      	movs	r0, #48	; 0x30
 8009e7a:	18e1      	adds	r1, r4, r3
 8009e7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e80:	1c5a      	adds	r2, r3, #1
 8009e82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e86:	4422      	add	r2, r4
 8009e88:	3302      	adds	r3, #2
 8009e8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e8e:	e7c5      	b.n	8009e1c <_printf_common+0x58>
 8009e90:	2301      	movs	r3, #1
 8009e92:	4622      	mov	r2, r4
 8009e94:	4649      	mov	r1, r9
 8009e96:	4638      	mov	r0, r7
 8009e98:	47c0      	blx	r8
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d0e6      	beq.n	8009e6c <_printf_common+0xa8>
 8009e9e:	3601      	adds	r6, #1
 8009ea0:	e7d9      	b.n	8009e56 <_printf_common+0x92>
	...

08009ea4 <_printf_i>:
 8009ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	7e0f      	ldrb	r7, [r1, #24]
 8009eaa:	4691      	mov	r9, r2
 8009eac:	2f78      	cmp	r7, #120	; 0x78
 8009eae:	4680      	mov	r8, r0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	469a      	mov	sl, r3
 8009eb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009eba:	d807      	bhi.n	8009ecc <_printf_i+0x28>
 8009ebc:	2f62      	cmp	r7, #98	; 0x62
 8009ebe:	d80a      	bhi.n	8009ed6 <_printf_i+0x32>
 8009ec0:	2f00      	cmp	r7, #0
 8009ec2:	f000 80d9 	beq.w	800a078 <_printf_i+0x1d4>
 8009ec6:	2f58      	cmp	r7, #88	; 0x58
 8009ec8:	f000 80a4 	beq.w	800a014 <_printf_i+0x170>
 8009ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ed4:	e03a      	b.n	8009f4c <_printf_i+0xa8>
 8009ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eda:	2b15      	cmp	r3, #21
 8009edc:	d8f6      	bhi.n	8009ecc <_printf_i+0x28>
 8009ede:	a101      	add	r1, pc, #4	; (adr r1, 8009ee4 <_printf_i+0x40>)
 8009ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ee4:	08009f3d 	.word	0x08009f3d
 8009ee8:	08009f51 	.word	0x08009f51
 8009eec:	08009ecd 	.word	0x08009ecd
 8009ef0:	08009ecd 	.word	0x08009ecd
 8009ef4:	08009ecd 	.word	0x08009ecd
 8009ef8:	08009ecd 	.word	0x08009ecd
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	08009ecd 	.word	0x08009ecd
 8009f04:	08009ecd 	.word	0x08009ecd
 8009f08:	08009ecd 	.word	0x08009ecd
 8009f0c:	08009ecd 	.word	0x08009ecd
 8009f10:	0800a05f 	.word	0x0800a05f
 8009f14:	08009f81 	.word	0x08009f81
 8009f18:	0800a041 	.word	0x0800a041
 8009f1c:	08009ecd 	.word	0x08009ecd
 8009f20:	08009ecd 	.word	0x08009ecd
 8009f24:	0800a081 	.word	0x0800a081
 8009f28:	08009ecd 	.word	0x08009ecd
 8009f2c:	08009f81 	.word	0x08009f81
 8009f30:	08009ecd 	.word	0x08009ecd
 8009f34:	08009ecd 	.word	0x08009ecd
 8009f38:	0800a049 	.word	0x0800a049
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	1d1a      	adds	r2, r3, #4
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	602a      	str	r2, [r5, #0]
 8009f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e0a4      	b.n	800a09a <_printf_i+0x1f6>
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	6829      	ldr	r1, [r5, #0]
 8009f54:	0606      	lsls	r6, r0, #24
 8009f56:	f101 0304 	add.w	r3, r1, #4
 8009f5a:	d50a      	bpl.n	8009f72 <_printf_i+0xce>
 8009f5c:	680e      	ldr	r6, [r1, #0]
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	da03      	bge.n	8009f6c <_printf_i+0xc8>
 8009f64:	232d      	movs	r3, #45	; 0x2d
 8009f66:	4276      	negs	r6, r6
 8009f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f6c:	230a      	movs	r3, #10
 8009f6e:	485e      	ldr	r0, [pc, #376]	; (800a0e8 <_printf_i+0x244>)
 8009f70:	e019      	b.n	8009fa6 <_printf_i+0x102>
 8009f72:	680e      	ldr	r6, [r1, #0]
 8009f74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	bf18      	it	ne
 8009f7c:	b236      	sxthne	r6, r6
 8009f7e:	e7ef      	b.n	8009f60 <_printf_i+0xbc>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	6820      	ldr	r0, [r4, #0]
 8009f84:	1d19      	adds	r1, r3, #4
 8009f86:	6029      	str	r1, [r5, #0]
 8009f88:	0601      	lsls	r1, r0, #24
 8009f8a:	d501      	bpl.n	8009f90 <_printf_i+0xec>
 8009f8c:	681e      	ldr	r6, [r3, #0]
 8009f8e:	e002      	b.n	8009f96 <_printf_i+0xf2>
 8009f90:	0646      	lsls	r6, r0, #25
 8009f92:	d5fb      	bpl.n	8009f8c <_printf_i+0xe8>
 8009f94:	881e      	ldrh	r6, [r3, #0]
 8009f96:	2f6f      	cmp	r7, #111	; 0x6f
 8009f98:	bf0c      	ite	eq
 8009f9a:	2308      	moveq	r3, #8
 8009f9c:	230a      	movne	r3, #10
 8009f9e:	4852      	ldr	r0, [pc, #328]	; (800a0e8 <_printf_i+0x244>)
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fa6:	6865      	ldr	r5, [r4, #4]
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	bfa8      	it	ge
 8009fac:	6821      	ldrge	r1, [r4, #0]
 8009fae:	60a5      	str	r5, [r4, #8]
 8009fb0:	bfa4      	itt	ge
 8009fb2:	f021 0104 	bicge.w	r1, r1, #4
 8009fb6:	6021      	strge	r1, [r4, #0]
 8009fb8:	b90e      	cbnz	r6, 8009fbe <_printf_i+0x11a>
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	d04d      	beq.n	800a05a <_printf_i+0x1b6>
 8009fbe:	4615      	mov	r5, r2
 8009fc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fc4:	fb03 6711 	mls	r7, r3, r1, r6
 8009fc8:	5dc7      	ldrb	r7, [r0, r7]
 8009fca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fce:	4637      	mov	r7, r6
 8009fd0:	42bb      	cmp	r3, r7
 8009fd2:	460e      	mov	r6, r1
 8009fd4:	d9f4      	bls.n	8009fc0 <_printf_i+0x11c>
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	d10b      	bne.n	8009ff2 <_printf_i+0x14e>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	07de      	lsls	r6, r3, #31
 8009fde:	d508      	bpl.n	8009ff2 <_printf_i+0x14e>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	6861      	ldr	r1, [r4, #4]
 8009fe4:	4299      	cmp	r1, r3
 8009fe6:	bfde      	ittt	le
 8009fe8:	2330      	movle	r3, #48	; 0x30
 8009fea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ff2:	1b52      	subs	r2, r2, r5
 8009ff4:	6122      	str	r2, [r4, #16]
 8009ff6:	464b      	mov	r3, r9
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	f8cd a000 	str.w	sl, [sp]
 800a000:	aa03      	add	r2, sp, #12
 800a002:	f7ff fedf 	bl	8009dc4 <_printf_common>
 800a006:	3001      	adds	r0, #1
 800a008:	d14c      	bne.n	800a0a4 <_printf_i+0x200>
 800a00a:	f04f 30ff 	mov.w	r0, #4294967295
 800a00e:	b004      	add	sp, #16
 800a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a014:	4834      	ldr	r0, [pc, #208]	; (800a0e8 <_printf_i+0x244>)
 800a016:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a01a:	6829      	ldr	r1, [r5, #0]
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	f851 6b04 	ldr.w	r6, [r1], #4
 800a022:	6029      	str	r1, [r5, #0]
 800a024:	061d      	lsls	r5, r3, #24
 800a026:	d514      	bpl.n	800a052 <_printf_i+0x1ae>
 800a028:	07df      	lsls	r7, r3, #31
 800a02a:	bf44      	itt	mi
 800a02c:	f043 0320 	orrmi.w	r3, r3, #32
 800a030:	6023      	strmi	r3, [r4, #0]
 800a032:	b91e      	cbnz	r6, 800a03c <_printf_i+0x198>
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	f023 0320 	bic.w	r3, r3, #32
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	2310      	movs	r3, #16
 800a03e:	e7af      	b.n	8009fa0 <_printf_i+0xfc>
 800a040:	6823      	ldr	r3, [r4, #0]
 800a042:	f043 0320 	orr.w	r3, r3, #32
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	2378      	movs	r3, #120	; 0x78
 800a04a:	4828      	ldr	r0, [pc, #160]	; (800a0ec <_printf_i+0x248>)
 800a04c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a050:	e7e3      	b.n	800a01a <_printf_i+0x176>
 800a052:	0659      	lsls	r1, r3, #25
 800a054:	bf48      	it	mi
 800a056:	b2b6      	uxthmi	r6, r6
 800a058:	e7e6      	b.n	800a028 <_printf_i+0x184>
 800a05a:	4615      	mov	r5, r2
 800a05c:	e7bb      	b.n	8009fd6 <_printf_i+0x132>
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	6826      	ldr	r6, [r4, #0]
 800a062:	1d18      	adds	r0, r3, #4
 800a064:	6961      	ldr	r1, [r4, #20]
 800a066:	6028      	str	r0, [r5, #0]
 800a068:	0635      	lsls	r5, r6, #24
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	d501      	bpl.n	800a072 <_printf_i+0x1ce>
 800a06e:	6019      	str	r1, [r3, #0]
 800a070:	e002      	b.n	800a078 <_printf_i+0x1d4>
 800a072:	0670      	lsls	r0, r6, #25
 800a074:	d5fb      	bpl.n	800a06e <_printf_i+0x1ca>
 800a076:	8019      	strh	r1, [r3, #0]
 800a078:	2300      	movs	r3, #0
 800a07a:	4615      	mov	r5, r2
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	e7ba      	b.n	8009ff6 <_printf_i+0x152>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	2100      	movs	r1, #0
 800a084:	1d1a      	adds	r2, r3, #4
 800a086:	602a      	str	r2, [r5, #0]
 800a088:	681d      	ldr	r5, [r3, #0]
 800a08a:	6862      	ldr	r2, [r4, #4]
 800a08c:	4628      	mov	r0, r5
 800a08e:	f000 f831 	bl	800a0f4 <memchr>
 800a092:	b108      	cbz	r0, 800a098 <_printf_i+0x1f4>
 800a094:	1b40      	subs	r0, r0, r5
 800a096:	6060      	str	r0, [r4, #4]
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	6123      	str	r3, [r4, #16]
 800a09c:	2300      	movs	r3, #0
 800a09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a2:	e7a8      	b.n	8009ff6 <_printf_i+0x152>
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	47d0      	blx	sl
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	d0ab      	beq.n	800a00a <_printf_i+0x166>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	079b      	lsls	r3, r3, #30
 800a0b6:	d413      	bmi.n	800a0e0 <_printf_i+0x23c>
 800a0b8:	68e0      	ldr	r0, [r4, #12]
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	4298      	cmp	r0, r3
 800a0be:	bfb8      	it	lt
 800a0c0:	4618      	movlt	r0, r3
 800a0c2:	e7a4      	b.n	800a00e <_printf_i+0x16a>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	47d0      	blx	sl
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d09b      	beq.n	800a00a <_printf_i+0x166>
 800a0d2:	3501      	adds	r5, #1
 800a0d4:	68e3      	ldr	r3, [r4, #12]
 800a0d6:	9903      	ldr	r1, [sp, #12]
 800a0d8:	1a5b      	subs	r3, r3, r1
 800a0da:	42ab      	cmp	r3, r5
 800a0dc:	dcf2      	bgt.n	800a0c4 <_printf_i+0x220>
 800a0de:	e7eb      	b.n	800a0b8 <_printf_i+0x214>
 800a0e0:	2500      	movs	r5, #0
 800a0e2:	f104 0619 	add.w	r6, r4, #25
 800a0e6:	e7f5      	b.n	800a0d4 <_printf_i+0x230>
 800a0e8:	0800a362 	.word	0x0800a362
 800a0ec:	0800a373 	.word	0x0800a373

0800a0f0 <__retarget_lock_acquire_recursive>:
 800a0f0:	4770      	bx	lr

0800a0f2 <__retarget_lock_release_recursive>:
 800a0f2:	4770      	bx	lr

0800a0f4 <memchr>:
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	b2c9      	uxtb	r1, r1
 800a0fa:	4402      	add	r2, r0
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	4618      	mov	r0, r3
 800a100:	d101      	bne.n	800a106 <memchr+0x12>
 800a102:	2000      	movs	r0, #0
 800a104:	e003      	b.n	800a10e <memchr+0x1a>
 800a106:	7804      	ldrb	r4, [r0, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	428c      	cmp	r4, r1
 800a10c:	d1f6      	bne.n	800a0fc <memchr+0x8>
 800a10e:	bd10      	pop	{r4, pc}

0800a110 <memmove>:
 800a110:	4288      	cmp	r0, r1
 800a112:	b510      	push	{r4, lr}
 800a114:	eb01 0402 	add.w	r4, r1, r2
 800a118:	d902      	bls.n	800a120 <memmove+0x10>
 800a11a:	4284      	cmp	r4, r0
 800a11c:	4623      	mov	r3, r4
 800a11e:	d807      	bhi.n	800a130 <memmove+0x20>
 800a120:	1e43      	subs	r3, r0, #1
 800a122:	42a1      	cmp	r1, r4
 800a124:	d008      	beq.n	800a138 <memmove+0x28>
 800a126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a12a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a12e:	e7f8      	b.n	800a122 <memmove+0x12>
 800a130:	4601      	mov	r1, r0
 800a132:	4402      	add	r2, r0
 800a134:	428a      	cmp	r2, r1
 800a136:	d100      	bne.n	800a13a <memmove+0x2a>
 800a138:	bd10      	pop	{r4, pc}
 800a13a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a13e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a142:	e7f7      	b.n	800a134 <memmove+0x24>

0800a144 <_realloc_r>:
 800a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a148:	4680      	mov	r8, r0
 800a14a:	4614      	mov	r4, r2
 800a14c:	460e      	mov	r6, r1
 800a14e:	b921      	cbnz	r1, 800a15a <_realloc_r+0x16>
 800a150:	4611      	mov	r1, r2
 800a152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a156:	f7ff ba41 	b.w	80095dc <_malloc_r>
 800a15a:	b92a      	cbnz	r2, 800a168 <_realloc_r+0x24>
 800a15c:	f7ff f9d6 	bl	800950c <_free_r>
 800a160:	4625      	mov	r5, r4
 800a162:	4628      	mov	r0, r5
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	f000 f81b 	bl	800a1a2 <_malloc_usable_size_r>
 800a16c:	4284      	cmp	r4, r0
 800a16e:	4607      	mov	r7, r0
 800a170:	d802      	bhi.n	800a178 <_realloc_r+0x34>
 800a172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a176:	d812      	bhi.n	800a19e <_realloc_r+0x5a>
 800a178:	4621      	mov	r1, r4
 800a17a:	4640      	mov	r0, r8
 800a17c:	f7ff fa2e 	bl	80095dc <_malloc_r>
 800a180:	4605      	mov	r5, r0
 800a182:	2800      	cmp	r0, #0
 800a184:	d0ed      	beq.n	800a162 <_realloc_r+0x1e>
 800a186:	42bc      	cmp	r4, r7
 800a188:	4622      	mov	r2, r4
 800a18a:	4631      	mov	r1, r6
 800a18c:	bf28      	it	cs
 800a18e:	463a      	movcs	r2, r7
 800a190:	f7ff f9a6 	bl	80094e0 <memcpy>
 800a194:	4631      	mov	r1, r6
 800a196:	4640      	mov	r0, r8
 800a198:	f7ff f9b8 	bl	800950c <_free_r>
 800a19c:	e7e1      	b.n	800a162 <_realloc_r+0x1e>
 800a19e:	4635      	mov	r5, r6
 800a1a0:	e7df      	b.n	800a162 <_realloc_r+0x1e>

0800a1a2 <_malloc_usable_size_r>:
 800a1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a6:	1f18      	subs	r0, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfbc      	itt	lt
 800a1ac:	580b      	ldrlt	r3, [r1, r0]
 800a1ae:	18c0      	addlt	r0, r0, r3
 800a1b0:	4770      	bx	lr
	...

0800a1b4 <_init>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	bf00      	nop
 800a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ba:	bc08      	pop	{r3}
 800a1bc:	469e      	mov	lr, r3
 800a1be:	4770      	bx	lr

0800a1c0 <_fini>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr
